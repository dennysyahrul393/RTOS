
RTOS_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006334  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08006444  08006444  00007444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006650  08006650  00008064  2**0
                  CONTENTS
  4 .ARM          00000000  08006650  08006650  00008064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006650  08006650  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006650  08006650  00007650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006654  08006654  00007654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006658  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e34  20000064  080066bc  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e98  080066bc  00008e98  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191ee  00000000  00000000  0000808d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003639  00000000  00000000  0002127b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  000248b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001210  00000000  00000000  00025fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003476  00000000  00000000  000271c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae89  00000000  00000000  0002a636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b734  00000000  00000000  000454bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e0bf3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006698  00000000  00000000  000e0c38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000e72d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000064 	.word	0x20000064
 800012c:	00000000 	.word	0x00000000
 8000130:	0800642c 	.word	0x0800642c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000068 	.word	0x20000068
 800014c:	0800642c 	.word	0x0800642c

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fcee 	bl	8000b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f854 	bl	8000204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f944 	bl	80003e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000160:	f000 f8ac 	bl	80002bc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000164:	f000 f8e8 	bl	8000338 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000168:	f000 f914 	bl	8000394 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800016c:	f002 ff9c 	bl	80030a8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000170:	4a15      	ldr	r2, [pc, #84]	@ (80001c8 <main+0x78>)
 8000172:	2100      	movs	r1, #0
 8000174:	4815      	ldr	r0, [pc, #84]	@ (80001cc <main+0x7c>)
 8000176:	f002 fffd 	bl	8003174 <osThreadNew>
 800017a:	4603      	mov	r3, r0
 800017c:	4a14      	ldr	r2, [pc, #80]	@ (80001d0 <main+0x80>)
 800017e:	6013      	str	r3, [r2, #0]

  /* creation of pickButtonTask */
  pickButtonTaskHandle = osThreadNew(pickButton, NULL, &pickButtonTask_attributes);
 8000180:	4a14      	ldr	r2, [pc, #80]	@ (80001d4 <main+0x84>)
 8000182:	2100      	movs	r1, #0
 8000184:	4814      	ldr	r0, [pc, #80]	@ (80001d8 <main+0x88>)
 8000186:	f002 fff5 	bl	8003174 <osThreadNew>
 800018a:	4603      	mov	r3, r0
 800018c:	4a13      	ldr	r2, [pc, #76]	@ (80001dc <main+0x8c>)
 800018e:	6013      	str	r3, [r2, #0]

  /* creation of getADCTask */
  getADCTaskHandle = osThreadNew(getADC, NULL, &getADCTask_attributes);
 8000190:	4a13      	ldr	r2, [pc, #76]	@ (80001e0 <main+0x90>)
 8000192:	2100      	movs	r1, #0
 8000194:	4813      	ldr	r0, [pc, #76]	@ (80001e4 <main+0x94>)
 8000196:	f002 ffed 	bl	8003174 <osThreadNew>
 800019a:	4603      	mov	r3, r0
 800019c:	4a12      	ldr	r2, [pc, #72]	@ (80001e8 <main+0x98>)
 800019e:	6013      	str	r3, [r2, #0]

  /* creation of dispUARTTask */
  dispUARTTaskHandle = osThreadNew(dispUART, NULL, &dispUARTTask_attributes);
 80001a0:	4a12      	ldr	r2, [pc, #72]	@ (80001ec <main+0x9c>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	4812      	ldr	r0, [pc, #72]	@ (80001f0 <main+0xa0>)
 80001a6:	f002 ffe5 	bl	8003174 <osThreadNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a11      	ldr	r2, [pc, #68]	@ (80001f4 <main+0xa4>)
 80001ae:	6013      	str	r3, [r2, #0]

  /* creation of dispLEDTask */
  dispLEDTaskHandle = osThreadNew(dispLED, NULL, &dispLEDTask_attributes);
 80001b0:	4a11      	ldr	r2, [pc, #68]	@ (80001f8 <main+0xa8>)
 80001b2:	2100      	movs	r1, #0
 80001b4:	4811      	ldr	r0, [pc, #68]	@ (80001fc <main+0xac>)
 80001b6:	f002 ffdd 	bl	8003174 <osThreadNew>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a10      	ldr	r2, [pc, #64]	@ (8000200 <main+0xb0>)
 80001be:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001c0:	f002 ffa4 	bl	800310c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c4:	bf00      	nop
 80001c6:	e7fd      	b.n	80001c4 <main+0x74>
 80001c8:	08006528 	.word	0x08006528
 80001cc:	08000545 	.word	0x08000545
 80001d0:	2000014c 	.word	0x2000014c
 80001d4:	0800654c 	.word	0x0800654c
 80001d8:	08000555 	.word	0x08000555
 80001dc:	20000150 	.word	0x20000150
 80001e0:	08006570 	.word	0x08006570
 80001e4:	080005a5 	.word	0x080005a5
 80001e8:	20000154 	.word	0x20000154
 80001ec:	08006594 	.word	0x08006594
 80001f0:	080005e1 	.word	0x080005e1
 80001f4:	20000158 	.word	0x20000158
 80001f8:	080065b8 	.word	0x080065b8
 80001fc:	080006bd 	.word	0x080006bd
 8000200:	2000015c 	.word	0x2000015c

08000204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b094      	sub	sp, #80	@ 0x50
 8000208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800020e:	2228      	movs	r2, #40	@ 0x28
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f005 fc7a 	bl	8005b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000218:	f107 0314 	add.w	r3, r7, #20
 800021c:	2200      	movs	r2, #0
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	605a      	str	r2, [r3, #4]
 8000222:	609a      	str	r2, [r3, #8]
 8000224:	60da      	str	r2, [r3, #12]
 8000226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000228:	1d3b      	adds	r3, r7, #4
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000234:	2301      	movs	r3, #1
 8000236:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000238:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800023c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000242:	2301      	movs	r3, #1
 8000244:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800024a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800024e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000250:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000254:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000256:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800025a:	4618      	mov	r0, r3
 800025c:	f001 fccc 	bl	8001bf8 <HAL_RCC_OscConfig>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d001      	beq.n	800026a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000266:	f000 fa5d 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026a:	230f      	movs	r3, #15
 800026c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026e:	2302      	movs	r3, #2
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800027a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	2102      	movs	r1, #2
 8000286:	4618      	mov	r0, r3
 8000288:	f001 ff38 	bl	80020fc <HAL_RCC_ClockConfig>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000292:	f000 fa47 	bl	8000724 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000296:	2302      	movs	r3, #2
 8000298:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800029a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800029e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 f8e8 	bl	8002478 <HAL_RCCEx_PeriphCLKConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002ae:	f000 fa39 	bl	8000724 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3750      	adds	r7, #80	@ 0x50
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
	...

080002bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c2:	1d3b      	adds	r3, r7, #4
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]
 80002c8:	605a      	str	r2, [r3, #4]
 80002ca:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002cc:	4b18      	ldr	r3, [pc, #96]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002ce:	4a19      	ldr	r2, [pc, #100]	@ (8000334 <MX_ADC1_Init+0x78>)
 80002d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d2:	4b17      	ldr	r3, [pc, #92]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002d8:	4b15      	ldr	r3, [pc, #84]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002da:	2200      	movs	r2, #0
 80002dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002de:	4b14      	ldr	r3, [pc, #80]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e4:	4b12      	ldr	r3, [pc, #72]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002e6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ec:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002f8:	480d      	ldr	r0, [pc, #52]	@ (8000330 <MX_ADC1_Init+0x74>)
 80002fa:	f000 fc4d 	bl	8000b98 <HAL_ADC_Init>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000304:	f000 fa0e 	bl	8000724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000308:	2300      	movs	r3, #0
 800030a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800030c:	2301      	movs	r3, #1
 800030e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000310:	2303      	movs	r3, #3
 8000312:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000314:	1d3b      	adds	r3, r7, #4
 8000316:	4619      	mov	r1, r3
 8000318:	4805      	ldr	r0, [pc, #20]	@ (8000330 <MX_ADC1_Init+0x74>)
 800031a:	f000 ff01 	bl	8001120 <HAL_ADC_ConfigChannel>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000324:	f000 f9fe 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000328:	bf00      	nop
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20000080 	.word	0x20000080
 8000334:	40012400 	.word	0x40012400

08000338 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800033c:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <MX_I2C1_Init+0x50>)
 800033e:	4a13      	ldr	r2, [pc, #76]	@ (800038c <MX_I2C1_Init+0x54>)
 8000340:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000342:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_I2C1_Init+0x50>)
 8000344:	4a12      	ldr	r2, [pc, #72]	@ (8000390 <MX_I2C1_Init+0x58>)
 8000346:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <MX_I2C1_Init+0x50>)
 800034a:	2200      	movs	r2, #0
 800034c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800034e:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <MX_I2C1_Init+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000354:	4b0c      	ldr	r3, [pc, #48]	@ (8000388 <MX_I2C1_Init+0x50>)
 8000356:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800035a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800035c:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <MX_I2C1_Init+0x50>)
 800035e:	2200      	movs	r2, #0
 8000360:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000362:	4b09      	ldr	r3, [pc, #36]	@ (8000388 <MX_I2C1_Init+0x50>)
 8000364:	2200      	movs	r2, #0
 8000366:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000368:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <MX_I2C1_Init+0x50>)
 800036a:	2200      	movs	r2, #0
 800036c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800036e:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <MX_I2C1_Init+0x50>)
 8000370:	2200      	movs	r2, #0
 8000372:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000374:	4804      	ldr	r0, [pc, #16]	@ (8000388 <MX_I2C1_Init+0x50>)
 8000376:	f001 fafb 	bl	8001970 <HAL_I2C_Init>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000380:	f000 f9d0 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	200000b0 	.word	0x200000b0
 800038c:	40005400 	.word	0x40005400
 8000390:	00061a80 	.word	0x00061a80

08000394 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000398:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 800039a:	4a12      	ldr	r2, [pc, #72]	@ (80003e4 <MX_USART1_UART_Init+0x50>)
 800039c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800039e:	4b10      	ldr	r3, [pc, #64]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003b8:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003ba:	220c      	movs	r2, #12
 80003bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003be:	4b08      	ldr	r3, [pc, #32]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	@ (80003e0 <MX_USART1_UART_Init+0x4c>)
 80003cc:	f002 fc0a 	bl	8002be4 <HAL_UART_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003d6:	f000 f9a5 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000104 	.word	0x20000104
 80003e4:	40013800 	.word	0x40013800

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0310 	add.w	r3, r7, #16
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003fc:	4b34      	ldr	r3, [pc, #208]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 80003fe:	699b      	ldr	r3, [r3, #24]
 8000400:	4a33      	ldr	r2, [pc, #204]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 8000402:	f043 0310 	orr.w	r3, r3, #16
 8000406:	6193      	str	r3, [r2, #24]
 8000408:	4b31      	ldr	r3, [pc, #196]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 800040a:	699b      	ldr	r3, [r3, #24]
 800040c:	f003 0310 	and.w	r3, r3, #16
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000414:	4b2e      	ldr	r3, [pc, #184]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 8000416:	699b      	ldr	r3, [r3, #24]
 8000418:	4a2d      	ldr	r2, [pc, #180]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	6193      	str	r3, [r2, #24]
 8000420:	4b2b      	ldr	r3, [pc, #172]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	f003 0320 	and.w	r3, r3, #32
 8000428:	60bb      	str	r3, [r7, #8]
 800042a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042c:	4b28      	ldr	r3, [pc, #160]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	4a27      	ldr	r2, [pc, #156]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 8000432:	f043 0304 	orr.w	r3, r3, #4
 8000436:	6193      	str	r3, [r2, #24]
 8000438:	4b25      	ldr	r3, [pc, #148]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f003 0304 	and.w	r3, r3, #4
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000444:	4b22      	ldr	r3, [pc, #136]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a21      	ldr	r2, [pc, #132]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b1f      	ldr	r3, [pc, #124]	@ (80004d0 <MX_GPIO_Init+0xe8>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0308 	and.w	r3, r3, #8
 8000458:	603b      	str	r3, [r7, #0]
 800045a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000462:	481c      	ldr	r0, [pc, #112]	@ (80004d4 <MX_GPIO_Init+0xec>)
 8000464:	f001 fa6b 	bl	800193e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2120      	movs	r1, #32
 800046c:	481a      	ldr	r0, [pc, #104]	@ (80004d8 <MX_GPIO_Init+0xf0>)
 800046e:	f001 fa66 	bl	800193e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8000472:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000480:	2302      	movs	r3, #2
 8000482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	4812      	ldr	r0, [pc, #72]	@ (80004d4 <MX_GPIO_Init+0xec>)
 800048c:	f001 f8bc 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000490:	2320      	movs	r3, #32
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000494:	2301      	movs	r3, #1
 8000496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	2302      	movs	r3, #2
 800049e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	480c      	ldr	r0, [pc, #48]	@ (80004d8 <MX_GPIO_Init+0xf0>)
 80004a8:	f001 f8ae 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button2_Pin */
  GPIO_InitStruct.Pin = Button2_Pin;
 80004ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80004b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 80004ba:	f107 0310 	add.w	r3, r7, #16
 80004be:	4619      	mov	r1, r3
 80004c0:	4806      	ldr	r0, [pc, #24]	@ (80004dc <MX_GPIO_Init+0xf4>)
 80004c2:	f001 f8a1 	bl	8001608 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004c6:	bf00      	nop
 80004c8:	3720      	adds	r7, #32
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40011000 	.word	0x40011000
 80004d8:	40010800 	.word	0x40010800
 80004dc:	40010c00 	.word	0x40010c00

080004e0 <Menu_Display>:

/* USER CODE BEGIN 4 */
void Menu_Display(void)
{
 80004e0:	b5b0      	push	{r4, r5, r7, lr}
 80004e2:	b08e      	sub	sp, #56	@ 0x38
 80004e4:	af00      	add	r7, sp, #0
	uint8_t menu_1[] = "\r\n1. Voltage monitor read\r\n";
 80004e6:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <Menu_Display+0x58>)
 80004e8:	f107 041c 	add.w	r4, r7, #28
 80004ec:	461d      	mov	r5, r3
 80004ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	uint8_t menu_2[] = "2. Re-display Menu\r\n\r\n";
 80004fa:	4b10      	ldr	r3, [pc, #64]	@ (800053c <Menu_Display+0x5c>)
 80004fc:	1d3c      	adds	r4, r7, #4
 80004fe:	461d      	mov	r5, r3
 8000500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000504:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000508:	6020      	str	r0, [r4, #0]
 800050a:	3404      	adds	r4, #4
 800050c:	8021      	strh	r1, [r4, #0]
 800050e:	3402      	adds	r4, #2
 8000510:	0c0b      	lsrs	r3, r1, #16
 8000512:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit(&huart1, menu_1, sizeof(menu_1), 10);
 8000514:	f107 011c 	add.w	r1, r7, #28
 8000518:	230a      	movs	r3, #10
 800051a:	221c      	movs	r2, #28
 800051c:	4808      	ldr	r0, [pc, #32]	@ (8000540 <Menu_Display+0x60>)
 800051e:	f002 fbb1 	bl	8002c84 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, menu_2, sizeof(menu_2), 10);
 8000522:	1d39      	adds	r1, r7, #4
 8000524:	230a      	movs	r3, #10
 8000526:	2217      	movs	r2, #23
 8000528:	4805      	ldr	r0, [pc, #20]	@ (8000540 <Menu_Display+0x60>)
 800052a:	f002 fbab 	bl	8002c84 <HAL_UART_Transmit>

}
 800052e:	bf00      	nop
 8000530:	3738      	adds	r7, #56	@ 0x38
 8000532:	46bd      	mov	sp, r7
 8000534:	bdb0      	pop	{r4, r5, r7, pc}
 8000536:	bf00      	nop
 8000538:	08006488 	.word	0x08006488
 800053c:	080064a4 	.word	0x080064a4
 8000540:	20000104 	.word	0x20000104

08000544 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800054c:	2001      	movs	r0, #1
 800054e:	f002 febb 	bl	80032c8 <osDelay>
 8000552:	e7fb      	b.n	800054c <StartDefaultTask+0x8>

08000554 <pickButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pickButton */
void pickButton(void *argument)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pickButton */
  /* Infinite loop */
	for(;;)
	  {

		  if(HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin) == GPIO_PIN_RESET)
 800055c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000560:	480d      	ldr	r0, [pc, #52]	@ (8000598 <pickButton+0x44>)
 8000562:	f001 f9d5 	bl	8001910 <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d10a      	bne.n	8000582 <pickButton+0x2e>
		  {
			  osDelay(300);	// debounce
 800056c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000570:	f002 feaa 	bl	80032c8 <osDelay>
			  button2_pressed = 1;
 8000574:	4b09      	ldr	r3, [pc, #36]	@ (800059c <pickButton+0x48>)
 8000576:	2201      	movs	r2, #1
 8000578:	601a      	str	r2, [r3, #0]
			  led_state = 1;
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <pickButton+0x4c>)
 800057c:	2201      	movs	r2, #1
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	e005      	b.n	800058e <pickButton+0x3a>
		  }
		  else
		  {
			  button2_pressed = 0;
 8000582:	4b06      	ldr	r3, [pc, #24]	@ (800059c <pickButton+0x48>)
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
			  led_state = 0;
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <pickButton+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
		  }
	    osDelay(100);
 800058e:	2064      	movs	r0, #100	@ 0x64
 8000590:	f002 fe9a 	bl	80032c8 <osDelay>
		  if(HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin) == GPIO_PIN_RESET)
 8000594:	e7e2      	b.n	800055c <pickButton+0x8>
 8000596:	bf00      	nop
 8000598:	40010c00 	.word	0x40010c00
 800059c:	2000019c 	.word	0x2000019c
 80005a0:	200001a0 	.word	0x200001a0

080005a4 <getADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_getADC */
void getADC(void *argument)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN getADC */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 80005ac:	480a      	ldr	r0, [pc, #40]	@ (80005d8 <getADC+0x34>)
 80005ae:	f000 fbcb 	bl	8000d48 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 10);
 80005b2:	210a      	movs	r1, #10
 80005b4:	4808      	ldr	r0, [pc, #32]	@ (80005d8 <getADC+0x34>)
 80005b6:	f000 fca1 	bl	8000efc <HAL_ADC_PollForConversion>
	  x_val = (HAL_ADC_GetValue(&hadc1));
 80005ba:	4807      	ldr	r0, [pc, #28]	@ (80005d8 <getADC+0x34>)
 80005bc:	f000 fda4 	bl	8001108 <HAL_ADC_GetValue>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <getADC+0x38>)
 80005c4:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 80005c6:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <getADC+0x34>)
 80005c8:	f000 fc6c 	bl	8000ea4 <HAL_ADC_Stop>

	  // process ADC values here
	  osDelay(100);
 80005cc:	2064      	movs	r0, #100	@ 0x64
 80005ce:	f002 fe7b 	bl	80032c8 <osDelay>
	  HAL_ADC_Start(&hadc1);
 80005d2:	bf00      	nop
 80005d4:	e7ea      	b.n	80005ac <getADC+0x8>
 80005d6:	bf00      	nop
 80005d8:	20000080 	.word	0x20000080
 80005dc:	20000160 	.word	0x20000160

080005e0 <dispUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispUART */
void dispUART(void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN dispUART */
	Menu_Display();
 80005e8:	f7ff ff7a 	bl	80004e0 <Menu_Display>
  /* Infinite loop */
  for(;;)
  {
	  // select user input
	  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 80005ec:	230a      	movs	r3, #10
 80005ee:	2201      	movs	r2, #1
 80005f0:	4926      	ldr	r1, [pc, #152]	@ (800068c <dispUART+0xac>)
 80005f2:	4827      	ldr	r0, [pc, #156]	@ (8000690 <dispUART+0xb0>)
 80005f4:	f002 fbc9 	bl	8002d8a <HAL_UART_Receive>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d117      	bne.n	800062e <dispUART+0x4e>
	  {
		  switch (choice) {
 80005fe:	4b23      	ldr	r3, [pc, #140]	@ (800068c <dispUART+0xac>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b31      	cmp	r3, #49	@ 0x31
 8000604:	d002      	beq.n	800060c <dispUART+0x2c>
 8000606:	2b32      	cmp	r3, #50	@ 0x32
 8000608:	d00e      	beq.n	8000628 <dispUART+0x48>
			  break;
		  case '2':
			  Menu_Display();
			  break;
	  	  default:
	  		  break;
 800060a:	e010      	b.n	800062e <dispUART+0x4e>
			  sprintf(buffer, "Voltage = %lu\r\n",x_val);
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <dispUART+0xb4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4921      	ldr	r1, [pc, #132]	@ (8000698 <dispUART+0xb8>)
 8000614:	4821      	ldr	r0, [pc, #132]	@ (800069c <dispUART+0xbc>)
 8000616:	f005 fa59 	bl	8005acc <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sizeof(buffer), 10);
 800061a:	230a      	movs	r3, #10
 800061c:	2232      	movs	r2, #50	@ 0x32
 800061e:	491f      	ldr	r1, [pc, #124]	@ (800069c <dispUART+0xbc>)
 8000620:	481b      	ldr	r0, [pc, #108]	@ (8000690 <dispUART+0xb0>)
 8000622:	f002 fb2f 	bl	8002c84 <HAL_UART_Transmit>
			  break;
 8000626:	e002      	b.n	800062e <dispUART+0x4e>
			  Menu_Display();
 8000628:	f7ff ff5a 	bl	80004e0 <Menu_Display>
			  break;
 800062c:	bf00      	nop
		  }
	  	}

	  	if(button2_pressed)
 800062e:	4b1c      	ldr	r3, [pc, #112]	@ (80006a0 <dispUART+0xc0>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d009      	beq.n	800064a <dispUART+0x6a>
	  	{
	  		HAL_UART_Transmit(&huart1, (uint8_t*)"Button1 pressed\r\n", sizeof("Button1 pressed\r\n"), 10);
 8000636:	230a      	movs	r3, #10
 8000638:	2212      	movs	r2, #18
 800063a:	491a      	ldr	r1, [pc, #104]	@ (80006a4 <dispUART+0xc4>)
 800063c:	4814      	ldr	r0, [pc, #80]	@ (8000690 <dispUART+0xb0>)
 800063e:	f002 fb21 	bl	8002c84 <HAL_UART_Transmit>
	  		button2_pressed = 0;
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <dispUART+0xc0>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	e005      	b.n	8000656 <dispUART+0x76>
	  	} else{
            HAL_UART_Transmit(&huart1, (uint8_t*)"Button1 not pressed\r\n", sizeof("Button1 not pressed\r\n"), 10);
 800064a:	230a      	movs	r3, #10
 800064c:	2216      	movs	r2, #22
 800064e:	4916      	ldr	r1, [pc, #88]	@ (80006a8 <dispUART+0xc8>)
 8000650:	480f      	ldr	r0, [pc, #60]	@ (8000690 <dispUART+0xb0>)
 8000652:	f002 fb17 	bl	8002c84 <HAL_UART_Transmit>
        }
        prev_button2_state = button2_pressed;
 8000656:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <dispUART+0xc0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <dispUART+0xcc>)
 800065c:	6013      	str	r3, [r2, #0]

        if(led_state)
 800065e:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <dispUART+0xd0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d006      	beq.n	8000674 <dispUART+0x94>
	  	{
	  		HAL_UART_Transmit(&huart1, (uint8_t*)"LED ON\r\n", sizeof("LED ON\r\n"), 10);
 8000666:	230a      	movs	r3, #10
 8000668:	2209      	movs	r2, #9
 800066a:	4912      	ldr	r1, [pc, #72]	@ (80006b4 <dispUART+0xd4>)
 800066c:	4808      	ldr	r0, [pc, #32]	@ (8000690 <dispUART+0xb0>)
 800066e:	f002 fb09 	bl	8002c84 <HAL_UART_Transmit>
 8000672:	e005      	b.n	8000680 <dispUART+0xa0>
	  	} else{
	  		HAL_UART_Transmit(&huart1, (uint8_t*)"LED OFF\r\n", sizeof("LED OFF\r\n"), 10);
 8000674:	230a      	movs	r3, #10
 8000676:	220a      	movs	r2, #10
 8000678:	490f      	ldr	r1, [pc, #60]	@ (80006b8 <dispUART+0xd8>)
 800067a:	4805      	ldr	r0, [pc, #20]	@ (8000690 <dispUART+0xb0>)
 800067c:	f002 fb02 	bl	8002c84 <HAL_UART_Transmit>
	  	}

	 osDelay(1000);
 8000680:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000684:	f002 fe20 	bl	80032c8 <osDelay>
	  if (HAL_UART_Receive(&huart1, &choice, sizeof(choice), 10) == HAL_OK)
 8000688:	e7b0      	b.n	80005ec <dispUART+0xc>
 800068a:	bf00      	nop
 800068c:	20000164 	.word	0x20000164
 8000690:	20000104 	.word	0x20000104
 8000694:	20000160 	.word	0x20000160
 8000698:	080064bc 	.word	0x080064bc
 800069c:	20000168 	.word	0x20000168
 80006a0:	2000019c 	.word	0x2000019c
 80006a4:	080064cc 	.word	0x080064cc
 80006a8:	080064e0 	.word	0x080064e0
 80006ac:	200001a4 	.word	0x200001a4
 80006b0:	200001a0 	.word	0x200001a0
 80006b4:	080064f8 	.word	0x080064f8
 80006b8:	08006504 	.word	0x08006504

080006bc <dispLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_dispLED */
void dispLED(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	static uint8_t prev_led_state = 0xFF; // Initialize with an invalid state

	for(;;)
	{
		 // Check if button2 is pressed
		      if (button2_pressed) {
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <dispLED+0x38>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d005      	beq.n	80006d8 <dispLED+0x1c>
		          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // LED ON
 80006cc:	2201      	movs	r2, #1
 80006ce:	2120      	movs	r1, #32
 80006d0:	4809      	ldr	r0, [pc, #36]	@ (80006f8 <dispLED+0x3c>)
 80006d2:	f001 f934 	bl	800193e <HAL_GPIO_WritePin>
 80006d6:	e004      	b.n	80006e2 <dispLED+0x26>
		      } else {
		          HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // LED OFF
 80006d8:	2200      	movs	r2, #0
 80006da:	2120      	movs	r1, #32
 80006dc:	4806      	ldr	r0, [pc, #24]	@ (80006f8 <dispLED+0x3c>)
 80006de:	f001 f92e 	bl	800193e <HAL_GPIO_WritePin>
		      }

		      // Update the previous state for LED
		      prev_led_state = button2_pressed;
 80006e2:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <dispLED+0x38>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	4b04      	ldr	r3, [pc, #16]	@ (80006fc <dispLED+0x40>)
 80006ea:	701a      	strb	r2, [r3, #0]
	    osDelay(100);
 80006ec:	2064      	movs	r0, #100	@ 0x64
 80006ee:	f002 fdeb 	bl	80032c8 <osDelay>
		      if (button2_pressed) {
 80006f2:	e7e7      	b.n	80006c4 <dispLED+0x8>
 80006f4:	2000019c 	.word	0x2000019c
 80006f8:	40010800 	.word	0x40010800
 80006fc:	20000000 	.word	0x20000000

08000700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d101      	bne.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000712:	f000 fa25 	bl	8000b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40000800 	.word	0x40000800

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <Error_Handler+0x8>

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_MspInit+0x68>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a17      	ldr	r2, [pc, #92]	@ (8000798 <HAL_MspInit+0x68>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <HAL_MspInit+0x68>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <HAL_MspInit+0x68>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a11      	ldr	r2, [pc, #68]	@ (8000798 <HAL_MspInit+0x68>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <HAL_MspInit+0x68>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	210f      	movs	r1, #15
 800076a:	f06f 0001 	mvn.w	r0, #1
 800076e:	f000 ff20 	bl	80015b2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000772:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <HAL_MspInit+0x6c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	4a04      	ldr	r2, [pc, #16]	@ (800079c <HAL_MspInit+0x6c>)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40021000 	.word	0x40021000
 800079c:	40010000 	.word	0x40010000

080007a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b088      	sub	sp, #32
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a14      	ldr	r2, [pc, #80]	@ (800080c <HAL_ADC_MspInit+0x6c>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d121      	bne.n	8000804 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007c0:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <HAL_ADC_MspInit+0x70>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a12      	ldr	r2, [pc, #72]	@ (8000810 <HAL_ADC_MspInit+0x70>)
 80007c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <HAL_ADC_MspInit+0x70>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <HAL_ADC_MspInit+0x70>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	4a0c      	ldr	r2, [pc, #48]	@ (8000810 <HAL_ADC_MspInit+0x70>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	6193      	str	r3, [r2, #24]
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <HAL_ADC_MspInit+0x70>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	f003 0304 	and.w	r3, r3, #4
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007f0:	2301      	movs	r3, #1
 80007f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f4:	2303      	movs	r3, #3
 80007f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	4619      	mov	r1, r3
 80007fe:	4805      	ldr	r0, [pc, #20]	@ (8000814 <HAL_ADC_MspInit+0x74>)
 8000800:	f000 ff02 	bl	8001608 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40012400 	.word	0x40012400
 8000810:	40021000 	.word	0x40021000
 8000814:	40010800 	.word	0x40010800

08000818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b088      	sub	sp, #32
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a15      	ldr	r2, [pc, #84]	@ (8000888 <HAL_I2C_MspInit+0x70>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d123      	bne.n	8000880 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <HAL_I2C_MspInit+0x74>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	4a13      	ldr	r2, [pc, #76]	@ (800088c <HAL_I2C_MspInit+0x74>)
 800083e:	f043 0308 	orr.w	r3, r3, #8
 8000842:	6193      	str	r3, [r2, #24]
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <HAL_I2C_MspInit+0x74>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0308 	and.w	r3, r3, #8
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000850:	23c0      	movs	r3, #192	@ 0xc0
 8000852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000854:	2312      	movs	r3, #18
 8000856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	4619      	mov	r1, r3
 8000862:	480b      	ldr	r0, [pc, #44]	@ (8000890 <HAL_I2C_MspInit+0x78>)
 8000864:	f000 fed0 	bl	8001608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_I2C_MspInit+0x74>)
 800086a:	69db      	ldr	r3, [r3, #28]
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <HAL_I2C_MspInit+0x74>)
 800086e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000872:	61d3      	str	r3, [r2, #28]
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <HAL_I2C_MspInit+0x74>)
 8000876:	69db      	ldr	r3, [r3, #28]
 8000878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40005400 	.word	0x40005400
 800088c:	40021000 	.word	0x40021000
 8000890:	40010c00 	.word	0x40010c00

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000920 <HAL_UART_MspInit+0x8c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d131      	bne.n	8000918 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <HAL_UART_MspInit+0x90>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000924 <HAL_UART_MspInit+0x90>)
 80008ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_UART_MspInit+0x90>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <HAL_UART_MspInit+0x90>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a14      	ldr	r2, [pc, #80]	@ (8000924 <HAL_UART_MspInit+0x90>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b12      	ldr	r3, [pc, #72]	@ (8000924 <HAL_UART_MspInit+0x90>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4619      	mov	r1, r3
 80008f8:	480b      	ldr	r0, [pc, #44]	@ (8000928 <HAL_UART_MspInit+0x94>)
 80008fa:	f000 fe85 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000902:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0310 	add.w	r3, r7, #16
 8000910:	4619      	mov	r1, r3
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_UART_MspInit+0x94>)
 8000914:	f000 fe78 	bl	8001608 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000918:	bf00      	nop
 800091a:	3720      	adds	r7, #32
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40013800 	.word	0x40013800
 8000924:	40021000 	.word	0x40021000
 8000928:	40010800 	.word	0x40010800

0800092c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800093c:	2300      	movs	r3, #0
 800093e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000942:	4b34      	ldr	r3, [pc, #208]	@ (8000a14 <HAL_InitTick+0xe8>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a33      	ldr	r2, [pc, #204]	@ (8000a14 <HAL_InitTick+0xe8>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b31      	ldr	r3, [pc, #196]	@ (8000a14 <HAL_InitTick+0xe8>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800095a:	f107 0210 	add.w	r2, r7, #16
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f001 fd39 	bl	80023dc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800096e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000970:	2b00      	cmp	r3, #0
 8000972:	d103      	bne.n	800097c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000974:	f001 fd0a 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 8000978:	6378      	str	r0, [r7, #52]	@ 0x34
 800097a:	e004      	b.n	8000986 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800097c:	f001 fd06 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 8000980:	4603      	mov	r3, r0
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000988:	4a23      	ldr	r2, [pc, #140]	@ (8000a18 <HAL_InitTick+0xec>)
 800098a:	fba2 2303 	umull	r2, r3, r2, r3
 800098e:	0c9b      	lsrs	r3, r3, #18
 8000990:	3b01      	subs	r3, #1
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000994:	4b21      	ldr	r3, [pc, #132]	@ (8000a1c <HAL_InitTick+0xf0>)
 8000996:	4a22      	ldr	r2, [pc, #136]	@ (8000a20 <HAL_InitTick+0xf4>)
 8000998:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800099a:	4b20      	ldr	r3, [pc, #128]	@ (8000a1c <HAL_InitTick+0xf0>)
 800099c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80009a0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80009a2:	4a1e      	ldr	r2, [pc, #120]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80009a8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b19      	ldr	r3, [pc, #100]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80009ba:	4818      	ldr	r0, [pc, #96]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009bc:	f001 fec8 	bl	8002750 <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d11b      	bne.n	8000a06 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80009ce:	4813      	ldr	r0, [pc, #76]	@ (8000a1c <HAL_InitTick+0xf0>)
 80009d0:	f001 ff16 	bl	8002800 <HAL_TIM_Base_Start_IT>
 80009d4:	4603      	mov	r3, r0
 80009d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d111      	bne.n	8000a06 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80009e2:	201e      	movs	r0, #30
 80009e4:	f000 fe01 	bl	80015ea <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	2b0f      	cmp	r3, #15
 80009ec:	d808      	bhi.n	8000a00 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80009ee:	2200      	movs	r2, #0
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	201e      	movs	r0, #30
 80009f4:	f000 fddd 	bl	80015b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <HAL_InitTick+0xf8>)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6013      	str	r3, [r2, #0]
 80009fe:	e002      	b.n	8000a06 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3738      	adds	r7, #56	@ 0x38
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000
 8000a18:	431bde83 	.word	0x431bde83
 8000a1c:	200001a8 	.word	0x200001a8
 8000a20:	40000800 	.word	0x40000800
 8000a24:	20000008 	.word	0x20000008

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <NMI_Handler+0x4>

08000a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <MemManage_Handler+0x4>

08000a40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <TIM4_IRQHandler+0x10>)
 8000a62:	f001 ff1f 	bl	80028a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200001a8 	.word	0x200001a8

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a78:	4a14      	ldr	r2, [pc, #80]	@ (8000acc <_sbrk+0x5c>)
 8000a7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <_sbrk+0x60>)
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <_sbrk+0x64>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d102      	bne.n	8000a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <_sbrk+0x64>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <_sbrk+0x68>)
 8000a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d207      	bcs.n	8000ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000aa0:	f005 f83c 	bl	8005b1c <__errno>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000aae:	e009      	b.n	8000ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ab0:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab6:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	4a05      	ldr	r2, [pc, #20]	@ (8000ad4 <_sbrk+0x64>)
 8000ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3718      	adds	r7, #24
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20005000 	.word	0x20005000
 8000ad0:	00000400 	.word	0x00000400
 8000ad4:	200001f0 	.word	0x200001f0
 8000ad8:	20001e98 	.word	0x20001e98

08000adc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ae8:	f7ff fff8 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aee:	490c      	ldr	r1, [pc, #48]	@ (8000b20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000af0:	4a0c      	ldr	r2, [pc, #48]	@ (8000b24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af4:	e002      	b.n	8000afc <LoopCopyDataInit>

08000af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afa:	3304      	adds	r3, #4

08000afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b00:	d3f9      	bcc.n	8000af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b04:	4c09      	ldr	r4, [pc, #36]	@ (8000b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b08:	e001      	b.n	8000b0e <LoopFillZerobss>

08000b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b0c:	3204      	adds	r2, #4

08000b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b10:	d3fb      	bcc.n	8000b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b12:	f005 f809 	bl	8005b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b16:	f7ff fb1b 	bl	8000150 <main>
  bx lr
 8000b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b20:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000b24:	08006658 	.word	0x08006658
  ldr r2, =_sbss
 8000b28:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000b2c:	20001e98 	.word	0x20001e98

08000b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b30:	e7fe      	b.n	8000b30 <ADC1_2_IRQHandler>
	...

08000b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_Init+0x28>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_Init+0x28>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 fd29 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feee 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fdee 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40022000 	.word	0x40022000

08000b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <HAL_IncTick+0x1c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a03      	ldr	r2, [pc, #12]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr
 8000b7c:	2000000c 	.word	0x2000000c
 8000b80:	200001f4 	.word	0x200001f4

08000b84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return uwTick;
 8000b88:	4b02      	ldr	r3, [pc, #8]	@ (8000b94 <HAL_GetTick+0x10>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	200001f4 	.word	0x200001f4

08000b98 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e0be      	b.n	8000d38 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d109      	bne.n	8000bdc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff fde2 	bl	80007a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 fbf1 	bl	80013c4 <ADC_ConversionStop_Disable>
 8000be2:	4603      	mov	r3, r0
 8000be4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bea:	f003 0310 	and.w	r3, r3, #16
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f040 8099 	bne.w	8000d26 <HAL_ADC_Init+0x18e>
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8095 	bne.w	8000d26 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c00:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000c04:	f023 0302 	bic.w	r3, r3, #2
 8000c08:	f043 0202 	orr.w	r2, r3, #2
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c18:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7b1b      	ldrb	r3, [r3, #12]
 8000c1e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c20:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000c30:	d003      	beq.n	8000c3a <HAL_ADC_Init+0xa2>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d102      	bne.n	8000c40 <HAL_ADC_Init+0xa8>
 8000c3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c3e:	e000      	b.n	8000c42 <HAL_ADC_Init+0xaa>
 8000c40:	2300      	movs	r3, #0
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	7d1b      	ldrb	r3, [r3, #20]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d119      	bne.n	8000c84 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	7b1b      	ldrb	r3, [r3, #12]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d109      	bne.n	8000c6c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	3b01      	subs	r3, #1
 8000c5e:	035a      	lsls	r2, r3, #13
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	e00b      	b.n	8000c84 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c70:	f043 0220 	orr.w	r2, r3, #32
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c7c:	f043 0201 	orr.w	r2, r3, #1
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	430a      	orrs	r2, r1
 8000c96:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <HAL_ADC_Init+0x1a8>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	68b9      	ldr	r1, [r7, #8]
 8000ca8:	430b      	orrs	r3, r1
 8000caa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000cb4:	d003      	beq.n	8000cbe <HAL_ADC_Init+0x126>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d104      	bne.n	8000cc8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	051b      	lsls	r3, r3, #20
 8000cc6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cce:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <HAL_ADC_Init+0x1ac>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d10b      	bne.n	8000d04 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cf6:	f023 0303 	bic.w	r3, r3, #3
 8000cfa:	f043 0201 	orr.w	r2, r3, #1
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d02:	e018      	b.n	8000d36 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d08:	f023 0312 	bic.w	r3, r3, #18
 8000d0c:	f043 0210 	orr.w	r2, r3, #16
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d18:	f043 0201 	orr.w	r2, r3, #1
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d24:	e007      	b.n	8000d36 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d2a:	f043 0210 	orr.w	r2, r3, #16
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	ffe1f7fd 	.word	0xffe1f7fd
 8000d44:	ff1f0efe 	.word	0xff1f0efe

08000d48 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d101      	bne.n	8000d62 <HAL_ADC_Start+0x1a>
 8000d5e:	2302      	movs	r3, #2
 8000d60:	e098      	b.n	8000e94 <HAL_ADC_Start+0x14c>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2201      	movs	r2, #1
 8000d66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 fad0 	bl	8001310 <ADC_Enable>
 8000d70:	4603      	mov	r3, r0
 8000d72:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f040 8087 	bne.w	8000e8a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000d84:	f023 0301 	bic.w	r3, r3, #1
 8000d88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a41      	ldr	r2, [pc, #260]	@ (8000e9c <HAL_ADC_Start+0x154>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d105      	bne.n	8000da6 <HAL_ADC_Start+0x5e>
 8000d9a:	4b41      	ldr	r3, [pc, #260]	@ (8000ea0 <HAL_ADC_Start+0x158>)
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d115      	bne.n	8000dd2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000daa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d026      	beq.n	8000e0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000dc8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dd0:	e01d      	b.n	8000e0e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dd6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a2f      	ldr	r2, [pc, #188]	@ (8000ea0 <HAL_ADC_Start+0x158>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d004      	beq.n	8000df2 <HAL_ADC_Start+0xaa>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a2b      	ldr	r2, [pc, #172]	@ (8000e9c <HAL_ADC_Start+0x154>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10d      	bne.n	8000e0e <HAL_ADC_Start+0xc6>
 8000df2:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea0 <HAL_ADC_Start+0x158>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d007      	beq.n	8000e0e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e02:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e06:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e1e:	f023 0206 	bic.w	r2, r3, #6
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e26:	e002      	b.n	8000e2e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f06f 0202 	mvn.w	r2, #2
 8000e3e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000e4a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000e4e:	d113      	bne.n	8000e78 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e54:	4a11      	ldr	r2, [pc, #68]	@ (8000e9c <HAL_ADC_Start+0x154>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d105      	bne.n	8000e66 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <HAL_ADC_Start+0x158>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d108      	bne.n	8000e78 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	689a      	ldr	r2, [r3, #8]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	e00c      	b.n	8000e92 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	e003      	b.n	8000e92 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40012800 	.word	0x40012800
 8000ea0:	40012400 	.word	0x40012400

08000ea4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d101      	bne.n	8000ebe <HAL_ADC_Stop+0x1a>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e01a      	b.n	8000ef4 <HAL_ADC_Stop+0x50>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 fa7c 	bl	80013c4 <ADC_ConversionStop_Disable>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d109      	bne.n	8000eea <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eda:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ede:	f023 0301 	bic.w	r3, r3, #1
 8000ee2:	f043 0201 	orr.w	r2, r3, #1
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f12:	f7ff fe37 	bl	8000b84 <HAL_GetTick>
 8000f16:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00b      	beq.n	8000f3e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2a:	f043 0220 	orr.w	r2, r3, #32
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0d3      	b.n	80010e6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d131      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f52:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d12a      	bne.n	8000fb0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f5a:	e021      	b.n	8000fa0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f62:	d01d      	beq.n	8000fa0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d007      	beq.n	8000f7a <HAL_ADC_PollForConversion+0x7e>
 8000f6a:	f7ff fe0b 	bl	8000b84 <HAL_GetTick>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	683a      	ldr	r2, [r7, #0]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d212      	bcs.n	8000fa0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10b      	bne.n	8000fa0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8c:	f043 0204 	orr.w	r2, r3, #4
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	e0a2      	b.n	80010e6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0d6      	beq.n	8000f5c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fae:	e070      	b.n	8001092 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80010f0 <HAL_ADC_PollForConversion+0x1f4>)
 8000fb2:	681c      	ldr	r4, [r3, #0]
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f001 fb15 	bl	80025e4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6919      	ldr	r1, [r3, #16]
 8000fc6:	4b4b      	ldr	r3, [pc, #300]	@ (80010f4 <HAL_ADC_PollForConversion+0x1f8>)
 8000fc8:	400b      	ands	r3, r1
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d118      	bne.n	8001000 <HAL_ADC_PollForConversion+0x104>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68d9      	ldr	r1, [r3, #12]
 8000fd4:	4b48      	ldr	r3, [pc, #288]	@ (80010f8 <HAL_ADC_PollForConversion+0x1fc>)
 8000fd6:	400b      	ands	r3, r1
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d111      	bne.n	8001000 <HAL_ADC_PollForConversion+0x104>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6919      	ldr	r1, [r3, #16]
 8000fe2:	4b46      	ldr	r3, [pc, #280]	@ (80010fc <HAL_ADC_PollForConversion+0x200>)
 8000fe4:	400b      	ands	r3, r1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d108      	bne.n	8000ffc <HAL_ADC_PollForConversion+0x100>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68d9      	ldr	r1, [r3, #12]
 8000ff0:	4b43      	ldr	r3, [pc, #268]	@ (8001100 <HAL_ADC_PollForConversion+0x204>)
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADC_PollForConversion+0x100>
 8000ff8:	2314      	movs	r3, #20
 8000ffa:	e020      	b.n	800103e <HAL_ADC_PollForConversion+0x142>
 8000ffc:	2329      	movs	r3, #41	@ 0x29
 8000ffe:	e01e      	b.n	800103e <HAL_ADC_PollForConversion+0x142>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6919      	ldr	r1, [r3, #16]
 8001006:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <HAL_ADC_PollForConversion+0x200>)
 8001008:	400b      	ands	r3, r1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d106      	bne.n	800101c <HAL_ADC_PollForConversion+0x120>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68d9      	ldr	r1, [r3, #12]
 8001014:	4b3a      	ldr	r3, [pc, #232]	@ (8001100 <HAL_ADC_PollForConversion+0x204>)
 8001016:	400b      	ands	r3, r1
 8001018:	2b00      	cmp	r3, #0
 800101a:	d00d      	beq.n	8001038 <HAL_ADC_PollForConversion+0x13c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6919      	ldr	r1, [r3, #16]
 8001022:	4b38      	ldr	r3, [pc, #224]	@ (8001104 <HAL_ADC_PollForConversion+0x208>)
 8001024:	400b      	ands	r3, r1
 8001026:	2b00      	cmp	r3, #0
 8001028:	d108      	bne.n	800103c <HAL_ADC_PollForConversion+0x140>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68d9      	ldr	r1, [r3, #12]
 8001030:	4b34      	ldr	r3, [pc, #208]	@ (8001104 <HAL_ADC_PollForConversion+0x208>)
 8001032:	400b      	ands	r3, r1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <HAL_ADC_PollForConversion+0x140>
 8001038:	2354      	movs	r3, #84	@ 0x54
 800103a:	e000      	b.n	800103e <HAL_ADC_PollForConversion+0x142>
 800103c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800103e:	fb02 f303 	mul.w	r3, r2, r3
 8001042:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001044:	e021      	b.n	800108a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d01a      	beq.n	8001084 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d007      	beq.n	8001064 <HAL_ADC_PollForConversion+0x168>
 8001054:	f7ff fd96 	bl	8000b84 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d20f      	bcs.n	8001084 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d90b      	bls.n	8001084 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001070:	f043 0204 	orr.w	r2, r3, #4
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e030      	b.n	80010e6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	429a      	cmp	r2, r3
 8001090:	d8d9      	bhi.n	8001046 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f06f 0212 	mvn.w	r2, #18
 800109a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80010b2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80010b6:	d115      	bne.n	80010e4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d111      	bne.n	80010e4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d105      	bne.n	80010e4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010dc:	f043 0201 	orr.w	r2, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	371c      	adds	r7, #28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd90      	pop	{r4, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000004 	.word	0x20000004
 80010f4:	24924924 	.word	0x24924924
 80010f8:	00924924 	.word	0x00924924
 80010fc:	12492492 	.word	0x12492492
 8001100:	00492492 	.word	0x00492492
 8001104:	00249249 	.word	0x00249249

08001108 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr

08001120 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_ADC_ConfigChannel+0x20>
 800113c:	2302      	movs	r3, #2
 800113e:	e0dc      	b.n	80012fa <HAL_ADC_ConfigChannel+0x1da>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b06      	cmp	r3, #6
 800114e:	d81c      	bhi.n	800118a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	4613      	mov	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4413      	add	r3, r2
 8001160:	3b05      	subs	r3, #5
 8001162:	221f      	movs	r2, #31
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	4019      	ands	r1, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	6818      	ldr	r0, [r3, #0]
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	4613      	mov	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	4413      	add	r3, r2
 800117a:	3b05      	subs	r3, #5
 800117c:	fa00 f203 	lsl.w	r2, r0, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	635a      	str	r2, [r3, #52]	@ 0x34
 8001188:	e03c      	b.n	8001204 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	2b0c      	cmp	r3, #12
 8001190:	d81c      	bhi.n	80011cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	3b23      	subs	r3, #35	@ 0x23
 80011a4:	221f      	movs	r2, #31
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43db      	mvns	r3, r3
 80011ac:	4019      	ands	r1, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	4613      	mov	r3, r2
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	3b23      	subs	r3, #35	@ 0x23
 80011be:	fa00 f203 	lsl.w	r2, r0, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	631a      	str	r2, [r3, #48]	@ 0x30
 80011ca:	e01b      	b.n	8001204 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	3b41      	subs	r3, #65	@ 0x41
 80011de:	221f      	movs	r2, #31
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4019      	ands	r1, r3
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	3b41      	subs	r3, #65	@ 0x41
 80011f8:	fa00 f203 	lsl.w	r2, r0, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	430a      	orrs	r2, r1
 8001202:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b09      	cmp	r3, #9
 800120a:	d91c      	bls.n	8001246 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68d9      	ldr	r1, [r3, #12]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4613      	mov	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4413      	add	r3, r2
 800121c:	3b1e      	subs	r3, #30
 800121e:	2207      	movs	r2, #7
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	4019      	ands	r1, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	6898      	ldr	r0, [r3, #8]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	3b1e      	subs	r3, #30
 8001238:	fa00 f203 	lsl.w	r2, r0, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	e019      	b.n	800127a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6919      	ldr	r1, [r3, #16]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	2207      	movs	r2, #7
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43db      	mvns	r3, r3
 800125e:	4019      	ands	r1, r3
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	6898      	ldr	r0, [r3, #8]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4613      	mov	r3, r2
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	4413      	add	r3, r2
 800126e:	fa00 f203 	lsl.w	r2, r0, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	430a      	orrs	r2, r1
 8001278:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b10      	cmp	r3, #16
 8001280:	d003      	beq.n	800128a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001286:	2b11      	cmp	r3, #17
 8001288:	d132      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <HAL_ADC_ConfigChannel+0x1e4>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d125      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d126      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80012b0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b10      	cmp	r3, #16
 80012b8:	d11a      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012ba:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <HAL_ADC_ConfigChannel+0x1e8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a13      	ldr	r2, [pc, #76]	@ (800130c <HAL_ADC_ConfigChannel+0x1ec>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	0c9a      	lsrs	r2, r3, #18
 80012c6:	4613      	mov	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012d0:	e002      	b.n	80012d8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	3b01      	subs	r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1f9      	bne.n	80012d2 <HAL_ADC_ConfigChannel+0x1b2>
 80012de:	e007      	b.n	80012f0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e4:	f043 0220 	orr.w	r2, r3, #32
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3714      	adds	r7, #20
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	40012400 	.word	0x40012400
 8001308:	20000004 	.word	0x20000004
 800130c:	431bde83 	.word	0x431bde83

08001310 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b01      	cmp	r3, #1
 800132c:	d040      	beq.n	80013b0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f042 0201 	orr.w	r2, r2, #1
 800133c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800133e:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <ADC_Enable+0xac>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a1f      	ldr	r2, [pc, #124]	@ (80013c0 <ADC_Enable+0xb0>)
 8001344:	fba2 2303 	umull	r2, r3, r2, r3
 8001348:	0c9b      	lsrs	r3, r3, #18
 800134a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800134c:	e002      	b.n	8001354 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	3b01      	subs	r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f9      	bne.n	800134e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800135a:	f7ff fc13 	bl	8000b84 <HAL_GetTick>
 800135e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001360:	e01f      	b.n	80013a2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001362:	f7ff fc0f 	bl	8000b84 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d918      	bls.n	80013a2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b01      	cmp	r3, #1
 800137c:	d011      	beq.n	80013a2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001382:	f043 0210 	orr.w	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e007      	b.n	80013b2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d1d8      	bne.n	8001362 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000004 	.word	0x20000004
 80013c0:	431bde83 	.word	0x431bde83

080013c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d12e      	bne.n	800143c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0201 	bic.w	r2, r2, #1
 80013ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013ee:	f7ff fbc9 	bl	8000b84 <HAL_GetTick>
 80013f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80013f4:	e01b      	b.n	800142e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013f6:	f7ff fbc5 	bl	8000b84 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	2b02      	cmp	r3, #2
 8001402:	d914      	bls.n	800142e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b01      	cmp	r3, #1
 8001410:	d10d      	bne.n	800142e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001416:	f043 0210 	orr.w	r2, r3, #16
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e007      	b.n	800143e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	2b01      	cmp	r3, #1
 800143a:	d0dc      	beq.n	80013f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001464:	4013      	ands	r3, r2
 8001466:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001470:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001474:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800147a:	4a04      	ldr	r2, [pc, #16]	@ (800148c <__NVIC_SetPriorityGrouping+0x44>)
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	60d3      	str	r3, [r2, #12]
}
 8001480:	bf00      	nop
 8001482:	3714      	adds	r7, #20
 8001484:	46bd      	mov	sp, r7
 8001486:	bc80      	pop	{r7}
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	e000ed00 	.word	0xe000ed00

08001490 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001494:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	f003 0307 	and.w	r3, r3, #7
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db0b      	blt.n	80014d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	f003 021f 	and.w	r2, r3, #31
 80014c4:	4906      	ldr	r1, [pc, #24]	@ (80014e0 <__NVIC_EnableIRQ+0x34>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	095b      	lsrs	r3, r3, #5
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	@ (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	@ (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	@ 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	@ 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff4f 	bl	8001448 <__NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff64 	bl	8001490 <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ffb2 	bl	8001538 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff81 	bl	80014e4 <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff57 	bl	80014ac <__NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b08b      	sub	sp, #44	@ 0x2c
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001612:	2300      	movs	r3, #0
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161a:	e169      	b.n	80018f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800161c:	2201      	movs	r2, #1
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	69fa      	ldr	r2, [r7, #28]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	429a      	cmp	r2, r3
 8001636:	f040 8158 	bne.w	80018ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	4a9a      	ldr	r2, [pc, #616]	@ (80018a8 <HAL_GPIO_Init+0x2a0>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d05e      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
 8001644:	4a98      	ldr	r2, [pc, #608]	@ (80018a8 <HAL_GPIO_Init+0x2a0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d875      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 800164a:	4a98      	ldr	r2, [pc, #608]	@ (80018ac <HAL_GPIO_Init+0x2a4>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d058      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
 8001650:	4a96      	ldr	r2, [pc, #600]	@ (80018ac <HAL_GPIO_Init+0x2a4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d86f      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 8001656:	4a96      	ldr	r2, [pc, #600]	@ (80018b0 <HAL_GPIO_Init+0x2a8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d052      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
 800165c:	4a94      	ldr	r2, [pc, #592]	@ (80018b0 <HAL_GPIO_Init+0x2a8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d869      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 8001662:	4a94      	ldr	r2, [pc, #592]	@ (80018b4 <HAL_GPIO_Init+0x2ac>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d04c      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
 8001668:	4a92      	ldr	r2, [pc, #584]	@ (80018b4 <HAL_GPIO_Init+0x2ac>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d863      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 800166e:	4a92      	ldr	r2, [pc, #584]	@ (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d046      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
 8001674:	4a90      	ldr	r2, [pc, #576]	@ (80018b8 <HAL_GPIO_Init+0x2b0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d85d      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 800167a:	2b12      	cmp	r3, #18
 800167c:	d82a      	bhi.n	80016d4 <HAL_GPIO_Init+0xcc>
 800167e:	2b12      	cmp	r3, #18
 8001680:	d859      	bhi.n	8001736 <HAL_GPIO_Init+0x12e>
 8001682:	a201      	add	r2, pc, #4	@ (adr r2, 8001688 <HAL_GPIO_Init+0x80>)
 8001684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001688:	08001703 	.word	0x08001703
 800168c:	080016dd 	.word	0x080016dd
 8001690:	080016ef 	.word	0x080016ef
 8001694:	08001731 	.word	0x08001731
 8001698:	08001737 	.word	0x08001737
 800169c:	08001737 	.word	0x08001737
 80016a0:	08001737 	.word	0x08001737
 80016a4:	08001737 	.word	0x08001737
 80016a8:	08001737 	.word	0x08001737
 80016ac:	08001737 	.word	0x08001737
 80016b0:	08001737 	.word	0x08001737
 80016b4:	08001737 	.word	0x08001737
 80016b8:	08001737 	.word	0x08001737
 80016bc:	08001737 	.word	0x08001737
 80016c0:	08001737 	.word	0x08001737
 80016c4:	08001737 	.word	0x08001737
 80016c8:	08001737 	.word	0x08001737
 80016cc:	080016e5 	.word	0x080016e5
 80016d0:	080016f9 	.word	0x080016f9
 80016d4:	4a79      	ldr	r2, [pc, #484]	@ (80018bc <HAL_GPIO_Init+0x2b4>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016da:	e02c      	b.n	8001736 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	623b      	str	r3, [r7, #32]
          break;
 80016e2:	e029      	b.n	8001738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	3304      	adds	r3, #4
 80016ea:	623b      	str	r3, [r7, #32]
          break;
 80016ec:	e024      	b.n	8001738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	3308      	adds	r3, #8
 80016f4:	623b      	str	r3, [r7, #32]
          break;
 80016f6:	e01f      	b.n	8001738 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	330c      	adds	r3, #12
 80016fe:	623b      	str	r3, [r7, #32]
          break;
 8001700:	e01a      	b.n	8001738 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d102      	bne.n	8001710 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800170a:	2304      	movs	r3, #4
 800170c:	623b      	str	r3, [r7, #32]
          break;
 800170e:	e013      	b.n	8001738 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d105      	bne.n	8001724 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001718:	2308      	movs	r3, #8
 800171a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	611a      	str	r2, [r3, #16]
          break;
 8001722:	e009      	b.n	8001738 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001724:	2308      	movs	r3, #8
 8001726:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	615a      	str	r2, [r3, #20]
          break;
 800172e:	e003      	b.n	8001738 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001730:	2300      	movs	r3, #0
 8001732:	623b      	str	r3, [r7, #32]
          break;
 8001734:	e000      	b.n	8001738 <HAL_GPIO_Init+0x130>
          break;
 8001736:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2bff      	cmp	r3, #255	@ 0xff
 800173c:	d801      	bhi.n	8001742 <HAL_GPIO_Init+0x13a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	e001      	b.n	8001746 <HAL_GPIO_Init+0x13e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3304      	adds	r3, #4
 8001746:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	2bff      	cmp	r3, #255	@ 0xff
 800174c:	d802      	bhi.n	8001754 <HAL_GPIO_Init+0x14c>
 800174e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	e002      	b.n	800175a <HAL_GPIO_Init+0x152>
 8001754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001756:	3b08      	subs	r3, #8
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	210f      	movs	r1, #15
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	6a39      	ldr	r1, [r7, #32]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	fa01 f303 	lsl.w	r3, r1, r3
 8001774:	431a      	orrs	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 80b1 	beq.w	80018ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001788:	4b4d      	ldr	r3, [pc, #308]	@ (80018c0 <HAL_GPIO_Init+0x2b8>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	4a4c      	ldr	r2, [pc, #304]	@ (80018c0 <HAL_GPIO_Init+0x2b8>)
 800178e:	f043 0301 	orr.w	r3, r3, #1
 8001792:	6193      	str	r3, [r2, #24]
 8001794:	4b4a      	ldr	r3, [pc, #296]	@ (80018c0 <HAL_GPIO_Init+0x2b8>)
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017a0:	4a48      	ldr	r2, [pc, #288]	@ (80018c4 <HAL_GPIO_Init+0x2bc>)
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b0:	f003 0303 	and.w	r3, r3, #3
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	220f      	movs	r2, #15
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4013      	ands	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a40      	ldr	r2, [pc, #256]	@ (80018c8 <HAL_GPIO_Init+0x2c0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d013      	beq.n	80017f4 <HAL_GPIO_Init+0x1ec>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a3f      	ldr	r2, [pc, #252]	@ (80018cc <HAL_GPIO_Init+0x2c4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d00d      	beq.n	80017f0 <HAL_GPIO_Init+0x1e8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4a3e      	ldr	r2, [pc, #248]	@ (80018d0 <HAL_GPIO_Init+0x2c8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d007      	beq.n	80017ec <HAL_GPIO_Init+0x1e4>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a3d      	ldr	r2, [pc, #244]	@ (80018d4 <HAL_GPIO_Init+0x2cc>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d101      	bne.n	80017e8 <HAL_GPIO_Init+0x1e0>
 80017e4:	2303      	movs	r3, #3
 80017e6:	e006      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017e8:	2304      	movs	r3, #4
 80017ea:	e004      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e002      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017f0:	2301      	movs	r3, #1
 80017f2:	e000      	b.n	80017f6 <HAL_GPIO_Init+0x1ee>
 80017f4:	2300      	movs	r3, #0
 80017f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017f8:	f002 0203 	and.w	r2, r2, #3
 80017fc:	0092      	lsls	r2, r2, #2
 80017fe:	4093      	lsls	r3, r2
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4313      	orrs	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001806:	492f      	ldr	r1, [pc, #188]	@ (80018c4 <HAL_GPIO_Init+0x2bc>)
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	089b      	lsrs	r3, r3, #2
 800180c:	3302      	adds	r3, #2
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001820:	4b2d      	ldr	r3, [pc, #180]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	492c      	ldr	r1, [pc, #176]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]
 800182c:	e006      	b.n	800183c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800182e:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	43db      	mvns	r3, r3
 8001836:	4928      	ldr	r1, [pc, #160]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001838:	4013      	ands	r3, r2
 800183a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d006      	beq.n	8001856 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001848:	4b23      	ldr	r3, [pc, #140]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	4922      	ldr	r1, [pc, #136]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	60cb      	str	r3, [r1, #12]
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001856:	4b20      	ldr	r3, [pc, #128]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	43db      	mvns	r3, r3
 800185e:	491e      	ldr	r1, [pc, #120]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001860:	4013      	ands	r3, r2
 8001862:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001870:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4918      	ldr	r1, [pc, #96]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
 800187c:	e006      	b.n	800188c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800187e:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	43db      	mvns	r3, r3
 8001886:	4914      	ldr	r1, [pc, #80]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 8001888:	4013      	ands	r3, r2
 800188a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d021      	beq.n	80018dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	490e      	ldr	r1, [pc, #56]	@ (80018d8 <HAL_GPIO_Init+0x2d0>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	600b      	str	r3, [r1, #0]
 80018a4:	e021      	b.n	80018ea <HAL_GPIO_Init+0x2e2>
 80018a6:	bf00      	nop
 80018a8:	10320000 	.word	0x10320000
 80018ac:	10310000 	.word	0x10310000
 80018b0:	10220000 	.word	0x10220000
 80018b4:	10210000 	.word	0x10210000
 80018b8:	10120000 	.word	0x10120000
 80018bc:	10110000 	.word	0x10110000
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010000 	.word	0x40010000
 80018c8:	40010800 	.word	0x40010800
 80018cc:	40010c00 	.word	0x40010c00
 80018d0:	40011000 	.word	0x40011000
 80018d4:	40011400 	.word	0x40011400
 80018d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018dc:	4b0b      	ldr	r3, [pc, #44]	@ (800190c <HAL_GPIO_Init+0x304>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	4909      	ldr	r1, [pc, #36]	@ (800190c <HAL_GPIO_Init+0x304>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	3301      	adds	r3, #1
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018f6:	fa22 f303 	lsr.w	r3, r2, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f47f ae8e 	bne.w	800161c <HAL_GPIO_Init+0x14>
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	372c      	adds	r7, #44	@ 0x2c
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr
 800190c:	40010400 	.word	0x40010400

08001910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	460b      	mov	r3, r1
 800191a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	4013      	ands	r3, r2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	e001      	b.n	8001932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800193e:	b480      	push	{r7}
 8001940:	b083      	sub	sp, #12
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	460b      	mov	r3, r1
 8001948:	807b      	strh	r3, [r7, #2]
 800194a:	4613      	mov	r3, r2
 800194c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800194e:	787b      	ldrb	r3, [r7, #1]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001954:	887a      	ldrh	r2, [r7, #2]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800195a:	e003      	b.n	8001964 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	041a      	lsls	r2, r3, #16
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	611a      	str	r2, [r3, #16]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
	...

08001970 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e12b      	b.n	8001bda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7fe ff3e 	bl	8000818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2224      	movs	r2, #36	@ 0x24
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80019d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019d4:	f000 fcda 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 80019d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	4a81      	ldr	r2, [pc, #516]	@ (8001be4 <HAL_I2C_Init+0x274>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d807      	bhi.n	80019f4 <HAL_I2C_Init+0x84>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4a80      	ldr	r2, [pc, #512]	@ (8001be8 <HAL_I2C_Init+0x278>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	bf94      	ite	ls
 80019ec:	2301      	movls	r3, #1
 80019ee:	2300      	movhi	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	e006      	b.n	8001a02 <HAL_I2C_Init+0x92>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4a7d      	ldr	r2, [pc, #500]	@ (8001bec <HAL_I2C_Init+0x27c>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	bf94      	ite	ls
 80019fc:	2301      	movls	r3, #1
 80019fe:	2300      	movhi	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e0e7      	b.n	8001bda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	4a78      	ldr	r2, [pc, #480]	@ (8001bf0 <HAL_I2C_Init+0x280>)
 8001a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a12:	0c9b      	lsrs	r3, r3, #18
 8001a14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68ba      	ldr	r2, [r7, #8]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a6a      	ldr	r2, [pc, #424]	@ (8001be4 <HAL_I2C_Init+0x274>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d802      	bhi.n	8001a44 <HAL_I2C_Init+0xd4>
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	3301      	adds	r3, #1
 8001a42:	e009      	b.n	8001a58 <HAL_I2C_Init+0xe8>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	4a69      	ldr	r2, [pc, #420]	@ (8001bf4 <HAL_I2C_Init+0x284>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	099b      	lsrs	r3, r3, #6
 8001a56:	3301      	adds	r3, #1
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001a6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	495c      	ldr	r1, [pc, #368]	@ (8001be4 <HAL_I2C_Init+0x274>)
 8001a74:	428b      	cmp	r3, r1
 8001a76:	d819      	bhi.n	8001aac <HAL_I2C_Init+0x13c>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1e59      	subs	r1, r3, #1
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a86:	1c59      	adds	r1, r3, #1
 8001a88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001a8c:	400b      	ands	r3, r1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00a      	beq.n	8001aa8 <HAL_I2C_Init+0x138>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1e59      	subs	r1, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aa6:	e051      	b.n	8001b4c <HAL_I2C_Init+0x1dc>
 8001aa8:	2304      	movs	r3, #4
 8001aaa:	e04f      	b.n	8001b4c <HAL_I2C_Init+0x1dc>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d111      	bne.n	8001ad8 <HAL_I2C_Init+0x168>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1e58      	subs	r0, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6859      	ldr	r1, [r3, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	440b      	add	r3, r1
 8001ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf0c      	ite	eq
 8001ad0:	2301      	moveq	r3, #1
 8001ad2:	2300      	movne	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	e012      	b.n	8001afe <HAL_I2C_Init+0x18e>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1e58      	subs	r0, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6859      	ldr	r1, [r3, #4]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	440b      	add	r3, r1
 8001ae6:	0099      	lsls	r1, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aee:	3301      	adds	r3, #1
 8001af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	bf0c      	ite	eq
 8001af8:	2301      	moveq	r3, #1
 8001afa:	2300      	movne	r3, #0
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <HAL_I2C_Init+0x196>
 8001b02:	2301      	movs	r3, #1
 8001b04:	e022      	b.n	8001b4c <HAL_I2C_Init+0x1dc>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10e      	bne.n	8001b2c <HAL_I2C_Init+0x1bc>
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1e58      	subs	r0, r3, #1
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6859      	ldr	r1, [r3, #4]
 8001b16:	460b      	mov	r3, r1
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	440b      	add	r3, r1
 8001b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b20:	3301      	adds	r3, #1
 8001b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b2a:	e00f      	b.n	8001b4c <HAL_I2C_Init+0x1dc>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	1e58      	subs	r0, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6859      	ldr	r1, [r3, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	0099      	lsls	r1, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	6809      	ldr	r1, [r1, #0]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69da      	ldr	r2, [r3, #28]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001b7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6911      	ldr	r1, [r2, #16]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	68d2      	ldr	r2, [r2, #12]
 8001b86:	4311      	orrs	r1, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0201 	orr.w	r2, r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	000186a0 	.word	0x000186a0
 8001be8:	001e847f 	.word	0x001e847f
 8001bec:	003d08ff 	.word	0x003d08ff
 8001bf0:	431bde83 	.word	0x431bde83
 8001bf4:	10624dd3 	.word	0x10624dd3

08001bf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e272      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8087 	beq.w	8001d26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c18:	4b92      	ldr	r3, [pc, #584]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 030c 	and.w	r3, r3, #12
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d00c      	beq.n	8001c3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c24:	4b8f      	ldr	r3, [pc, #572]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d112      	bne.n	8001c56 <HAL_RCC_OscConfig+0x5e>
 8001c30:	4b8c      	ldr	r3, [pc, #560]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c3c:	d10b      	bne.n	8001c56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3e:	4b89      	ldr	r3, [pc, #548]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d06c      	beq.n	8001d24 <HAL_RCC_OscConfig+0x12c>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d168      	bne.n	8001d24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e24c      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x76>
 8001c60:	4b80      	ldr	r3, [pc, #512]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a7f      	ldr	r2, [pc, #508]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e02e      	b.n	8001ccc <HAL_RCC_OscConfig+0xd4>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d10c      	bne.n	8001c90 <HAL_RCC_OscConfig+0x98>
 8001c76:	4b7b      	ldr	r3, [pc, #492]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a7a      	ldr	r2, [pc, #488]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	4b78      	ldr	r3, [pc, #480]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a77      	ldr	r2, [pc, #476]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e01d      	b.n	8001ccc <HAL_RCC_OscConfig+0xd4>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xbc>
 8001c9a:	4b72      	ldr	r3, [pc, #456]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a71      	ldr	r2, [pc, #452]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b6f      	ldr	r3, [pc, #444]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a6e      	ldr	r2, [pc, #440]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0xd4>
 8001cb4:	4b6b      	ldr	r3, [pc, #428]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b68      	ldr	r3, [pc, #416]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a67      	ldr	r2, [pc, #412]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7fe ff56 	bl	8000b84 <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7fe ff52 	bl	8000b84 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	@ 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e200      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cee:	4b5d      	ldr	r3, [pc, #372]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0xe4>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7fe ff42 	bl	8000b84 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7fe ff3e 	bl	8000b84 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	@ 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e1ec      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d16:	4b53      	ldr	r3, [pc, #332]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x10c>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d063      	beq.n	8001dfa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d32:	4b4c      	ldr	r3, [pc, #304]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00b      	beq.n	8001d56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d3e:	4b49      	ldr	r3, [pc, #292]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 030c 	and.w	r3, r3, #12
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d11c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x18c>
 8001d4a:	4b46      	ldr	r3, [pc, #280]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d116      	bne.n	8001d84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d56:	4b43      	ldr	r3, [pc, #268]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d005      	beq.n	8001d6e <HAL_RCC_OscConfig+0x176>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e1c0      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4939      	ldr	r1, [pc, #228]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d82:	e03a      	b.n	8001dfa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d020      	beq.n	8001dce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d8c:	4b36      	ldr	r3, [pc, #216]	@ (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7fe fef7 	bl	8000b84 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7fe fef3 	bl	8000b84 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e1a1      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dac:	4b2d      	ldr	r3, [pc, #180]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0302 	and.w	r3, r3, #2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	4927      	ldr	r1, [pc, #156]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
 8001dcc:	e015      	b.n	8001dfa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dce:	4b26      	ldr	r3, [pc, #152]	@ (8001e68 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7fe fed6 	bl	8000b84 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7fe fed2 	bl	8000b84 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e180      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dee:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d03a      	beq.n	8001e7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d019      	beq.n	8001e42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e0e:	4b17      	ldr	r3, [pc, #92]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e14:	f7fe feb6 	bl	8000b84 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1c:	f7fe feb2 	bl	8000b84 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e160      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e64 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f000 fafe 	bl	800243c <RCC_Delay>
 8001e40:	e01c      	b.n	8001e7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_RCC_OscConfig+0x274>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e48:	f7fe fe9c 	bl	8000b84 <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4e:	e00f      	b.n	8001e70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e50:	f7fe fe98 	bl	8000b84 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d908      	bls.n	8001e70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e146      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	42420000 	.word	0x42420000
 8001e6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e70:	4b92      	ldr	r3, [pc, #584]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1e9      	bne.n	8001e50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80a6 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e8e:	4b8b      	ldr	r3, [pc, #556]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10d      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9a:	4b88      	ldr	r3, [pc, #544]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a87      	ldr	r2, [pc, #540]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea4:	61d3      	str	r3, [r2, #28]
 8001ea6:	4b85      	ldr	r3, [pc, #532]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb6:	4b82      	ldr	r3, [pc, #520]	@ (80020c0 <HAL_RCC_OscConfig+0x4c8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d118      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ec2:	4b7f      	ldr	r3, [pc, #508]	@ (80020c0 <HAL_RCC_OscConfig+0x4c8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a7e      	ldr	r2, [pc, #504]	@ (80020c0 <HAL_RCC_OscConfig+0x4c8>)
 8001ec8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ece:	f7fe fe59 	bl	8000b84 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ed6:	f7fe fe55 	bl	8000b84 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b64      	cmp	r3, #100	@ 0x64
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e103      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee8:	4b75      	ldr	r3, [pc, #468]	@ (80020c0 <HAL_RCC_OscConfig+0x4c8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d106      	bne.n	8001f0a <HAL_RCC_OscConfig+0x312>
 8001efc:	4b6f      	ldr	r3, [pc, #444]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a6e      	ldr	r2, [pc, #440]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	e02d      	b.n	8001f66 <HAL_RCC_OscConfig+0x36e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x334>
 8001f12:	4b6a      	ldr	r3, [pc, #424]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a69      	ldr	r2, [pc, #420]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	4b67      	ldr	r3, [pc, #412]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a66      	ldr	r2, [pc, #408]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	e01c      	b.n	8001f66 <HAL_RCC_OscConfig+0x36e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b05      	cmp	r3, #5
 8001f32:	d10c      	bne.n	8001f4e <HAL_RCC_OscConfig+0x356>
 8001f34:	4b61      	ldr	r3, [pc, #388]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4a60      	ldr	r2, [pc, #384]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
 8001f3e:	6213      	str	r3, [r2, #32]
 8001f40:	4b5e      	ldr	r3, [pc, #376]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	6a1b      	ldr	r3, [r3, #32]
 8001f44:	4a5d      	ldr	r2, [pc, #372]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	6213      	str	r3, [r2, #32]
 8001f4c:	e00b      	b.n	8001f66 <HAL_RCC_OscConfig+0x36e>
 8001f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f50:	6a1b      	ldr	r3, [r3, #32]
 8001f52:	4a5a      	ldr	r2, [pc, #360]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	6213      	str	r3, [r2, #32]
 8001f5a:	4b58      	ldr	r3, [pc, #352]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	4a57      	ldr	r2, [pc, #348]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d015      	beq.n	8001f9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6e:	f7fe fe09 	bl	8000b84 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	e00a      	b.n	8001f8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f76:	f7fe fe05 	bl	8000b84 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e0b1      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0ee      	beq.n	8001f76 <HAL_RCC_OscConfig+0x37e>
 8001f98:	e014      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9a:	f7fe fdf3 	bl	8000b84 <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	e00a      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa2:	f7fe fdef 	bl	8000b84 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e09b      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	4b40      	ldr	r3, [pc, #256]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1ee      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fc4:	7dfb      	ldrb	r3, [r7, #23]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d105      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fca:	4b3c      	ldr	r3, [pc, #240]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	4a3b      	ldr	r2, [pc, #236]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8087 	beq.w	80020ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe0:	4b36      	ldr	r3, [pc, #216]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d061      	beq.n	80020b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d146      	bne.n	8002082 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff4:	4b33      	ldr	r3, [pc, #204]	@ (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ffa:	f7fe fdc3 	bl	8000b84 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002002:	f7fe fdbf 	bl	8000b84 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e06d      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002014:	4b29      	ldr	r3, [pc, #164]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002028:	d108      	bne.n	800203c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800202a:	4b24      	ldr	r3, [pc, #144]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	4921      	ldr	r1, [pc, #132]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8002038:	4313      	orrs	r3, r2
 800203a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800203c:	4b1f      	ldr	r3, [pc, #124]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a19      	ldr	r1, [r3, #32]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	430b      	orrs	r3, r1
 800204e:	491b      	ldr	r1, [pc, #108]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205a:	f7fe fd93 	bl	8000b84 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002062:	f7fe fd8f 	bl	8000b84 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e03d      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x46a>
 8002080:	e035      	b.n	80020ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002082:	4b10      	ldr	r3, [pc, #64]	@ (80020c4 <HAL_RCC_OscConfig+0x4cc>)
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002088:	f7fe fd7c 	bl	8000b84 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002090:	f7fe fd78 	bl	8000b84 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e026      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a2:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_RCC_OscConfig+0x4c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x498>
 80020ae:	e01e      	b.n	80020ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d107      	bne.n	80020c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e019      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40007000 	.word	0x40007000
 80020c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_RCC_OscConfig+0x500>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d106      	bne.n	80020ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000

080020fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0d0      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002110:	4b6a      	ldr	r3, [pc, #424]	@ (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d910      	bls.n	8002140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211e:	4b67      	ldr	r3, [pc, #412]	@ (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 0207 	bic.w	r2, r3, #7
 8002126:	4965      	ldr	r1, [pc, #404]	@ (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800212e:	4b63      	ldr	r3, [pc, #396]	@ (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d001      	beq.n	8002140 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0b8      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d020      	beq.n	800218e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0304 	and.w	r3, r3, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	d005      	beq.n	8002164 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002158:	4b59      	ldr	r3, [pc, #356]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	4a58      	ldr	r2, [pc, #352]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002162:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002170:	4b53      	ldr	r3, [pc, #332]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a52      	ldr	r2, [pc, #328]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800217a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800217c:	4b50      	ldr	r3, [pc, #320]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	494d      	ldr	r1, [pc, #308]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d040      	beq.n	800221c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	4b47      	ldr	r3, [pc, #284]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d115      	bne.n	80021da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e07f      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d107      	bne.n	80021ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ba:	4b41      	ldr	r3, [pc, #260]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d109      	bne.n	80021da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e073      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ca:	4b3d      	ldr	r3, [pc, #244]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06b      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021da:	4b39      	ldr	r3, [pc, #228]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f023 0203 	bic.w	r2, r3, #3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4936      	ldr	r1, [pc, #216]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ec:	f7fe fcca 	bl	8000b84 <HAL_GetTick>
 80021f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	e00a      	b.n	800220a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f4:	f7fe fcc6 	bl	8000b84 <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e053      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220a:	4b2d      	ldr	r3, [pc, #180]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 020c 	and.w	r2, r3, #12
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	429a      	cmp	r2, r3
 800221a:	d1eb      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800221c:	4b27      	ldr	r3, [pc, #156]	@ (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d210      	bcs.n	800224c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b24      	ldr	r3, [pc, #144]	@ (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 0207 	bic.w	r2, r3, #7
 8002232:	4922      	ldr	r1, [pc, #136]	@ (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b20      	ldr	r3, [pc, #128]	@ (80022bc <HAL_RCC_ClockConfig+0x1c0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d001      	beq.n	800224c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e032      	b.n	80022b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	d008      	beq.n	800226a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002258:	4b19      	ldr	r3, [pc, #100]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4916      	ldr	r1, [pc, #88]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d009      	beq.n	800228a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002276:	4b12      	ldr	r3, [pc, #72]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	490e      	ldr	r1, [pc, #56]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800228a:	f000 f821 	bl	80022d0 <HAL_RCC_GetSysClockFreq>
 800228e:	4602      	mov	r2, r0
 8002290:	4b0b      	ldr	r3, [pc, #44]	@ (80022c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	490a      	ldr	r1, [pc, #40]	@ (80022c4 <HAL_RCC_ClockConfig+0x1c8>)
 800229c:	5ccb      	ldrb	r3, [r1, r3]
 800229e:	fa22 f303 	lsr.w	r3, r2, r3
 80022a2:	4a09      	ldr	r2, [pc, #36]	@ (80022c8 <HAL_RCC_ClockConfig+0x1cc>)
 80022a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <HAL_RCC_ClockConfig+0x1d0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe fb3e 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40022000 	.word	0x40022000
 80022c0:	40021000 	.word	0x40021000
 80022c4:	080065dc 	.word	0x080065dc
 80022c8:	20000004 	.word	0x20000004
 80022cc:	20000008 	.word	0x20000008

080022d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b087      	sub	sp, #28
 80022d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x94>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d002      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x30>
 80022fa:	2b08      	cmp	r3, #8
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0x36>
 80022fe:	e027      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x98>)
 8002302:	613b      	str	r3, [r7, #16]
      break;
 8002304:	e027      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	0c9b      	lsrs	r3, r3, #18
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	4a17      	ldr	r2, [pc, #92]	@ (800236c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002310:	5cd3      	ldrb	r3, [r2, r3]
 8002312:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d010      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800231e:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x94>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	0c5b      	lsrs	r3, r3, #17
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	4a11      	ldr	r2, [pc, #68]	@ (8002370 <HAL_RCC_GetSysClockFreq+0xa0>)
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a0d      	ldr	r2, [pc, #52]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x98>)
 8002332:	fb03 f202 	mul.w	r2, r3, r2
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	e004      	b.n	800234a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a0c      	ldr	r2, [pc, #48]	@ (8002374 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002344:	fb02 f303 	mul.w	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	613b      	str	r3, [r7, #16]
      break;
 800234e:	e002      	b.n	8002356 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x98>)
 8002352:	613b      	str	r3, [r7, #16]
      break;
 8002354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002356:	693b      	ldr	r3, [r7, #16]
}
 8002358:	4618      	mov	r0, r3
 800235a:	371c      	adds	r7, #28
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40021000 	.word	0x40021000
 8002368:	007a1200 	.word	0x007a1200
 800236c:	080065f4 	.word	0x080065f4
 8002370:	08006604 	.word	0x08006604
 8002374:	003d0900 	.word	0x003d0900

08002378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800237c:	4b02      	ldr	r3, [pc, #8]	@ (8002388 <HAL_RCC_GetHCLKFreq+0x10>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr
 8002388:	20000004 	.word	0x20000004

0800238c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002390:	f7ff fff2 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4903      	ldr	r1, [pc, #12]	@ (80023b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	080065ec 	.word	0x080065ec

080023b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023b8:	f7ff ffde 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 80023bc:	4602      	mov	r2, r0
 80023be:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0adb      	lsrs	r3, r3, #11
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4903      	ldr	r1, [pc, #12]	@ (80023d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023ca:	5ccb      	ldrb	r3, [r1, r3]
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	080065ec 	.word	0x080065ec

080023dc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	220f      	movs	r2, #15
 80023ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023ec:	4b11      	ldr	r3, [pc, #68]	@ (8002434 <HAL_RCC_GetClockConfig+0x58>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0203 	and.w	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002434 <HAL_RCC_GetClockConfig+0x58>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002404:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <HAL_RCC_GetClockConfig+0x58>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002410:	4b08      	ldr	r3, [pc, #32]	@ (8002434 <HAL_RCC_GetClockConfig+0x58>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	08db      	lsrs	r3, r3, #3
 8002416:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800241e:	4b06      	ldr	r3, [pc, #24]	@ (8002438 <HAL_RCC_GetClockConfig+0x5c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0207 	and.w	r2, r3, #7
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40021000 	.word	0x40021000
 8002438:	40022000 	.word	0x40022000

0800243c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002444:	4b0a      	ldr	r3, [pc, #40]	@ (8002470 <RCC_Delay+0x34>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <RCC_Delay+0x38>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	0a5b      	lsrs	r3, r3, #9
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002458:	bf00      	nop
  }
  while (Delay --);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1e5a      	subs	r2, r3, #1
 800245e:	60fa      	str	r2, [r7, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f9      	bne.n	8002458 <RCC_Delay+0x1c>
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	3714      	adds	r7, #20
 800246a:	46bd      	mov	sp, r7
 800246c:	bc80      	pop	{r7}
 800246e:	4770      	bx	lr
 8002470:	20000004 	.word	0x20000004
 8002474:	10624dd3 	.word	0x10624dd3

08002478 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d07d      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002494:	2300      	movs	r3, #0
 8002496:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002498:	4b4f      	ldr	r3, [pc, #316]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10d      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a4:	4b4c      	ldr	r3, [pc, #304]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	4a4b      	ldr	r2, [pc, #300]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	61d3      	str	r3, [r2, #28]
 80024b0:	4b49      	ldr	r3, [pc, #292]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024bc:	2301      	movs	r3, #1
 80024be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	4b46      	ldr	r3, [pc, #280]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d118      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024cc:	4b43      	ldr	r3, [pc, #268]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a42      	ldr	r2, [pc, #264]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d8:	f7fe fb54 	bl	8000b84 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024de:	e008      	b.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe fb50 	bl	8000b84 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	@ 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e06d      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f2:	4b3a      	ldr	r3, [pc, #232]	@ (80025dc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024fe:	4b36      	ldr	r3, [pc, #216]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002506:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d02e      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	429a      	cmp	r2, r3
 800251a:	d027      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800251c:	4b2e      	ldr	r3, [pc, #184]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002524:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002526:	4b2e      	ldr	r3, [pc, #184]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800252c:	4b2c      	ldr	r3, [pc, #176]	@ (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002532:	4a29      	ldr	r2, [pc, #164]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d014      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe fb1f 	bl	8000b84 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	e00a      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800254a:	f7fe fb1b 	bl	8000b84 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e036      	b.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ee      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800256c:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4917      	ldr	r1, [pc, #92]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800257a:	4313      	orrs	r3, r2
 800257c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800257e:	7dfb      	ldrb	r3, [r7, #23]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	4a13      	ldr	r2, [pc, #76]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800258e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800259c:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	490b      	ldr	r1, [pc, #44]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025ba:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	4904      	ldr	r1, [pc, #16]	@ (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40021000 	.word	0x40021000
 80025dc:	40007000 	.word	0x40007000
 80025e0:	42420440 	.word	0x42420440

080025e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	2300      	movs	r3, #0
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	2300      	movs	r3, #0
 80025f6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	2300      	movs	r3, #0
 80025fe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b10      	cmp	r3, #16
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b10      	cmp	r3, #16
 800260a:	f200 808a 	bhi.w	8002722 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d045      	beq.n	80026a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d075      	beq.n	8002706 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800261a:	e082      	b.n	8002722 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800261c:	4b46      	ldr	r3, [pc, #280]	@ (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002622:	4b45      	ldr	r3, [pc, #276]	@ (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d07b      	beq.n	8002726 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	0c9b      	lsrs	r3, r3, #18
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	4a41      	ldr	r2, [pc, #260]	@ (800273c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002638:	5cd3      	ldrb	r3, [r2, r3]
 800263a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d015      	beq.n	8002672 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002646:	4b3c      	ldr	r3, [pc, #240]	@ (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	0c5b      	lsrs	r3, r3, #17
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	4a3b      	ldr	r2, [pc, #236]	@ (8002740 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002652:	5cd3      	ldrb	r3, [r2, r3]
 8002654:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00d      	beq.n	800267c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002660:	4a38      	ldr	r2, [pc, #224]	@ (8002744 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	fbb2 f2f3 	udiv	r2, r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	fb02 f303 	mul.w	r3, r2, r3
 800266e:	61fb      	str	r3, [r7, #28]
 8002670:	e004      	b.n	800267c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4a34      	ldr	r2, [pc, #208]	@ (8002748 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800267c:	4b2e      	ldr	r3, [pc, #184]	@ (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002688:	d102      	bne.n	8002690 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	61bb      	str	r3, [r7, #24]
      break;
 800268e:	e04a      	b.n	8002726 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4a2d      	ldr	r2, [pc, #180]	@ (800274c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	61bb      	str	r3, [r7, #24]
      break;
 800269e:	e042      	b.n	8002726 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80026a0:	4b25      	ldr	r3, [pc, #148]	@ (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026b0:	d108      	bne.n	80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80026bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	e01f      	b.n	8002704 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026ce:	d109      	bne.n	80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80026d0:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80026dc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e00f      	b.n	8002704 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80026ee:	d11c      	bne.n	800272a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80026f0:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d016      	beq.n	800272a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80026fc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002700:	61bb      	str	r3, [r7, #24]
      break;
 8002702:	e012      	b.n	800272a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002704:	e011      	b.n	800272a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002706:	f7ff fe55 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 800270a:	4602      	mov	r2, r0
 800270c:	4b0a      	ldr	r3, [pc, #40]	@ (8002738 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	0b9b      	lsrs	r3, r3, #14
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	3301      	adds	r3, #1
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	61bb      	str	r3, [r7, #24]
      break;
 8002720:	e004      	b.n	800272c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002722:	bf00      	nop
 8002724:	e002      	b.n	800272c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002726:	bf00      	nop
 8002728:	e000      	b.n	800272c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800272a:	bf00      	nop
    }
  }
  return (frequency);
 800272c:	69bb      	ldr	r3, [r7, #24]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	08006608 	.word	0x08006608
 8002740:	08006618 	.word	0x08006618
 8002744:	007a1200 	.word	0x007a1200
 8002748:	003d0900 	.word	0x003d0900
 800274c:	aaaaaaab 	.word	0xaaaaaaab

08002750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e041      	b.n	80027e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f839 	bl	80027ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f000 f9b4 	bl	8002afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b01      	cmp	r3, #1
 8002812:	d001      	beq.n	8002818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e03a      	b.n	800288e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2202      	movs	r2, #2
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0201 	orr.w	r2, r2, #1
 800282e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a18      	ldr	r2, [pc, #96]	@ (8002898 <HAL_TIM_Base_Start_IT+0x98>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00e      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x58>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002842:	d009      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x58>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a14      	ldr	r2, [pc, #80]	@ (800289c <HAL_TIM_Base_Start_IT+0x9c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d004      	beq.n	8002858 <HAL_TIM_Base_Start_IT+0x58>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a13      	ldr	r2, [pc, #76]	@ (80028a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d111      	bne.n	800287c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b06      	cmp	r3, #6
 8002868:	d010      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0201 	orr.w	r2, r2, #1
 8002878:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287a:	e007      	b.n	800288c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr
 8002898:	40012c00 	.word	0x40012c00
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800

080028a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d122      	bne.n	8002900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d11b      	bne.n	8002900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0202 	mvn.w	r2, #2
 80028d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2201      	movs	r2, #1
 80028d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 f8ed 	bl	8002ac6 <HAL_TIM_IC_CaptureCallback>
 80028ec:	e005      	b.n	80028fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f8e0 	bl	8002ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f8ef 	bl	8002ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b04      	cmp	r3, #4
 800290c:	d122      	bne.n	8002954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b04      	cmp	r3, #4
 800291a:	d11b      	bne.n	8002954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0204 	mvn.w	r2, #4
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2202      	movs	r2, #2
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f8c3 	bl	8002ac6 <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f8b6 	bl	8002ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f8c5 	bl	8002ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b08      	cmp	r3, #8
 8002960:	d122      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b08      	cmp	r3, #8
 800296e:	d11b      	bne.n	80029a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f06f 0208 	mvn.w	r2, #8
 8002978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2204      	movs	r2, #4
 800297e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f003 0303 	and.w	r3, r3, #3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f899 	bl	8002ac6 <HAL_TIM_IC_CaptureCallback>
 8002994:	e005      	b.n	80029a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f88c 	bl	8002ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f89b 	bl	8002ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b10      	cmp	r3, #16
 80029b4:	d122      	bne.n	80029fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f003 0310 	and.w	r3, r3, #16
 80029c0:	2b10      	cmp	r3, #16
 80029c2:	d11b      	bne.n	80029fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f06f 0210 	mvn.w	r2, #16
 80029cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2208      	movs	r2, #8
 80029d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f86f 	bl	8002ac6 <HAL_TIM_IC_CaptureCallback>
 80029e8:	e005      	b.n	80029f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f862 	bl	8002ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f871 	bl	8002ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d10e      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d107      	bne.n	8002a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0201 	mvn.w	r2, #1
 8002a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fd fe6c 	bl	8000700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a32:	2b80      	cmp	r3, #128	@ 0x80
 8002a34:	d10e      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a40:	2b80      	cmp	r3, #128	@ 0x80
 8002a42:	d107      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f8bf 	bl	8002bd2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5e:	2b40      	cmp	r3, #64	@ 0x40
 8002a60:	d10e      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6c:	2b40      	cmp	r3, #64	@ 0x40
 8002a6e:	d107      	bne.n	8002a80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f835 	bl	8002aea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b20      	cmp	r3, #32
 8002a8c:	d10e      	bne.n	8002aac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d107      	bne.n	8002aac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0220 	mvn.w	r2, #32
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f88a 	bl	8002bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	3708      	adds	r7, #8
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4a29      	ldr	r2, [pc, #164]	@ (8002bb4 <TIM_Base_SetConfig+0xb8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d00b      	beq.n	8002b2c <TIM_Base_SetConfig+0x30>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b1a:	d007      	beq.n	8002b2c <TIM_Base_SetConfig+0x30>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a26      	ldr	r2, [pc, #152]	@ (8002bb8 <TIM_Base_SetConfig+0xbc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d003      	beq.n	8002b2c <TIM_Base_SetConfig+0x30>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a25      	ldr	r2, [pc, #148]	@ (8002bbc <TIM_Base_SetConfig+0xc0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d108      	bne.n	8002b3e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb4 <TIM_Base_SetConfig+0xb8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00b      	beq.n	8002b5e <TIM_Base_SetConfig+0x62>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4c:	d007      	beq.n	8002b5e <TIM_Base_SetConfig+0x62>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a19      	ldr	r2, [pc, #100]	@ (8002bb8 <TIM_Base_SetConfig+0xbc>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d003      	beq.n	8002b5e <TIM_Base_SetConfig+0x62>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a18      	ldr	r2, [pc, #96]	@ (8002bbc <TIM_Base_SetConfig+0xc0>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d108      	bne.n	8002b70 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a07      	ldr	r2, [pc, #28]	@ (8002bb4 <TIM_Base_SetConfig+0xb8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d103      	bne.n	8002ba4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	615a      	str	r2, [r3, #20]
}
 8002baa:	bf00      	nop
 8002bac:	3714      	adds	r7, #20
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bc80      	pop	{r7}
 8002bb2:	4770      	bx	lr
 8002bb4:	40012c00 	.word	0x40012c00
 8002bb8:	40000400 	.word	0x40000400
 8002bbc:	40000800 	.word	0x40000800

08002bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e042      	b.n	8002c7c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fd fe42 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2224      	movs	r2, #36	@ 0x24
 8002c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f9af 	bl	8002f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b08a      	sub	sp, #40	@ 0x28
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	603b      	str	r3, [r7, #0]
 8002c90:	4613      	mov	r3, r2
 8002c92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d16d      	bne.n	8002d80 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <HAL_UART_Transmit+0x2c>
 8002caa:	88fb      	ldrh	r3, [r7, #6]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e066      	b.n	8002d82 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2221      	movs	r2, #33	@ 0x21
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cc2:	f7fd ff5f 	bl	8000b84 <HAL_GetTick>
 8002cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	88fa      	ldrh	r2, [r7, #6]
 8002ccc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	88fa      	ldrh	r2, [r7, #6]
 8002cd2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cdc:	d108      	bne.n	8002cf0 <HAL_UART_Transmit+0x6c>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d104      	bne.n	8002cf0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e003      	b.n	8002cf8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cf8:	e02a      	b.n	8002d50 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2180      	movs	r1, #128	@ 0x80
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f8d2 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e036      	b.n	8002d82 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10b      	bne.n	8002d32 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	61bb      	str	r3, [r7, #24]
 8002d30:	e007      	b.n	8002d42 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	781a      	ldrb	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1cf      	bne.n	8002cfa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	2140      	movs	r1, #64	@ 0x40
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8a2 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e006      	b.n	8002d82 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3720      	adds	r7, #32
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b08a      	sub	sp, #40	@ 0x28
 8002d8e:	af02      	add	r7, sp, #8
 8002d90:	60f8      	str	r0, [r7, #12]
 8002d92:	60b9      	str	r1, [r7, #8]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	4613      	mov	r3, r2
 8002d98:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d17c      	bne.n	8002ea4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_UART_Receive+0x2c>
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e075      	b.n	8002ea6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2222      	movs	r2, #34	@ 0x22
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dce:	f7fd fed9 	bl	8000b84 <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	88fa      	ldrh	r2, [r7, #6]
 8002dd8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	88fa      	ldrh	r2, [r7, #6]
 8002dde:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de8:	d108      	bne.n	8002dfc <HAL_UART_Receive+0x72>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d104      	bne.n	8002dfc <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	e003      	b.n	8002e04 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e04:	e043      	b.n	8002e8e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2120      	movs	r1, #32
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 f84c 	bl	8002eae <UART_WaitOnFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e042      	b.n	8002ea6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10c      	bne.n	8002e40 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	3302      	adds	r3, #2
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	e01f      	b.n	8002e80 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e48:	d007      	beq.n	8002e5a <HAL_UART_Receive+0xd0>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10a      	bne.n	8002e68 <HAL_UART_Receive+0xde>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	701a      	strb	r2, [r3, #0]
 8002e66:	e008      	b.n	8002e7a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1b6      	bne.n	8002e06 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3720      	adds	r7, #32
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b090      	sub	sp, #64	@ 0x40
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	603b      	str	r3, [r7, #0]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ebe:	e050      	b.n	8002f62 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec6:	d04c      	beq.n	8002f62 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <UART_WaitOnFlagUntilTimeout+0x30>
 8002ece:	f7fd fe59 	bl	8000b84 <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d241      	bcs.n	8002f62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee8:	e853 3f00 	ldrex	r3, [r3]
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	330c      	adds	r3, #12
 8002efc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002efe:	637a      	str	r2, [r7, #52]	@ 0x34
 8002f00:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f06:	e841 2300 	strex	r3, r2, [r1]
 8002f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1e5      	bne.n	8002ede <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	3314      	adds	r3, #20
 8002f18:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	e853 3f00 	ldrex	r3, [r3]
 8002f20:	613b      	str	r3, [r7, #16]
   return(result);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3314      	adds	r3, #20
 8002f30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f32:	623a      	str	r2, [r7, #32]
 8002f34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f36:	69f9      	ldr	r1, [r7, #28]
 8002f38:	6a3a      	ldr	r2, [r7, #32]
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1e5      	bne.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e00f      	b.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	bf0c      	ite	eq
 8002f72:	2301      	moveq	r3, #1
 8002f74:	2300      	movne	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	79fb      	ldrb	r3, [r7, #7]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d09f      	beq.n	8002ec0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3740      	adds	r7, #64	@ 0x40
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002fc6:	f023 030c 	bic.w	r3, r3, #12
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	68b9      	ldr	r1, [r7, #8]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699a      	ldr	r2, [r3, #24]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a2c      	ldr	r2, [pc, #176]	@ (80030a0 <UART_SetConfig+0x114>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d103      	bne.n	8002ffc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ff4:	f7ff f9de 	bl	80023b4 <HAL_RCC_GetPCLK2Freq>
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	e002      	b.n	8003002 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ffc:	f7ff f9c6 	bl	800238c <HAL_RCC_GetPCLK1Freq>
 8003000:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	009a      	lsls	r2, r3, #2
 800300c:	441a      	add	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	4a22      	ldr	r2, [pc, #136]	@ (80030a4 <UART_SetConfig+0x118>)
 800301a:	fba2 2303 	umull	r2, r3, r2, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	0119      	lsls	r1, r3, #4
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	009a      	lsls	r2, r3, #2
 800302c:	441a      	add	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	fbb2 f2f3 	udiv	r2, r2, r3
 8003038:	4b1a      	ldr	r3, [pc, #104]	@ (80030a4 <UART_SetConfig+0x118>)
 800303a:	fba3 0302 	umull	r0, r3, r3, r2
 800303e:	095b      	lsrs	r3, r3, #5
 8003040:	2064      	movs	r0, #100	@ 0x64
 8003042:	fb00 f303 	mul.w	r3, r0, r3
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	3332      	adds	r3, #50	@ 0x32
 800304c:	4a15      	ldr	r2, [pc, #84]	@ (80030a4 <UART_SetConfig+0x118>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003058:	4419      	add	r1, r3
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	009a      	lsls	r2, r3, #2
 8003064:	441a      	add	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003070:	4b0c      	ldr	r3, [pc, #48]	@ (80030a4 <UART_SetConfig+0x118>)
 8003072:	fba3 0302 	umull	r0, r3, r3, r2
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2064      	movs	r0, #100	@ 0x64
 800307a:	fb00 f303 	mul.w	r3, r0, r3
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	3332      	adds	r3, #50	@ 0x32
 8003084:	4a07      	ldr	r2, [pc, #28]	@ (80030a4 <UART_SetConfig+0x118>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	095b      	lsrs	r3, r3, #5
 800308c:	f003 020f 	and.w	r2, r3, #15
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	440a      	add	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40013800 	.word	0x40013800
 80030a4:	51eb851f 	.word	0x51eb851f

080030a8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030ae:	f3ef 8305 	mrs	r3, IPSR
 80030b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80030b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ba:	f3ef 8310 	mrs	r3, PRIMASK
 80030be:	607b      	str	r3, [r7, #4]
  return(result);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <osKernelInitialize+0x32>
 80030c6:	4b10      	ldr	r3, [pc, #64]	@ (8003108 <osKernelInitialize+0x60>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d109      	bne.n	80030e2 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030ce:	f3ef 8311 	mrs	r3, BASEPRI
 80030d2:	603b      	str	r3, [r7, #0]
  return(result);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80030da:	f06f 0305 	mvn.w	r3, #5
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e00c      	b.n	80030fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030e2:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <osKernelInitialize+0x60>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80030ea:	4b07      	ldr	r3, [pc, #28]	@ (8003108 <osKernelInitialize+0x60>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e002      	b.n	80030fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80030f6:	f04f 33ff 	mov.w	r3, #4294967295
 80030fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80030fc:	68fb      	ldr	r3, [r7, #12]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	200001f8 	.word	0x200001f8

0800310c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003112:	f3ef 8305 	mrs	r3, IPSR
 8003116:	60bb      	str	r3, [r7, #8]
  return(result);
 8003118:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800311e:	f3ef 8310 	mrs	r3, PRIMASK
 8003122:	607b      	str	r3, [r7, #4]
  return(result);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <osKernelStart+0x32>
 800312a:	4b11      	ldr	r3, [pc, #68]	@ (8003170 <osKernelStart+0x64>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d109      	bne.n	8003146 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003132:	f3ef 8311 	mrs	r3, BASEPRI
 8003136:	603b      	str	r3, [r7, #0]
  return(result);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <osKernelStart+0x3a>
    stat = osErrorISR;
 800313e:	f06f 0305 	mvn.w	r3, #5
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	e00e      	b.n	8003164 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003146:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <osKernelStart+0x64>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d107      	bne.n	800315e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800314e:	4b08      	ldr	r3, [pc, #32]	@ (8003170 <osKernelStart+0x64>)
 8003150:	2202      	movs	r2, #2
 8003152:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003154:	f001 f890 	bl	8004278 <vTaskStartScheduler>
      stat = osOK;
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	e002      	b.n	8003164 <osKernelStart+0x58>
    } else {
      stat = osError;
 800315e:	f04f 33ff 	mov.w	r3, #4294967295
 8003162:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003164:	68fb      	ldr	r3, [r7, #12]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200001f8 	.word	0x200001f8

08003174 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b092      	sub	sp, #72	@ 0x48
 8003178:	af04      	add	r7, sp, #16
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003180:	2300      	movs	r3, #0
 8003182:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003184:	f3ef 8305 	mrs	r3, IPSR
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 8094 	bne.w	80032ba <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003192:	f3ef 8310 	mrs	r3, PRIMASK
 8003196:	623b      	str	r3, [r7, #32]
  return(result);
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 808d 	bne.w	80032ba <osThreadNew+0x146>
 80031a0:	4b48      	ldr	r3, [pc, #288]	@ (80032c4 <osThreadNew+0x150>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d106      	bne.n	80031b6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031a8:	f3ef 8311 	mrs	r3, BASEPRI
 80031ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f040 8082 	bne.w	80032ba <osThreadNew+0x146>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d07e      	beq.n	80032ba <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80031bc:	2380      	movs	r3, #128	@ 0x80
 80031be:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80031c0:	2318      	movs	r3, #24
 80031c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 80031c4:	2300      	movs	r3, #0
 80031c6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80031c8:	f107 031b 	add.w	r3, r7, #27
 80031cc:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d045      	beq.n	8003266 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <osThreadNew+0x74>
        name = attr->name;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80031f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <osThreadNew+0x9a>
 80031fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fe:	2b38      	cmp	r3, #56	@ 0x38
 8003200:	d805      	bhi.n	800320e <osThreadNew+0x9a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <osThreadNew+0x9e>
        return (NULL);
 800320e:	2300      	movs	r3, #0
 8003210:	e054      	b.n	80032bc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	089b      	lsrs	r3, r3, #2
 8003220:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00e      	beq.n	8003248 <osThreadNew+0xd4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b5b      	cmp	r3, #91	@ 0x5b
 8003230:	d90a      	bls.n	8003248 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003236:	2b00      	cmp	r3, #0
 8003238:	d006      	beq.n	8003248 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d002      	beq.n	8003248 <osThreadNew+0xd4>
        mem = 1;
 8003242:	2301      	movs	r3, #1
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003246:	e010      	b.n	800326a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10c      	bne.n	800326a <osThreadNew+0xf6>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d108      	bne.n	800326a <osThreadNew+0xf6>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <osThreadNew+0xf6>
          mem = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003264:	e001      	b.n	800326a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 800326a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800326c:	2b01      	cmp	r3, #1
 800326e:	d110      	bne.n	8003292 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003278:	9202      	str	r2, [sp, #8]
 800327a:	9301      	str	r3, [sp, #4]
 800327c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003284:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fe24 	bl	8003ed4 <xTaskCreateStatic>
 800328c:	4603      	mov	r3, r0
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	e013      	b.n	80032ba <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003294:	2b00      	cmp	r3, #0
 8003296:	d110      	bne.n	80032ba <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329a:	b29a      	uxth	r2, r3
 800329c:	f107 0314 	add.w	r3, r7, #20
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fe71 	bl	8003f92 <xTaskCreate>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d001      	beq.n	80032ba <osThreadNew+0x146>
          hTask = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032ba:	697b      	ldr	r3, [r7, #20]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3738      	adds	r7, #56	@ 0x38
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	200001f8 	.word	0x200001f8

080032c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032d0:	f3ef 8305 	mrs	r3, IPSR
 80032d4:	613b      	str	r3, [r7, #16]
  return(result);
 80032d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10f      	bne.n	80032fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032dc:	f3ef 8310 	mrs	r3, PRIMASK
 80032e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d109      	bne.n	80032fc <osDelay+0x34>
 80032e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003320 <osDelay+0x58>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d109      	bne.n	8003304 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032f0:	f3ef 8311 	mrs	r3, BASEPRI
 80032f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <osDelay+0x3c>
    stat = osErrorISR;
 80032fc:	f06f 0305 	mvn.w	r3, #5
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e007      	b.n	8003314 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <osDelay+0x4c>
      vTaskDelay(ticks);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 ff7c 	bl	800420c <vTaskDelay>
    }
  }

  return (stat);
 8003314:	697b      	ldr	r3, [r7, #20]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200001f8 	.word	0x200001f8

08003324 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a06      	ldr	r2, [pc, #24]	@ (800334c <vApplicationGetIdleTaskMemory+0x28>)
 8003334:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4a05      	ldr	r2, [pc, #20]	@ (8003350 <vApplicationGetIdleTaskMemory+0x2c>)
 800333a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2280      	movs	r2, #128	@ 0x80
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	200001fc 	.word	0x200001fc
 8003350:	20000258 	.word	0x20000258

08003354 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a07      	ldr	r2, [pc, #28]	@ (8003380 <vApplicationGetTimerTaskMemory+0x2c>)
 8003364:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4a06      	ldr	r2, [pc, #24]	@ (8003384 <vApplicationGetTimerTaskMemory+0x30>)
 800336a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003372:	601a      	str	r2, [r3, #0]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	bc80      	pop	{r7}
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	20000458 	.word	0x20000458
 8003384:	200004b4 	.word	0x200004b4

08003388 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f103 0208 	add.w	r2, r3, #8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f04f 32ff 	mov.w	r2, #4294967295
 80033a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f103 0208 	add.w	r2, r3, #8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f103 0208 	add.w	r2, r3, #8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr

080033de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343a:	d103      	bne.n	8003444 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	60fb      	str	r3, [r7, #12]
 8003442:	e00c      	b.n	800345e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3308      	adds	r3, #8
 8003448:	60fb      	str	r3, [r7, #12]
 800344a:	e002      	b.n	8003452 <vListInsert+0x2e>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d2f6      	bcs.n	800344c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	601a      	str	r2, [r3, #0]
}
 800348a:	bf00      	nop
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6892      	ldr	r2, [r2, #8]
 80034aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6852      	ldr	r2, [r2, #4]
 80034b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d103      	bne.n	80034c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	1e5a      	subs	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr
	...

080034e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10b      	bne.n	8003514 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800350e:	bf00      	nop
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003514:	f001 fffa 	bl	800550c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003520:	68f9      	ldr	r1, [r7, #12]
 8003522:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	441a      	add	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003544:	3b01      	subs	r3, #1
 8003546:	68f9      	ldr	r1, [r7, #12]
 8003548:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	441a      	add	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	22ff      	movs	r2, #255	@ 0xff
 8003558:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	22ff      	movs	r2, #255	@ 0xff
 8003560:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d114      	bne.n	8003594 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01a      	beq.n	80035a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	3310      	adds	r3, #16
 8003576:	4618      	mov	r0, r3
 8003578:	f001 f910 	bl	800479c <xTaskRemoveFromEventList>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d012      	beq.n	80035a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003582:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <xQueueGenericReset+0xd0>)
 8003584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	e009      	b.n	80035a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3310      	adds	r3, #16
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff fef5 	bl	8003388 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	3324      	adds	r3, #36	@ 0x24
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fef0 	bl	8003388 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035a8:	f001 ffe0 	bl	800556c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035ac:	2301      	movs	r3, #1
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08e      	sub	sp, #56	@ 0x38
 80035c0:	af02      	add	r7, sp, #8
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10b      	bne.n	80035e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	e7fd      	b.n	80035e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80035ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f2:	f383 8811 	msr	BASEPRI, r3
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	f3bf 8f4f 	dsb	sy
 80035fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	e7fd      	b.n	8003602 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <xQueueGenericCreateStatic+0x56>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <xQueueGenericCreateStatic+0x5a>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <xQueueGenericCreateStatic+0x5c>
 8003616:	2300      	movs	r3, #0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10b      	bne.n	8003634 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800361c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003620:	f383 8811 	msr	BASEPRI, r3
 8003624:	f3bf 8f6f 	isb	sy
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	623b      	str	r3, [r7, #32]
}
 800362e:	bf00      	nop
 8003630:	bf00      	nop
 8003632:	e7fd      	b.n	8003630 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <xQueueGenericCreateStatic+0x84>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <xQueueGenericCreateStatic+0x88>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <xQueueGenericCreateStatic+0x8a>
 8003644:	2300      	movs	r3, #0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10b      	bne.n	8003662 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800364a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364e:	f383 8811 	msr	BASEPRI, r3
 8003652:	f3bf 8f6f 	isb	sy
 8003656:	f3bf 8f4f 	dsb	sy
 800365a:	61fb      	str	r3, [r7, #28]
}
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	e7fd      	b.n	800365e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003662:	2350      	movs	r3, #80	@ 0x50
 8003664:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b50      	cmp	r3, #80	@ 0x50
 800366a:	d00b      	beq.n	8003684 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800366c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003670:	f383 8811 	msr	BASEPRI, r3
 8003674:	f3bf 8f6f 	isb	sy
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	61bb      	str	r3, [r7, #24]
}
 800367e:	bf00      	nop
 8003680:	bf00      	nop
 8003682:	e7fd      	b.n	8003680 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00d      	beq.n	80036aa <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003696:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	4613      	mov	r3, r2
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	68b9      	ldr	r1, [r7, #8]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f805 	bl	80036b4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80036aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3730      	adds	r7, #48	@ 0x30
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
 80036c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d103      	bne.n	80036d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e002      	b.n	80036d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036e2:	2101      	movs	r1, #1
 80036e4:	69b8      	ldr	r0, [r7, #24]
 80036e6:	f7ff feff 	bl	80034e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08e      	sub	sp, #56	@ 0x38
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800370a:	2300      	movs	r3, #0
 800370c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <xQueueGenericSend+0x34>
	__asm volatile
 8003718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371c:	f383 8811 	msr	BASEPRI, r3
 8003720:	f3bf 8f6f 	isb	sy
 8003724:	f3bf 8f4f 	dsb	sy
 8003728:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800372a:	bf00      	nop
 800372c:	bf00      	nop
 800372e:	e7fd      	b.n	800372c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d103      	bne.n	800373e <xQueueGenericSend+0x42>
 8003736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <xQueueGenericSend+0x46>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <xQueueGenericSend+0x48>
 8003742:	2300      	movs	r3, #0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d10b      	bne.n	8003760 <xQueueGenericSend+0x64>
	__asm volatile
 8003748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374c:	f383 8811 	msr	BASEPRI, r3
 8003750:	f3bf 8f6f 	isb	sy
 8003754:	f3bf 8f4f 	dsb	sy
 8003758:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800375a:	bf00      	nop
 800375c:	bf00      	nop
 800375e:	e7fd      	b.n	800375c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2b02      	cmp	r3, #2
 8003764:	d103      	bne.n	800376e <xQueueGenericSend+0x72>
 8003766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <xQueueGenericSend+0x76>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <xQueueGenericSend+0x78>
 8003772:	2300      	movs	r3, #0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10b      	bne.n	8003790 <xQueueGenericSend+0x94>
	__asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	623b      	str	r3, [r7, #32]
}
 800378a:	bf00      	nop
 800378c:	bf00      	nop
 800378e:	e7fd      	b.n	800378c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003790:	f001 f9c8 	bl	8004b24 <xTaskGetSchedulerState>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <xQueueGenericSend+0xa4>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <xQueueGenericSend+0xa8>
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <xQueueGenericSend+0xaa>
 80037a4:	2300      	movs	r3, #0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10b      	bne.n	80037c2 <xQueueGenericSend+0xc6>
	__asm volatile
 80037aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ae:	f383 8811 	msr	BASEPRI, r3
 80037b2:	f3bf 8f6f 	isb	sy
 80037b6:	f3bf 8f4f 	dsb	sy
 80037ba:	61fb      	str	r3, [r7, #28]
}
 80037bc:	bf00      	nop
 80037be:	bf00      	nop
 80037c0:	e7fd      	b.n	80037be <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037c2:	f001 fea3 	bl	800550c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <xQueueGenericSend+0xdc>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d129      	bne.n	800382c <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037de:	f000 fa0d 	bl	8003bfc <prvCopyDataToQueue>
 80037e2:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d010      	beq.n	800380e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ee:	3324      	adds	r3, #36	@ 0x24
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 ffd3 	bl	800479c <xTaskRemoveFromEventList>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d013      	beq.n	8003824 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037fc:	4b3f      	ldr	r3, [pc, #252]	@ (80038fc <xQueueGenericSend+0x200>)
 80037fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	e00a      	b.n	8003824 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800380e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003814:	4b39      	ldr	r3, [pc, #228]	@ (80038fc <xQueueGenericSend+0x200>)
 8003816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003824:	f001 fea2 	bl	800556c <vPortExitCritical>
				return pdPASS;
 8003828:	2301      	movs	r3, #1
 800382a:	e063      	b.n	80038f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003832:	f001 fe9b 	bl	800556c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003836:	2300      	movs	r3, #0
 8003838:	e05c      	b.n	80038f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800383a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	4618      	mov	r0, r3
 8003846:	f001 f80d 	bl	8004864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800384a:	2301      	movs	r3, #1
 800384c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800384e:	f001 fe8d 	bl	800556c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003852:	f000 fd79 	bl	8004348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003856:	f001 fe59 	bl	800550c <vPortEnterCritical>
 800385a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003860:	b25b      	sxtb	r3, r3
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d103      	bne.n	8003870 <xQueueGenericSend+0x174>
 8003868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003872:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003876:	b25b      	sxtb	r3, r3
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d103      	bne.n	8003886 <xQueueGenericSend+0x18a>
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003886:	f001 fe71 	bl	800556c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800388a:	1d3a      	adds	r2, r7, #4
 800388c:	f107 0314 	add.w	r3, r7, #20
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fffc 	bl	8004890 <xTaskCheckForTimeOut>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d124      	bne.n	80038e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800389e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038a0:	f000 faa4 	bl	8003dec <prvIsQueueFull>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d018      	beq.n	80038dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	3310      	adds	r3, #16
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 ff20 	bl	80046f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80038b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038ba:	f000 fa2f 	bl	8003d1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80038be:	f000 fd51 	bl	8004364 <xTaskResumeAll>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f47f af7c 	bne.w	80037c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80038ca:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <xQueueGenericSend+0x200>)
 80038cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	f3bf 8f4f 	dsb	sy
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	e772      	b.n	80037c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038de:	f000 fa1d 	bl	8003d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038e2:	f000 fd3f 	bl	8004364 <xTaskResumeAll>
 80038e6:	e76c      	b.n	80037c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038ea:	f000 fa17 	bl	8003d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ee:	f000 fd39 	bl	8004364 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038f2:	2300      	movs	r3, #0
		}
	}
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3738      	adds	r7, #56	@ 0x38
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	e000ed04 	.word	0xe000ed04

08003900 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08e      	sub	sp, #56	@ 0x38
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <xQueueGenericSendFromISR+0x3e>
 8003936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <xQueueGenericSendFromISR+0x42>
 800393e:	2301      	movs	r3, #1
 8003940:	e000      	b.n	8003944 <xQueueGenericSendFromISR+0x44>
 8003942:	2300      	movs	r3, #0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10b      	bne.n	8003960 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394c:	f383 8811 	msr	BASEPRI, r3
 8003950:	f3bf 8f6f 	isb	sy
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	623b      	str	r3, [r7, #32]
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	e7fd      	b.n	800395c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	2b02      	cmp	r3, #2
 8003964:	d103      	bne.n	800396e <xQueueGenericSendFromISR+0x6e>
 8003966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <xQueueGenericSendFromISR+0x72>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <xQueueGenericSendFromISR+0x74>
 8003972:	2300      	movs	r3, #0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61fb      	str	r3, [r7, #28]
}
 800398a:	bf00      	nop
 800398c:	bf00      	nop
 800398e:	e7fd      	b.n	800398c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003990:	f001 fe7e 	bl	8005690 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003994:	f3ef 8211 	mrs	r2, BASEPRI
 8003998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61ba      	str	r2, [r7, #24]
 80039aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d302      	bcc.n	80039c2 <xQueueGenericSendFromISR+0xc2>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d12c      	bne.n	8003a1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039d2:	f000 f913 	bl	8003bfc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039de:	d112      	bne.n	8003a06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d016      	beq.n	8003a16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ea:	3324      	adds	r3, #36	@ 0x24
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 fed5 	bl	800479c <xTaskRemoveFromEventList>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00e      	beq.n	8003a16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	e007      	b.n	8003a16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	b25a      	sxtb	r2, r3
 8003a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003a16:	2301      	movs	r3, #1
 8003a18:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003a1a:	e001      	b.n	8003a20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a22:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3738      	adds	r7, #56	@ 0x38
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08c      	sub	sp, #48	@ 0x30
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a44:	2300      	movs	r3, #0
 8003a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <xQueueReceive+0x32>
	__asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	623b      	str	r3, [r7, #32]
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	e7fd      	b.n	8003a66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <xQueueReceive+0x40>
 8003a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <xQueueReceive+0x44>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <xQueueReceive+0x46>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10b      	bne.n	8003a9a <xQueueReceive+0x62>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	61fb      	str	r3, [r7, #28]
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	e7fd      	b.n	8003a96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a9a:	f001 f843 	bl	8004b24 <xTaskGetSchedulerState>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d102      	bne.n	8003aaa <xQueueReceive+0x72>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <xQueueReceive+0x76>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <xQueueReceive+0x78>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10b      	bne.n	8003acc <xQueueReceive+0x94>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab8:	f383 8811 	msr	BASEPRI, r3
 8003abc:	f3bf 8f6f 	isb	sy
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	61bb      	str	r3, [r7, #24]
}
 8003ac6:	bf00      	nop
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003acc:	f001 fd1e 	bl	800550c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d01f      	beq.n	8003b1c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003adc:	68b9      	ldr	r1, [r7, #8]
 8003ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ae0:	f000 f8f6 	bl	8003cd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	1e5a      	subs	r2, r3, #1
 8003ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00f      	beq.n	8003b14 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af6:	3310      	adds	r3, #16
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fe4f 	bl	800479c <xTaskRemoveFromEventList>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003b04:	4b3c      	ldr	r3, [pc, #240]	@ (8003bf8 <xQueueReceive+0x1c0>)
 8003b06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	f3bf 8f4f 	dsb	sy
 8003b10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003b14:	f001 fd2a 	bl	800556c <vPortExitCritical>
				return pdPASS;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e069      	b.n	8003bf0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d103      	bne.n	8003b2a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b22:	f001 fd23 	bl	800556c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e062      	b.n	8003bf0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b30:	f107 0310 	add.w	r3, r7, #16
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fe95 	bl	8004864 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b3e:	f001 fd15 	bl	800556c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b42:	f000 fc01 	bl	8004348 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b46:	f001 fce1 	bl	800550c <vPortEnterCritical>
 8003b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d103      	bne.n	8003b60 <xQueueReceive+0x128>
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b66:	b25b      	sxtb	r3, r3
 8003b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6c:	d103      	bne.n	8003b76 <xQueueReceive+0x13e>
 8003b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b76:	f001 fcf9 	bl	800556c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b7a:	1d3a      	adds	r2, r7, #4
 8003b7c:	f107 0310 	add.w	r3, r7, #16
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fe84 	bl	8004890 <xTaskCheckForTimeOut>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d123      	bne.n	8003bd6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b90:	f000 f916 	bl	8003dc0 <prvIsQueueEmpty>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d017      	beq.n	8003bca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9c:	3324      	adds	r3, #36	@ 0x24
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 fda8 	bl	80046f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ba8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003baa:	f000 f8b7 	bl	8003d1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003bae:	f000 fbd9 	bl	8004364 <xTaskResumeAll>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d189      	bne.n	8003acc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf8 <xQueueReceive+0x1c0>)
 8003bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	e780      	b.n	8003acc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bcc:	f000 f8a6 	bl	8003d1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bd0:	f000 fbc8 	bl	8004364 <xTaskResumeAll>
 8003bd4:	e77a      	b.n	8003acc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bd8:	f000 f8a0 	bl	8003d1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bdc:	f000 fbc2 	bl	8004364 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003be0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003be2:	f000 f8ed 	bl	8003dc0 <prvIsQueueEmpty>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f43f af6f 	beq.w	8003acc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3730      	adds	r7, #48	@ 0x30
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	e000ed04 	.word	0xe000ed04

08003bfc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10d      	bne.n	8003c36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d14d      	bne.n	8003cbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 ff9a 	bl	8004b60 <xTaskPriorityDisinherit>
 8003c2c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	605a      	str	r2, [r3, #4]
 8003c34:	e043      	b.n	8003cbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d119      	bne.n	8003c70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6898      	ldr	r0, [r3, #8]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c44:	461a      	mov	r2, r3
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	f001 ff94 	bl	8005b74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	441a      	add	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d32b      	bcc.n	8003cbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	609a      	str	r2, [r3, #8]
 8003c6e:	e026      	b.n	8003cbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68d8      	ldr	r0, [r3, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c78:	461a      	mov	r2, r3
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	f001 ff7a 	bl	8005b74 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	425b      	negs	r3, r3
 8003c8a:	441a      	add	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68da      	ldr	r2, [r3, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d207      	bcs.n	8003cac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	425b      	negs	r3, r3
 8003ca6:	441a      	add	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d105      	bne.n	8003cbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003cc6:	697b      	ldr	r3, [r7, #20]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3718      	adds	r7, #24
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d018      	beq.n	8003d14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	441a      	add	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d303      	bcc.n	8003d04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68d9      	ldr	r1, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6838      	ldr	r0, [r7, #0]
 8003d10:	f001 ff30 	bl	8005b74 <memcpy>
	}
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d24:	f001 fbf2 	bl	800550c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d30:	e011      	b.n	8003d56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d012      	beq.n	8003d60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3324      	adds	r3, #36	@ 0x24
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 fd2c 	bl	800479c <xTaskRemoveFromEventList>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d4a:	f000 fe05 	bl	8004958 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	dce9      	bgt.n	8003d32 <prvUnlockQueue+0x16>
 8003d5e:	e000      	b.n	8003d62 <prvUnlockQueue+0x46>
					break;
 8003d60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	22ff      	movs	r2, #255	@ 0xff
 8003d66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003d6a:	f001 fbff 	bl	800556c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d6e:	f001 fbcd 	bl	800550c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d7a:	e011      	b.n	8003da0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d012      	beq.n	8003daa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3310      	adds	r3, #16
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fd07 	bl	800479c <xTaskRemoveFromEventList>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d94:	f000 fde0 	bl	8004958 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d98:	7bbb      	ldrb	r3, [r7, #14]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003da0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	dce9      	bgt.n	8003d7c <prvUnlockQueue+0x60>
 8003da8:	e000      	b.n	8003dac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003daa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	22ff      	movs	r2, #255	@ 0xff
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003db4:	f001 fbda 	bl	800556c <vPortExitCritical>
}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dc8:	f001 fba0 	bl	800550c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d102      	bne.n	8003dda <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	e001      	b.n	8003dde <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dde:	f001 fbc5 	bl	800556c <vPortExitCritical>

	return xReturn;
 8003de2:	68fb      	ldr	r3, [r7, #12]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003df4:	f001 fb8a 	bl	800550c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d102      	bne.n	8003e0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003e04:	2301      	movs	r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e001      	b.n	8003e0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003e0e:	f001 fbad 	bl	800556c <vPortExitCritical>

	return xReturn;
 8003e12:	68fb      	ldr	r3, [r7, #12]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e014      	b.n	8003e56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e2c:	4a0e      	ldr	r2, [pc, #56]	@ (8003e68 <vQueueAddToRegistry+0x4c>)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e38:	490b      	ldr	r1, [pc, #44]	@ (8003e68 <vQueueAddToRegistry+0x4c>)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e42:	4a09      	ldr	r2, [pc, #36]	@ (8003e68 <vQueueAddToRegistry+0x4c>)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	4413      	add	r3, r2
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e4e:	e006      	b.n	8003e5e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3301      	adds	r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b07      	cmp	r3, #7
 8003e5a:	d9e7      	bls.n	8003e2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr
 8003e68:	200008b4 	.word	0x200008b4

08003e6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e7c:	f001 fb46 	bl	800550c <vPortEnterCritical>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d103      	bne.n	8003e96 <vQueueWaitForMessageRestricted+0x2a>
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e9c:	b25b      	sxtb	r3, r3
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	d103      	bne.n	8003eac <vQueueWaitForMessageRestricted+0x40>
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eac:	f001 fb5e 	bl	800556c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d106      	bne.n	8003ec6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	3324      	adds	r3, #36	@ 0x24
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f000 fc3f 	bl	8004744 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003ec6:	6978      	ldr	r0, [r7, #20]
 8003ec8:	f7ff ff28 	bl	8003d1c <prvUnlockQueue>
	}
 8003ecc:	bf00      	nop
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08e      	sub	sp, #56	@ 0x38
 8003ed8:	af04      	add	r7, sp, #16
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	623b      	str	r3, [r7, #32]
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	e7fd      	b.n	8003efc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	61fb      	str	r3, [r7, #28]
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	e7fd      	b.n	8003f1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f1e:	235c      	movs	r3, #92	@ 0x5c
 8003f20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	2b5c      	cmp	r3, #92	@ 0x5c
 8003f26:	d00b      	beq.n	8003f40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	61bb      	str	r3, [r7, #24]
}
 8003f3a:	bf00      	nop
 8003f3c:	bf00      	nop
 8003f3e:	e7fd      	b.n	8003f3c <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d01e      	beq.n	8003f84 <xTaskCreateStatic+0xb0>
 8003f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01b      	beq.n	8003f84 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f54:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	2202      	movs	r2, #2
 8003f5a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f5e:	2300      	movs	r3, #0
 8003f60:	9303      	str	r3, [sp, #12]
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	9302      	str	r3, [sp, #8]
 8003f66:	f107 0314 	add.w	r3, r7, #20
 8003f6a:	9301      	str	r3, [sp, #4]
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f850 	bl	800401c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f7e:	f000 f8d5 	bl	800412c <prvAddNewTaskToReadyList>
 8003f82:	e001      	b.n	8003f88 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f88:	697b      	ldr	r3, [r7, #20]
	}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3728      	adds	r7, #40	@ 0x28
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b08c      	sub	sp, #48	@ 0x30
 8003f96:	af04      	add	r7, sp, #16
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f001 fbb2 	bl	8005710 <pvPortMalloc>
 8003fac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00e      	beq.n	8003fd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003fb4:	205c      	movs	r0, #92	@ 0x5c
 8003fb6:	f001 fbab 	bl	8005710 <pvPortMalloc>
 8003fba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fc8:	e005      	b.n	8003fd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fca:	6978      	ldr	r0, [r7, #20]
 8003fcc:	f001 fc68 	bl	80058a0 <vPortFree>
 8003fd0:	e001      	b.n	8003fd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d017      	beq.n	800400c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fe4:	88fa      	ldrh	r2, [r7, #6]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	9303      	str	r3, [sp, #12]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	9302      	str	r3, [sp, #8]
 8003fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ff0:	9301      	str	r3, [sp, #4]
 8003ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f80e 	bl	800401c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004000:	69f8      	ldr	r0, [r7, #28]
 8004002:	f000 f893 	bl	800412c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004006:	2301      	movs	r3, #1
 8004008:	61bb      	str	r3, [r7, #24]
 800400a:	e002      	b.n	8004012 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800400c:	f04f 33ff 	mov.w	r3, #4294967295
 8004010:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004012:	69bb      	ldr	r3, [r7, #24]
	}
 8004014:	4618      	mov	r0, r3
 8004016:	3720      	adds	r7, #32
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af00      	add	r7, sp, #0
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	60b9      	str	r1, [r7, #8]
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800402a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	461a      	mov	r2, r3
 8004034:	21a5      	movs	r1, #165	@ 0xa5
 8004036:	f001 fd69 	bl	8005b0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004044:	3b01      	subs	r3, #1
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f023 0307 	bic.w	r3, r3, #7
 8004052:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00b      	beq.n	8004076 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	617b      	str	r3, [r7, #20]
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	e7fd      	b.n	8004072 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	e012      	b.n	80040a2 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4413      	add	r3, r2
 8004082:	7819      	ldrb	r1, [r3, #0]
 8004084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	4413      	add	r3, r2
 800408a:	3334      	adds	r3, #52	@ 0x34
 800408c:	460a      	mov	r2, r1
 800408e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	4413      	add	r3, r2
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d006      	beq.n	80040aa <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	3301      	adds	r3, #1
 80040a0:	61fb      	str	r3, [r7, #28]
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	2b0f      	cmp	r3, #15
 80040a6:	d9e9      	bls.n	800407c <prvInitialiseNewTask+0x60>
 80040a8:	e000      	b.n	80040ac <prvInitialiseNewTask+0x90>
		{
			break;
 80040aa:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b6:	2b37      	cmp	r3, #55	@ 0x37
 80040b8:	d901      	bls.n	80040be <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040ba:	2337      	movs	r3, #55	@ 0x37
 80040bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	2200      	movs	r2, #0
 80040ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d2:	3304      	adds	r3, #4
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff f976 	bl	80033c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040dc:	3318      	adds	r3, #24
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff f971 	bl	80033c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	2200      	movs	r2, #0
 80040fe:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	68f9      	ldr	r1, [r7, #12]
 800410c:	69b8      	ldr	r0, [r7, #24]
 800410e:	f001 f90b 	bl	8005328 <pxPortInitialiseStack>
 8004112:	4602      	mov	r2, r0
 8004114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004116:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411a:	2b00      	cmp	r3, #0
 800411c:	d002      	beq.n	8004124 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800411e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004122:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004124:	bf00      	nop
 8004126:	3720      	adds	r7, #32
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004134:	f001 f9ea 	bl	800550c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004138:	4b2d      	ldr	r3, [pc, #180]	@ (80041f0 <prvAddNewTaskToReadyList+0xc4>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3301      	adds	r3, #1
 800413e:	4a2c      	ldr	r2, [pc, #176]	@ (80041f0 <prvAddNewTaskToReadyList+0xc4>)
 8004140:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004142:	4b2c      	ldr	r3, [pc, #176]	@ (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800414a:	4a2a      	ldr	r2, [pc, #168]	@ (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004150:	4b27      	ldr	r3, [pc, #156]	@ (80041f0 <prvAddNewTaskToReadyList+0xc4>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d110      	bne.n	800417a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004158:	f000 fc22 	bl	80049a0 <prvInitialiseTaskLists>
 800415c:	e00d      	b.n	800417a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800415e:	4b26      	ldr	r3, [pc, #152]	@ (80041f8 <prvAddNewTaskToReadyList+0xcc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004166:	4b23      	ldr	r3, [pc, #140]	@ (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	429a      	cmp	r2, r3
 8004172:	d802      	bhi.n	800417a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004174:	4a1f      	ldr	r2, [pc, #124]	@ (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800417a:	4b20      	ldr	r3, [pc, #128]	@ (80041fc <prvAddNewTaskToReadyList+0xd0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	4a1e      	ldr	r2, [pc, #120]	@ (80041fc <prvAddNewTaskToReadyList+0xd0>)
 8004182:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004184:	4b1d      	ldr	r3, [pc, #116]	@ (80041fc <prvAddNewTaskToReadyList+0xd0>)
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004190:	4b1b      	ldr	r3, [pc, #108]	@ (8004200 <prvAddNewTaskToReadyList+0xd4>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d903      	bls.n	80041a0 <prvAddNewTaskToReadyList+0x74>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419c:	4a18      	ldr	r2, [pc, #96]	@ (8004200 <prvAddNewTaskToReadyList+0xd4>)
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4a15      	ldr	r2, [pc, #84]	@ (8004204 <prvAddNewTaskToReadyList+0xd8>)
 80041ae:	441a      	add	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3304      	adds	r3, #4
 80041b4:	4619      	mov	r1, r3
 80041b6:	4610      	mov	r0, r2
 80041b8:	f7ff f911 	bl	80033de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041bc:	f001 f9d6 	bl	800556c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041c0:	4b0d      	ldr	r3, [pc, #52]	@ (80041f8 <prvAddNewTaskToReadyList+0xcc>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00e      	beq.n	80041e6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041c8:	4b0a      	ldr	r3, [pc, #40]	@ (80041f4 <prvAddNewTaskToReadyList+0xc8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d207      	bcs.n	80041e6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004208 <prvAddNewTaskToReadyList+0xdc>)
 80041d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000dc8 	.word	0x20000dc8
 80041f4:	200008f4 	.word	0x200008f4
 80041f8:	20000dd4 	.word	0x20000dd4
 80041fc:	20000de4 	.word	0x20000de4
 8004200:	20000dd0 	.word	0x20000dd0
 8004204:	200008f8 	.word	0x200008f8
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d018      	beq.n	8004250 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800421e:	4b14      	ldr	r3, [pc, #80]	@ (8004270 <vTaskDelay+0x64>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00b      	beq.n	800423e <vTaskDelay+0x32>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	60bb      	str	r3, [r7, #8]
}
 8004238:	bf00      	nop
 800423a:	bf00      	nop
 800423c:	e7fd      	b.n	800423a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800423e:	f000 f883 	bl	8004348 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004242:	2100      	movs	r1, #0
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fcfb 	bl	8004c40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800424a:	f000 f88b 	bl	8004364 <xTaskResumeAll>
 800424e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004256:	4b07      	ldr	r3, [pc, #28]	@ (8004274 <vTaskDelay+0x68>)
 8004258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000df0 	.word	0x20000df0
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08a      	sub	sp, #40	@ 0x28
 800427c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004286:	463a      	mov	r2, r7
 8004288:	1d39      	adds	r1, r7, #4
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff f848 	bl	8003324 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004294:	6839      	ldr	r1, [r7, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	9202      	str	r2, [sp, #8]
 800429c:	9301      	str	r3, [sp, #4]
 800429e:	2300      	movs	r3, #0
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	2300      	movs	r3, #0
 80042a4:	460a      	mov	r2, r1
 80042a6:	4922      	ldr	r1, [pc, #136]	@ (8004330 <vTaskStartScheduler+0xb8>)
 80042a8:	4822      	ldr	r0, [pc, #136]	@ (8004334 <vTaskStartScheduler+0xbc>)
 80042aa:	f7ff fe13 	bl	8003ed4 <xTaskCreateStatic>
 80042ae:	4603      	mov	r3, r0
 80042b0:	4a21      	ldr	r2, [pc, #132]	@ (8004338 <vTaskStartScheduler+0xc0>)
 80042b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042b4:	4b20      	ldr	r3, [pc, #128]	@ (8004338 <vTaskStartScheduler+0xc0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
 80042c0:	e001      	b.n	80042c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d102      	bne.n	80042d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042cc:	f000 fd0c 	bl	8004ce8 <xTimerCreateTimerTask>
 80042d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d116      	bne.n	8004306 <vTaskStartScheduler+0x8e>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	613b      	str	r3, [r7, #16]
}
 80042ea:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042ec:	4b13      	ldr	r3, [pc, #76]	@ (800433c <vTaskStartScheduler+0xc4>)
 80042ee:	f04f 32ff 	mov.w	r2, #4294967295
 80042f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042f4:	4b12      	ldr	r3, [pc, #72]	@ (8004340 <vTaskStartScheduler+0xc8>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80042fa:	4b12      	ldr	r3, [pc, #72]	@ (8004344 <vTaskStartScheduler+0xcc>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004300:	f001 f892 	bl	8005428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004304:	e00f      	b.n	8004326 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430c:	d10b      	bne.n	8004326 <vTaskStartScheduler+0xae>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	60fb      	str	r3, [r7, #12]
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	e7fd      	b.n	8004322 <vTaskStartScheduler+0xaa>
}
 8004326:	bf00      	nop
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	08006510 	.word	0x08006510
 8004334:	08004971 	.word	0x08004971
 8004338:	20000dec 	.word	0x20000dec
 800433c:	20000de8 	.word	0x20000de8
 8004340:	20000dd4 	.word	0x20000dd4
 8004344:	20000dcc 	.word	0x20000dcc

08004348 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800434c:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <vTaskSuspendAll+0x18>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3301      	adds	r3, #1
 8004352:	4a03      	ldr	r2, [pc, #12]	@ (8004360 <vTaskSuspendAll+0x18>)
 8004354:	6013      	str	r3, [r2, #0]
}
 8004356:	bf00      	nop
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	20000df0 	.word	0x20000df0

08004364 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004372:	4b42      	ldr	r3, [pc, #264]	@ (800447c <xTaskResumeAll+0x118>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <xTaskResumeAll+0x2e>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	603b      	str	r3, [r7, #0]
}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	e7fd      	b.n	800438e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004392:	f001 f8bb 	bl	800550c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004396:	4b39      	ldr	r3, [pc, #228]	@ (800447c <xTaskResumeAll+0x118>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	3b01      	subs	r3, #1
 800439c:	4a37      	ldr	r2, [pc, #220]	@ (800447c <xTaskResumeAll+0x118>)
 800439e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043a0:	4b36      	ldr	r3, [pc, #216]	@ (800447c <xTaskResumeAll+0x118>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d162      	bne.n	800446e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043a8:	4b35      	ldr	r3, [pc, #212]	@ (8004480 <xTaskResumeAll+0x11c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d05e      	beq.n	800446e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043b0:	e02f      	b.n	8004412 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80043b2:	4b34      	ldr	r3, [pc, #208]	@ (8004484 <xTaskResumeAll+0x120>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3318      	adds	r3, #24
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff f868 	bl	8003494 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff f863 	bl	8003494 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004488 <xTaskResumeAll+0x124>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d903      	bls.n	80043e2 <xTaskResumeAll+0x7e>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043de:	4a2a      	ldr	r2, [pc, #168]	@ (8004488 <xTaskResumeAll+0x124>)
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e6:	4613      	mov	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4a27      	ldr	r2, [pc, #156]	@ (800448c <xTaskResumeAll+0x128>)
 80043f0:	441a      	add	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f7fe fff0 	bl	80033de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004402:	4b23      	ldr	r3, [pc, #140]	@ (8004490 <xTaskResumeAll+0x12c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004408:	429a      	cmp	r2, r3
 800440a:	d302      	bcc.n	8004412 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800440c:	4b21      	ldr	r3, [pc, #132]	@ (8004494 <xTaskResumeAll+0x130>)
 800440e:	2201      	movs	r2, #1
 8004410:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004412:	4b1c      	ldr	r3, [pc, #112]	@ (8004484 <xTaskResumeAll+0x120>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1cb      	bne.n	80043b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004420:	f000 fb5c 	bl	8004adc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004424:	4b1c      	ldr	r3, [pc, #112]	@ (8004498 <xTaskResumeAll+0x134>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d010      	beq.n	8004452 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004430:	f000 f844 	bl	80044bc <xTaskIncrementTick>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800443a:	4b16      	ldr	r3, [pc, #88]	@ (8004494 <xTaskResumeAll+0x130>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3b01      	subs	r3, #1
 8004444:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f1      	bne.n	8004430 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800444c:	4b12      	ldr	r3, [pc, #72]	@ (8004498 <xTaskResumeAll+0x134>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004452:	4b10      	ldr	r3, [pc, #64]	@ (8004494 <xTaskResumeAll+0x130>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d009      	beq.n	800446e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800445a:	2301      	movs	r3, #1
 800445c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800445e:	4b0f      	ldr	r3, [pc, #60]	@ (800449c <xTaskResumeAll+0x138>)
 8004460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800446e:	f001 f87d 	bl	800556c <vPortExitCritical>

	return xAlreadyYielded;
 8004472:	68bb      	ldr	r3, [r7, #8]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000df0 	.word	0x20000df0
 8004480:	20000dc8 	.word	0x20000dc8
 8004484:	20000d88 	.word	0x20000d88
 8004488:	20000dd0 	.word	0x20000dd0
 800448c:	200008f8 	.word	0x200008f8
 8004490:	200008f4 	.word	0x200008f4
 8004494:	20000ddc 	.word	0x20000ddc
 8004498:	20000dd8 	.word	0x20000dd8
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044a6:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <xTaskGetTickCount+0x18>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044ac:	687b      	ldr	r3, [r7, #4]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr
 80044b8:	20000dcc 	.word	0x20000dcc

080044bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044c6:	4b52      	ldr	r3, [pc, #328]	@ (8004610 <xTaskIncrementTick+0x154>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 808f 	bne.w	80045ee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044d0:	4b50      	ldr	r3, [pc, #320]	@ (8004614 <xTaskIncrementTick+0x158>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044d8:	4a4e      	ldr	r2, [pc, #312]	@ (8004614 <xTaskIncrementTick+0x158>)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d121      	bne.n	8004528 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80044e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004618 <xTaskIncrementTick+0x15c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <xTaskIncrementTick+0x4a>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	603b      	str	r3, [r7, #0]
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	e7fd      	b.n	8004502 <xTaskIncrementTick+0x46>
 8004506:	4b44      	ldr	r3, [pc, #272]	@ (8004618 <xTaskIncrementTick+0x15c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	4b43      	ldr	r3, [pc, #268]	@ (800461c <xTaskIncrementTick+0x160>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a41      	ldr	r2, [pc, #260]	@ (8004618 <xTaskIncrementTick+0x15c>)
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	4a41      	ldr	r2, [pc, #260]	@ (800461c <xTaskIncrementTick+0x160>)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b41      	ldr	r3, [pc, #260]	@ (8004620 <xTaskIncrementTick+0x164>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3301      	adds	r3, #1
 8004520:	4a3f      	ldr	r2, [pc, #252]	@ (8004620 <xTaskIncrementTick+0x164>)
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	f000 fada 	bl	8004adc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004528:	4b3e      	ldr	r3, [pc, #248]	@ (8004624 <xTaskIncrementTick+0x168>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	429a      	cmp	r2, r3
 8004530:	d34e      	bcc.n	80045d0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004532:	4b39      	ldr	r3, [pc, #228]	@ (8004618 <xTaskIncrementTick+0x15c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <xTaskIncrementTick+0x84>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <xTaskIncrementTick+0x86>
 8004540:	2300      	movs	r3, #0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d004      	beq.n	8004550 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004546:	4b37      	ldr	r3, [pc, #220]	@ (8004624 <xTaskIncrementTick+0x168>)
 8004548:	f04f 32ff 	mov.w	r2, #4294967295
 800454c:	601a      	str	r2, [r3, #0]
					break;
 800454e:	e03f      	b.n	80045d0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004550:	4b31      	ldr	r3, [pc, #196]	@ (8004618 <xTaskIncrementTick+0x15c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	d203      	bcs.n	8004570 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004568:	4a2e      	ldr	r2, [pc, #184]	@ (8004624 <xTaskIncrementTick+0x168>)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6013      	str	r3, [r2, #0]
						break;
 800456e:	e02f      	b.n	80045d0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	3304      	adds	r3, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f7fe ff8d 	bl	8003494 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457e:	2b00      	cmp	r3, #0
 8004580:	d004      	beq.n	800458c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	3318      	adds	r3, #24
 8004586:	4618      	mov	r0, r3
 8004588:	f7fe ff84 	bl	8003494 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004590:	4b25      	ldr	r3, [pc, #148]	@ (8004628 <xTaskIncrementTick+0x16c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	429a      	cmp	r2, r3
 8004596:	d903      	bls.n	80045a0 <xTaskIncrementTick+0xe4>
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459c:	4a22      	ldr	r2, [pc, #136]	@ (8004628 <xTaskIncrementTick+0x16c>)
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a4:	4613      	mov	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4a1f      	ldr	r2, [pc, #124]	@ (800462c <xTaskIncrementTick+0x170>)
 80045ae:	441a      	add	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	3304      	adds	r3, #4
 80045b4:	4619      	mov	r1, r3
 80045b6:	4610      	mov	r0, r2
 80045b8:	f7fe ff11 	bl	80033de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004630 <xTaskIncrementTick+0x174>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d3b3      	bcc.n	8004532 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80045ca:	2301      	movs	r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045ce:	e7b0      	b.n	8004532 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045d0:	4b17      	ldr	r3, [pc, #92]	@ (8004630 <xTaskIncrementTick+0x174>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d6:	4915      	ldr	r1, [pc, #84]	@ (800462c <xTaskIncrementTick+0x170>)
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d907      	bls.n	80045f8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	e004      	b.n	80045f8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80045ee:	4b11      	ldr	r3, [pc, #68]	@ (8004634 <xTaskIncrementTick+0x178>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3301      	adds	r3, #1
 80045f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004634 <xTaskIncrementTick+0x178>)
 80045f6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80045f8:	4b0f      	ldr	r3, [pc, #60]	@ (8004638 <xTaskIncrementTick+0x17c>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8004600:	2301      	movs	r3, #1
 8004602:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004604:	697b      	ldr	r3, [r7, #20]
}
 8004606:	4618      	mov	r0, r3
 8004608:	3718      	adds	r7, #24
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000df0 	.word	0x20000df0
 8004614:	20000dcc 	.word	0x20000dcc
 8004618:	20000d80 	.word	0x20000d80
 800461c:	20000d84 	.word	0x20000d84
 8004620:	20000de0 	.word	0x20000de0
 8004624:	20000de8 	.word	0x20000de8
 8004628:	20000dd0 	.word	0x20000dd0
 800462c:	200008f8 	.word	0x200008f8
 8004630:	200008f4 	.word	0x200008f4
 8004634:	20000dd8 	.word	0x20000dd8
 8004638:	20000ddc 	.word	0x20000ddc

0800463c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800463c:	b480      	push	{r7}
 800463e:	b085      	sub	sp, #20
 8004640:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004642:	4b28      	ldr	r3, [pc, #160]	@ (80046e4 <vTaskSwitchContext+0xa8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800464a:	4b27      	ldr	r3, [pc, #156]	@ (80046e8 <vTaskSwitchContext+0xac>)
 800464c:	2201      	movs	r2, #1
 800464e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004650:	e042      	b.n	80046d8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004652:	4b25      	ldr	r3, [pc, #148]	@ (80046e8 <vTaskSwitchContext+0xac>)
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004658:	4b24      	ldr	r3, [pc, #144]	@ (80046ec <vTaskSwitchContext+0xb0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	e011      	b.n	8004684 <vTaskSwitchContext+0x48>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10b      	bne.n	800467e <vTaskSwitchContext+0x42>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	607b      	str	r3, [r7, #4]
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e7fd      	b.n	800467a <vTaskSwitchContext+0x3e>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	3b01      	subs	r3, #1
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	491a      	ldr	r1, [pc, #104]	@ (80046f0 <vTaskSwitchContext+0xb4>)
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0e3      	beq.n	8004660 <vTaskSwitchContext+0x24>
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4613      	mov	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	4413      	add	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4a13      	ldr	r2, [pc, #76]	@ (80046f0 <vTaskSwitchContext+0xb4>)
 80046a4:	4413      	add	r3, r2
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	3308      	adds	r3, #8
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d104      	bne.n	80046c8 <vTaskSwitchContext+0x8c>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	605a      	str	r2, [r3, #4]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	4a09      	ldr	r2, [pc, #36]	@ (80046f4 <vTaskSwitchContext+0xb8>)
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4a06      	ldr	r2, [pc, #24]	@ (80046ec <vTaskSwitchContext+0xb0>)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6013      	str	r3, [r2, #0]
}
 80046d8:	bf00      	nop
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	20000df0 	.word	0x20000df0
 80046e8:	20000ddc 	.word	0x20000ddc
 80046ec:	20000dd0 	.word	0x20000dd0
 80046f0:	200008f8 	.word	0x200008f8
 80046f4:	200008f4 	.word	0x200008f4

080046f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10b      	bne.n	8004720 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	60fb      	str	r3, [r7, #12]
}
 800471a:	bf00      	nop
 800471c:	bf00      	nop
 800471e:	e7fd      	b.n	800471c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004720:	4b07      	ldr	r3, [pc, #28]	@ (8004740 <vTaskPlaceOnEventList+0x48>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3318      	adds	r3, #24
 8004726:	4619      	mov	r1, r3
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7fe fe7b 	bl	8003424 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800472e:	2101      	movs	r1, #1
 8004730:	6838      	ldr	r0, [r7, #0]
 8004732:	f000 fa85 	bl	8004c40 <prvAddCurrentTaskToDelayedList>
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	200008f4 	.word	0x200008f4

08004744 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004744:	b580      	push	{r7, lr}
 8004746:	b086      	sub	sp, #24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10b      	bne.n	800476e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	617b      	str	r3, [r7, #20]
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	e7fd      	b.n	800476a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800476e:	4b0a      	ldr	r3, [pc, #40]	@ (8004798 <vTaskPlaceOnEventListRestricted+0x54>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3318      	adds	r3, #24
 8004774:	4619      	mov	r1, r3
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f7fe fe31 	bl	80033de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004782:	f04f 33ff 	mov.w	r3, #4294967295
 8004786:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	68b8      	ldr	r0, [r7, #8]
 800478c:	f000 fa58 	bl	8004c40 <prvAddCurrentTaskToDelayedList>
	}
 8004790:	bf00      	nop
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	200008f4 	.word	0x200008f4

0800479c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10b      	bne.n	80047ca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60fb      	str	r3, [r7, #12]
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	e7fd      	b.n	80047c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	3318      	adds	r3, #24
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fe fe60 	bl	8003494 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047d4:	4b1d      	ldr	r3, [pc, #116]	@ (800484c <xTaskRemoveFromEventList+0xb0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d11d      	bne.n	8004818 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	3304      	adds	r3, #4
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fe fe57 	bl	8003494 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ea:	4b19      	ldr	r3, [pc, #100]	@ (8004850 <xTaskRemoveFromEventList+0xb4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d903      	bls.n	80047fa <xTaskRemoveFromEventList+0x5e>
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f6:	4a16      	ldr	r2, [pc, #88]	@ (8004850 <xTaskRemoveFromEventList+0xb4>)
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4a13      	ldr	r2, [pc, #76]	@ (8004854 <xTaskRemoveFromEventList+0xb8>)
 8004808:	441a      	add	r2, r3
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	3304      	adds	r3, #4
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f7fe fde4 	bl	80033de <vListInsertEnd>
 8004816:	e005      	b.n	8004824 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	3318      	adds	r3, #24
 800481c:	4619      	mov	r1, r3
 800481e:	480e      	ldr	r0, [pc, #56]	@ (8004858 <xTaskRemoveFromEventList+0xbc>)
 8004820:	f7fe fddd 	bl	80033de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004828:	4b0c      	ldr	r3, [pc, #48]	@ (800485c <xTaskRemoveFromEventList+0xc0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482e:	429a      	cmp	r2, r3
 8004830:	d905      	bls.n	800483e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004832:	2301      	movs	r3, #1
 8004834:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004836:	4b0a      	ldr	r3, [pc, #40]	@ (8004860 <xTaskRemoveFromEventList+0xc4>)
 8004838:	2201      	movs	r2, #1
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e001      	b.n	8004842 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004842:	697b      	ldr	r3, [r7, #20]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20000df0 	.word	0x20000df0
 8004850:	20000dd0 	.word	0x20000dd0
 8004854:	200008f8 	.word	0x200008f8
 8004858:	20000d88 	.word	0x20000d88
 800485c:	200008f4 	.word	0x200008f4
 8004860:	20000ddc 	.word	0x20000ddc

08004864 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800486c:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <vTaskInternalSetTimeOutState+0x24>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004874:	4b05      	ldr	r3, [pc, #20]	@ (800488c <vTaskInternalSetTimeOutState+0x28>)
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	605a      	str	r2, [r3, #4]
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	20000de0 	.word	0x20000de0
 800488c:	20000dcc 	.word	0x20000dcc

08004890 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10b      	bne.n	80048b8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	613b      	str	r3, [r7, #16]
}
 80048b2:	bf00      	nop
 80048b4:	bf00      	nop
 80048b6:	e7fd      	b.n	80048b4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10b      	bne.n	80048d6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80048be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	60fb      	str	r3, [r7, #12]
}
 80048d0:	bf00      	nop
 80048d2:	bf00      	nop
 80048d4:	e7fd      	b.n	80048d2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80048d6:	f000 fe19 	bl	800550c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048da:	4b1d      	ldr	r3, [pc, #116]	@ (8004950 <xTaskCheckForTimeOut+0xc0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	d102      	bne.n	80048fa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048f4:	2300      	movs	r3, #0
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e023      	b.n	8004942 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b15      	ldr	r3, [pc, #84]	@ (8004954 <xTaskCheckForTimeOut+0xc4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d007      	beq.n	8004916 <xTaskCheckForTimeOut+0x86>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	69ba      	ldr	r2, [r7, #24]
 800490c:	429a      	cmp	r2, r3
 800490e:	d302      	bcc.n	8004916 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004910:	2301      	movs	r3, #1
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	e015      	b.n	8004942 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	429a      	cmp	r2, r3
 800491e:	d20b      	bcs.n	8004938 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff ff99 	bl	8004864 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	e004      	b.n	8004942 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2200      	movs	r2, #0
 800493c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800493e:	2301      	movs	r3, #1
 8004940:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004942:	f000 fe13 	bl	800556c <vPortExitCritical>

	return xReturn;
 8004946:	69fb      	ldr	r3, [r7, #28]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000dcc 	.word	0x20000dcc
 8004954:	20000de0 	.word	0x20000de0

08004958 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800495c:	4b03      	ldr	r3, [pc, #12]	@ (800496c <vTaskMissedYield+0x14>)
 800495e:	2201      	movs	r2, #1
 8004960:	601a      	str	r2, [r3, #0]
}
 8004962:	bf00      	nop
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20000ddc 	.word	0x20000ddc

08004970 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004978:	f000 f852 	bl	8004a20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800497c:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <prvIdleTask+0x28>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d9f9      	bls.n	8004978 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004984:	4b05      	ldr	r3, [pc, #20]	@ (800499c <prvIdleTask+0x2c>)
 8004986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	f3bf 8f4f 	dsb	sy
 8004990:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004994:	e7f0      	b.n	8004978 <prvIdleTask+0x8>
 8004996:	bf00      	nop
 8004998:	200008f8 	.word	0x200008f8
 800499c:	e000ed04 	.word	0xe000ed04

080049a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049a6:	2300      	movs	r3, #0
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	e00c      	b.n	80049c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4a12      	ldr	r2, [pc, #72]	@ (8004a00 <prvInitialiseTaskLists+0x60>)
 80049b8:	4413      	add	r3, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fce4 	bl	8003388 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	3301      	adds	r3, #1
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b37      	cmp	r3, #55	@ 0x37
 80049ca:	d9ef      	bls.n	80049ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049cc:	480d      	ldr	r0, [pc, #52]	@ (8004a04 <prvInitialiseTaskLists+0x64>)
 80049ce:	f7fe fcdb 	bl	8003388 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049d2:	480d      	ldr	r0, [pc, #52]	@ (8004a08 <prvInitialiseTaskLists+0x68>)
 80049d4:	f7fe fcd8 	bl	8003388 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049d8:	480c      	ldr	r0, [pc, #48]	@ (8004a0c <prvInitialiseTaskLists+0x6c>)
 80049da:	f7fe fcd5 	bl	8003388 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049de:	480c      	ldr	r0, [pc, #48]	@ (8004a10 <prvInitialiseTaskLists+0x70>)
 80049e0:	f7fe fcd2 	bl	8003388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049e4:	480b      	ldr	r0, [pc, #44]	@ (8004a14 <prvInitialiseTaskLists+0x74>)
 80049e6:	f7fe fccf 	bl	8003388 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <prvInitialiseTaskLists+0x78>)
 80049ec:	4a05      	ldr	r2, [pc, #20]	@ (8004a04 <prvInitialiseTaskLists+0x64>)
 80049ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049f0:	4b0a      	ldr	r3, [pc, #40]	@ (8004a1c <prvInitialiseTaskLists+0x7c>)
 80049f2:	4a05      	ldr	r2, [pc, #20]	@ (8004a08 <prvInitialiseTaskLists+0x68>)
 80049f4:	601a      	str	r2, [r3, #0]
}
 80049f6:	bf00      	nop
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	200008f8 	.word	0x200008f8
 8004a04:	20000d58 	.word	0x20000d58
 8004a08:	20000d6c 	.word	0x20000d6c
 8004a0c:	20000d88 	.word	0x20000d88
 8004a10:	20000d9c 	.word	0x20000d9c
 8004a14:	20000db4 	.word	0x20000db4
 8004a18:	20000d80 	.word	0x20000d80
 8004a1c:	20000d84 	.word	0x20000d84

08004a20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a26:	e019      	b.n	8004a5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a28:	f000 fd70 	bl	800550c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004a2c:	4b10      	ldr	r3, [pc, #64]	@ (8004a70 <prvCheckTasksWaitingTermination+0x50>)
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fe fd2b 	bl	8003494 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <prvCheckTasksWaitingTermination+0x54>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	4a0b      	ldr	r2, [pc, #44]	@ (8004a74 <prvCheckTasksWaitingTermination+0x54>)
 8004a46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a48:	4b0b      	ldr	r3, [pc, #44]	@ (8004a78 <prvCheckTasksWaitingTermination+0x58>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004a78 <prvCheckTasksWaitingTermination+0x58>)
 8004a50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a52:	f000 fd8b 	bl	800556c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f810 	bl	8004a7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a5c:	4b06      	ldr	r3, [pc, #24]	@ (8004a78 <prvCheckTasksWaitingTermination+0x58>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e1      	bne.n	8004a28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000d9c 	.word	0x20000d9c
 8004a74:	20000dc8 	.word	0x20000dc8
 8004a78:	20000db0 	.word	0x20000db0

08004a7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d108      	bne.n	8004aa0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 ff04 	bl	80058a0 <vPortFree>
				vPortFree( pxTCB );
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 ff01 	bl	80058a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a9e:	e019      	b.n	8004ad4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d103      	bne.n	8004ab2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fef8 	bl	80058a0 <vPortFree>
	}
 8004ab0:	e010      	b.n	8004ad4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d00b      	beq.n	8004ad4 <prvDeleteTCB+0x58>
	__asm volatile
 8004abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac0:	f383 8811 	msr	BASEPRI, r3
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	f3bf 8f4f 	dsb	sy
 8004acc:	60fb      	str	r3, [r7, #12]
}
 8004ace:	bf00      	nop
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <prvDeleteTCB+0x54>
	}
 8004ad4:	bf00      	nop
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b1c <prvResetNextTaskUnblockTime+0x40>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <prvResetNextTaskUnblockTime+0x14>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <prvResetNextTaskUnblockTime+0x16>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d004      	beq.n	8004b00 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004af6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <prvResetNextTaskUnblockTime+0x44>)
 8004af8:	f04f 32ff 	mov.w	r2, #4294967295
 8004afc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004afe:	e008      	b.n	8004b12 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b00:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <prvResetNextTaskUnblockTime+0x40>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	4a04      	ldr	r2, [pc, #16]	@ (8004b20 <prvResetNextTaskUnblockTime+0x44>)
 8004b10:	6013      	str	r3, [r2, #0]
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr
 8004b1c:	20000d80 	.word	0x20000d80
 8004b20:	20000de8 	.word	0x20000de8

08004b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004b58 <xTaskGetSchedulerState+0x34>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d102      	bne.n	8004b38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b32:	2301      	movs	r3, #1
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	e008      	b.n	8004b4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b38:	4b08      	ldr	r3, [pc, #32]	@ (8004b5c <xTaskGetSchedulerState+0x38>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d102      	bne.n	8004b46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b40:	2302      	movs	r3, #2
 8004b42:	607b      	str	r3, [r7, #4]
 8004b44:	e001      	b.n	8004b4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b46:	2300      	movs	r3, #0
 8004b48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b4a:	687b      	ldr	r3, [r7, #4]
	}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bc80      	pop	{r7}
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20000dd4 	.word	0x20000dd4
 8004b5c:	20000df0 	.word	0x20000df0

08004b60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d058      	beq.n	8004c28 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b76:	4b2f      	ldr	r3, [pc, #188]	@ (8004c34 <xTaskPriorityDisinherit+0xd4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d00b      	beq.n	8004b98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	60fb      	str	r3, [r7, #12]
}
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10b      	bne.n	8004bb8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60bb      	str	r3, [r7, #8]
}
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	e7fd      	b.n	8004bb4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbc:	1e5a      	subs	r2, r3, #1
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d02c      	beq.n	8004c28 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d128      	bne.n	8004c28 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fe fc5a 	bl	8003494 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	@ (8004c38 <xTaskPriorityDisinherit+0xd8>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d903      	bls.n	8004c08 <xTaskPriorityDisinherit+0xa8>
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	4a0c      	ldr	r2, [pc, #48]	@ (8004c38 <xTaskPriorityDisinherit+0xd8>)
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4a09      	ldr	r2, [pc, #36]	@ (8004c3c <xTaskPriorityDisinherit+0xdc>)
 8004c16:	441a      	add	r2, r3
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	3304      	adds	r3, #4
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f7fe fbdd 	bl	80033de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c28:	697b      	ldr	r3, [r7, #20]
	}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	200008f4 	.word	0x200008f4
 8004c38:	20000dd0 	.word	0x20000dd0
 8004c3c:	200008f8 	.word	0x200008f8

08004c40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c4a:	4b21      	ldr	r3, [pc, #132]	@ (8004cd0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c50:	4b20      	ldr	r3, [pc, #128]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3304      	adds	r3, #4
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe fc1c 	bl	8003494 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c62:	d10a      	bne.n	8004c7a <prvAddCurrentTaskToDelayedList+0x3a>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	4619      	mov	r1, r3
 8004c72:	4819      	ldr	r0, [pc, #100]	@ (8004cd8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c74:	f7fe fbb3 	bl	80033de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c78:	e026      	b.n	8004cc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4413      	add	r3, r2
 8004c80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c82:	4b14      	ldr	r3, [pc, #80]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d209      	bcs.n	8004ca6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c92:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f7fe fbc0 	bl	8003424 <vListInsert>
}
 8004ca4:	e010      	b.n	8004cc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3304      	adds	r3, #4
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7fe fbb6 	bl	8003424 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d202      	bcs.n	8004cc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cc2:	4a08      	ldr	r2, [pc, #32]	@ (8004ce4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	6013      	str	r3, [r2, #0]
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000dcc 	.word	0x20000dcc
 8004cd4:	200008f4 	.word	0x200008f4
 8004cd8:	20000db4 	.word	0x20000db4
 8004cdc:	20000d84 	.word	0x20000d84
 8004ce0:	20000d80 	.word	0x20000d80
 8004ce4:	20000de8 	.word	0x20000de8

08004ce8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cf2:	f000 fad9 	bl	80052a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8004d6c <xTimerCreateTimerTask+0x84>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d021      	beq.n	8004d42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004d06:	1d3a      	adds	r2, r7, #4
 8004d08:	f107 0108 	add.w	r1, r7, #8
 8004d0c:	f107 030c 	add.w	r3, r7, #12
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe fb1f 	bl	8003354 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	9202      	str	r2, [sp, #8]
 8004d1e:	9301      	str	r3, [sp, #4]
 8004d20:	2302      	movs	r3, #2
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2300      	movs	r3, #0
 8004d26:	460a      	mov	r2, r1
 8004d28:	4911      	ldr	r1, [pc, #68]	@ (8004d70 <xTimerCreateTimerTask+0x88>)
 8004d2a:	4812      	ldr	r0, [pc, #72]	@ (8004d74 <xTimerCreateTimerTask+0x8c>)
 8004d2c:	f7ff f8d2 	bl	8003ed4 <xTaskCreateStatic>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4a11      	ldr	r2, [pc, #68]	@ (8004d78 <xTimerCreateTimerTask+0x90>)
 8004d34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d36:	4b10      	ldr	r3, [pc, #64]	@ (8004d78 <xTimerCreateTimerTask+0x90>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10b      	bne.n	8004d60 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	613b      	str	r3, [r7, #16]
}
 8004d5a:	bf00      	nop
 8004d5c:	bf00      	nop
 8004d5e:	e7fd      	b.n	8004d5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d60:	697b      	ldr	r3, [r7, #20]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000e24 	.word	0x20000e24
 8004d70:	08006518 	.word	0x08006518
 8004d74:	08004e9d 	.word	0x08004e9d
 8004d78:	20000e28 	.word	0x20000e28

08004d7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08a      	sub	sp, #40	@ 0x28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <xTimerGenericCommand+0x30>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	623b      	str	r3, [r7, #32]
}
 8004da6:	bf00      	nop
 8004da8:	bf00      	nop
 8004daa:	e7fd      	b.n	8004da8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004dac:	4b19      	ldr	r3, [pc, #100]	@ (8004e14 <xTimerGenericCommand+0x98>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02a      	beq.n	8004e0a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	dc18      	bgt.n	8004df8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004dc6:	f7ff fead 	bl	8004b24 <xTaskGetSchedulerState>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d109      	bne.n	8004de4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dd0:	4b10      	ldr	r3, [pc, #64]	@ (8004e14 <xTimerGenericCommand+0x98>)
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	f107 0110 	add.w	r1, r7, #16
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ddc:	f7fe fc8e 	bl	80036fc <xQueueGenericSend>
 8004de0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004de2:	e012      	b.n	8004e0a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004de4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <xTimerGenericCommand+0x98>)
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	f107 0110 	add.w	r1, r7, #16
 8004dec:	2300      	movs	r3, #0
 8004dee:	2200      	movs	r2, #0
 8004df0:	f7fe fc84 	bl	80036fc <xQueueGenericSend>
 8004df4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004df6:	e008      	b.n	8004e0a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004df8:	4b06      	ldr	r3, [pc, #24]	@ (8004e14 <xTimerGenericCommand+0x98>)
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	f107 0110 	add.w	r1, r7, #16
 8004e00:	2300      	movs	r3, #0
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	f7fe fd7c 	bl	8003900 <xQueueGenericSendFromISR>
 8004e08:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3728      	adds	r7, #40	@ 0x28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000e24 	.word	0x20000e24

08004e18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e22:	4b1d      	ldr	r3, [pc, #116]	@ (8004e98 <prvProcessExpiredTimer+0x80>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	4618      	mov	r0, r3
 8004e32:	f7fe fb2f 	bl	8003494 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d123      	bne.n	8004e86 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	18d1      	adds	r1, r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	6978      	ldr	r0, [r7, #20]
 8004e4c:	f000 f8cc 	bl	8004fe8 <prvInsertTimerInActiveList>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d017      	beq.n	8004e86 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e56:	2300      	movs	r3, #0
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	2100      	movs	r1, #0
 8004e60:	6978      	ldr	r0, [r7, #20]
 8004e62:	f7ff ff8b 	bl	8004d7c <xTimerGenericCommand>
 8004e66:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10b      	bne.n	8004e86 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e72:	f383 8811 	msr	BASEPRI, r3
 8004e76:	f3bf 8f6f 	isb	sy
 8004e7a:	f3bf 8f4f 	dsb	sy
 8004e7e:	60fb      	str	r3, [r7, #12]
}
 8004e80:	bf00      	nop
 8004e82:	bf00      	nop
 8004e84:	e7fd      	b.n	8004e82 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	6978      	ldr	r0, [r7, #20]
 8004e8c:	4798      	blx	r3
}
 8004e8e:	bf00      	nop
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000e1c 	.word	0x20000e1c

08004e9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ea4:	f107 0308 	add.w	r3, r7, #8
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 f859 	bl	8004f60 <prvGetNextExpireTime>
 8004eae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f805 	bl	8004ec4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004eba:	f000 f8d7 	bl	800506c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ebe:	bf00      	nop
 8004ec0:	e7f0      	b.n	8004ea4 <prvTimerTask+0x8>
	...

08004ec4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ece:	f7ff fa3b 	bl	8004348 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ed2:	f107 0308 	add.w	r3, r7, #8
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f866 	bl	8004fa8 <prvSampleTimeNow>
 8004edc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d130      	bne.n	8004f46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d10a      	bne.n	8004f00 <prvProcessTimerOrBlockTask+0x3c>
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d806      	bhi.n	8004f00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ef2:	f7ff fa37 	bl	8004364 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ef6:	68f9      	ldr	r1, [r7, #12]
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff ff8d 	bl	8004e18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004efe:	e024      	b.n	8004f4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d008      	beq.n	8004f18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f06:	4b13      	ldr	r3, [pc, #76]	@ (8004f54 <prvProcessTimerOrBlockTask+0x90>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f18:	4b0f      	ldr	r3, [pc, #60]	@ (8004f58 <prvProcessTimerOrBlockTask+0x94>)
 8004f1a:	6818      	ldr	r0, [r3, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	683a      	ldr	r2, [r7, #0]
 8004f24:	4619      	mov	r1, r3
 8004f26:	f7fe ffa1 	bl	8003e6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f2a:	f7ff fa1b 	bl	8004364 <xTaskResumeAll>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f34:	4b09      	ldr	r3, [pc, #36]	@ (8004f5c <prvProcessTimerOrBlockTask+0x98>)
 8004f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	f3bf 8f6f 	isb	sy
}
 8004f44:	e001      	b.n	8004f4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f46:	f7ff fa0d 	bl	8004364 <xTaskResumeAll>
}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000e20 	.word	0x20000e20
 8004f58:	20000e24 	.word	0x20000e24
 8004f5c:	e000ed04 	.word	0xe000ed04

08004f60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f68:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa4 <prvGetNextExpireTime+0x44>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	bf0c      	ite	eq
 8004f72:	2301      	moveq	r3, #1
 8004f74:	2300      	movne	r3, #0
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f86:	4b07      	ldr	r3, [pc, #28]	@ (8004fa4 <prvGetNextExpireTime+0x44>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	e001      	b.n	8004f96 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f96:	68fb      	ldr	r3, [r7, #12]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20000e1c 	.word	0x20000e1c

08004fa8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fb0:	f7ff fa76 	bl	80044a0 <xTaskGetTickCount>
 8004fb4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe4 <prvSampleTimeNow+0x3c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d205      	bcs.n	8004fcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004fc0:	f000 f910 	bl	80051e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004fd2:	4a04      	ldr	r2, [pc, #16]	@ (8004fe4 <prvSampleTimeNow+0x3c>)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000e2c 	.word	0x20000e2c

08004fe8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	429a      	cmp	r2, r3
 800500c:	d812      	bhi.n	8005034 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	1ad2      	subs	r2, r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	429a      	cmp	r2, r3
 800501a:	d302      	bcc.n	8005022 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800501c:	2301      	movs	r3, #1
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	e01b      	b.n	800505a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005022:	4b10      	ldr	r3, [pc, #64]	@ (8005064 <prvInsertTimerInActiveList+0x7c>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3304      	adds	r3, #4
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f7fe f9f9 	bl	8003424 <vListInsert>
 8005032:	e012      	b.n	800505a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d206      	bcs.n	800504a <prvInsertTimerInActiveList+0x62>
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d302      	bcc.n	800504a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005044:	2301      	movs	r3, #1
 8005046:	617b      	str	r3, [r7, #20]
 8005048:	e007      	b.n	800505a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800504a:	4b07      	ldr	r3, [pc, #28]	@ (8005068 <prvInsertTimerInActiveList+0x80>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3304      	adds	r3, #4
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f7fe f9e5 	bl	8003424 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800505a:	697b      	ldr	r3, [r7, #20]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20000e20 	.word	0x20000e20
 8005068:	20000e1c 	.word	0x20000e1c

0800506c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08e      	sub	sp, #56	@ 0x38
 8005070:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005072:	e0a5      	b.n	80051c0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	da19      	bge.n	80050ae <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800507a:	1d3b      	adds	r3, r7, #4
 800507c:	3304      	adds	r3, #4
 800507e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10b      	bne.n	800509e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	61fb      	str	r3, [r7, #28]
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop
 800509c:	e7fd      	b.n	800509a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800509e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050a4:	6850      	ldr	r0, [r2, #4]
 80050a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050a8:	6892      	ldr	r2, [r2, #8]
 80050aa:	4611      	mov	r1, r2
 80050ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f2c0 8085 	blt.w	80051c0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	3304      	adds	r3, #4
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fe f9e4 	bl	8003494 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050cc:	463b      	mov	r3, r7
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff ff6a 	bl	8004fa8 <prvSampleTimeNow>
 80050d4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b09      	cmp	r3, #9
 80050da:	d86c      	bhi.n	80051b6 <prvProcessReceivedCommands+0x14a>
 80050dc:	a201      	add	r2, pc, #4	@ (adr r2, 80050e4 <prvProcessReceivedCommands+0x78>)
 80050de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e2:	bf00      	nop
 80050e4:	0800510d 	.word	0x0800510d
 80050e8:	0800510d 	.word	0x0800510d
 80050ec:	0800510d 	.word	0x0800510d
 80050f0:	080051b7 	.word	0x080051b7
 80050f4:	0800516b 	.word	0x0800516b
 80050f8:	080051a5 	.word	0x080051a5
 80050fc:	0800510d 	.word	0x0800510d
 8005100:	0800510d 	.word	0x0800510d
 8005104:	080051b7 	.word	0x080051b7
 8005108:	0800516b 	.word	0x0800516b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	18d1      	adds	r1, r2, r3
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005118:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800511a:	f7ff ff65 	bl	8004fe8 <prvInsertTimerInActiveList>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d04a      	beq.n	80051ba <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800512a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800512c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d142      	bne.n	80051ba <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005134:	68ba      	ldr	r2, [r7, #8]
 8005136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	441a      	add	r2, r3
 800513c:	2300      	movs	r3, #0
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	2300      	movs	r3, #0
 8005142:	2100      	movs	r1, #0
 8005144:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005146:	f7ff fe19 	bl	8004d7c <xTimerGenericCommand>
 800514a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d133      	bne.n	80051ba <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	61bb      	str	r3, [r7, #24]
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800516e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10b      	bne.n	8005190 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	617b      	str	r3, [r7, #20]
}
 800518a:	bf00      	nop
 800518c:	bf00      	nop
 800518e:	e7fd      	b.n	800518c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	18d1      	adds	r1, r2, r3
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800519e:	f7ff ff23 	bl	8004fe8 <prvInsertTimerInActiveList>
					break;
 80051a2:	e00d      	b.n	80051c0 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80051a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d107      	bne.n	80051be <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 80051ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051b0:	f000 fb76 	bl	80058a0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051b4:	e003      	b.n	80051be <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <prvProcessReceivedCommands+0x154>
					break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <prvProcessReceivedCommands+0x154>
					break;
 80051be:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051c0:	4b07      	ldr	r3, [pc, #28]	@ (80051e0 <prvProcessReceivedCommands+0x174>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	1d39      	adds	r1, r7, #4
 80051c6:	2200      	movs	r2, #0
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fe fc35 	bl	8003a38 <xQueueReceive>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f47f af4f 	bne.w	8005074 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	3730      	adds	r7, #48	@ 0x30
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000e24 	.word	0x20000e24

080051e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051ea:	e046      	b.n	800527a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051ec:	4b2c      	ldr	r3, [pc, #176]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051f6:	4b2a      	ldr	r3, [pc, #168]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	3304      	adds	r3, #4
 8005204:	4618      	mov	r0, r3
 8005206:	f7fe f945 	bl	8003494 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d12f      	bne.n	800527a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4413      	add	r3, r2
 8005222:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	429a      	cmp	r2, r3
 800522a:	d90e      	bls.n	800524a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005238:	4b19      	ldr	r3, [pc, #100]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3304      	adds	r3, #4
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f7fe f8ee 	bl	8003424 <vListInsert>
 8005248:	e017      	b.n	800527a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800524a:	2300      	movs	r3, #0
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	2300      	movs	r3, #0
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	2100      	movs	r1, #0
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f7ff fd91 	bl	8004d7c <xTimerGenericCommand>
 800525a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <prvSwitchTimerLists+0x96>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	603b      	str	r3, [r7, #0]
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	e7fd      	b.n	8005276 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800527a:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1b3      	bne.n	80051ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005284:	4b06      	ldr	r3, [pc, #24]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800528a:	4b06      	ldr	r3, [pc, #24]	@ (80052a4 <prvSwitchTimerLists+0xc0>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a04      	ldr	r2, [pc, #16]	@ (80052a0 <prvSwitchTimerLists+0xbc>)
 8005290:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005292:	4a04      	ldr	r2, [pc, #16]	@ (80052a4 <prvSwitchTimerLists+0xc0>)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	6013      	str	r3, [r2, #0]
}
 8005298:	bf00      	nop
 800529a:	3718      	adds	r7, #24
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000e1c 	.word	0x20000e1c
 80052a4:	20000e20 	.word	0x20000e20

080052a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052ae:	f000 f92d 	bl	800550c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052b2:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d120      	bne.n	80052fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80052ba:	4814      	ldr	r0, [pc, #80]	@ (800530c <prvCheckForValidListAndQueue+0x64>)
 80052bc:	f7fe f864 	bl	8003388 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052c0:	4813      	ldr	r0, [pc, #76]	@ (8005310 <prvCheckForValidListAndQueue+0x68>)
 80052c2:	f7fe f861 	bl	8003388 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052c6:	4b13      	ldr	r3, [pc, #76]	@ (8005314 <prvCheckForValidListAndQueue+0x6c>)
 80052c8:	4a10      	ldr	r2, [pc, #64]	@ (800530c <prvCheckForValidListAndQueue+0x64>)
 80052ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80052cc:	4b12      	ldr	r3, [pc, #72]	@ (8005318 <prvCheckForValidListAndQueue+0x70>)
 80052ce:	4a10      	ldr	r2, [pc, #64]	@ (8005310 <prvCheckForValidListAndQueue+0x68>)
 80052d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80052d2:	2300      	movs	r3, #0
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	4b11      	ldr	r3, [pc, #68]	@ (800531c <prvCheckForValidListAndQueue+0x74>)
 80052d8:	4a11      	ldr	r2, [pc, #68]	@ (8005320 <prvCheckForValidListAndQueue+0x78>)
 80052da:	2110      	movs	r1, #16
 80052dc:	200a      	movs	r0, #10
 80052de:	f7fe f96d 	bl	80035bc <xQueueGenericCreateStatic>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4a08      	ldr	r2, [pc, #32]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052e8:	4b07      	ldr	r3, [pc, #28]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <prvCheckForValidListAndQueue+0x60>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	490b      	ldr	r1, [pc, #44]	@ (8005324 <prvCheckForValidListAndQueue+0x7c>)
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fe fd90 	bl	8003e1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052fc:	f000 f936 	bl	800556c <vPortExitCritical>
}
 8005300:	bf00      	nop
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000e24 	.word	0x20000e24
 800530c:	20000df4 	.word	0x20000df4
 8005310:	20000e08 	.word	0x20000e08
 8005314:	20000e1c 	.word	0x20000e1c
 8005318:	20000e20 	.word	0x20000e20
 800531c:	20000ed0 	.word	0x20000ed0
 8005320:	20000e30 	.word	0x20000e30
 8005324:	08006520 	.word	0x08006520

08005328 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3b04      	subs	r3, #4
 8005338:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b04      	subs	r3, #4
 8005346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f023 0201 	bic.w	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3b04      	subs	r3, #4
 8005356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005358:	4a08      	ldr	r2, [pc, #32]	@ (800537c <pxPortInitialiseStack+0x54>)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3b14      	subs	r3, #20
 8005362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3b20      	subs	r3, #32
 800536e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005370:	68fb      	ldr	r3, [r7, #12]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	08005381 	.word	0x08005381

08005380 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005386:	2300      	movs	r3, #0
 8005388:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800538a:	4b12      	ldr	r3, [pc, #72]	@ (80053d4 <prvTaskExitError+0x54>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d00b      	beq.n	80053ac <prvTaskExitError+0x2c>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	60fb      	str	r3, [r7, #12]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <prvTaskExitError+0x28>
	__asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	60bb      	str	r3, [r7, #8]
}
 80053be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053c0:	bf00      	nop
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0fc      	beq.n	80053c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr
 80053d4:	20000010 	.word	0x20000010
	...

080053e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053e0:	4b07      	ldr	r3, [pc, #28]	@ (8005400 <pxCurrentTCBConst2>)
 80053e2:	6819      	ldr	r1, [r3, #0]
 80053e4:	6808      	ldr	r0, [r1, #0]
 80053e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053ea:	f380 8809 	msr	PSP, r0
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8811 	msr	BASEPRI, r0
 80053fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80053fe:	4770      	bx	lr

08005400 <pxCurrentTCBConst2>:
 8005400:	200008f4 	.word	0x200008f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop

08005408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005408:	4806      	ldr	r0, [pc, #24]	@ (8005424 <prvPortStartFirstTask+0x1c>)
 800540a:	6800      	ldr	r0, [r0, #0]
 800540c:	6800      	ldr	r0, [r0, #0]
 800540e:	f380 8808 	msr	MSP, r0
 8005412:	b662      	cpsie	i
 8005414:	b661      	cpsie	f
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	df00      	svc	0
 8005420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005422:	bf00      	nop
 8005424:	e000ed08 	.word	0xe000ed08

08005428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800542e:	4b32      	ldr	r3, [pc, #200]	@ (80054f8 <xPortStartScheduler+0xd0>)
 8005430:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	22ff      	movs	r2, #255	@ 0xff
 800543e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	b2db      	uxtb	r3, r3
 8005446:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005448:	78fb      	ldrb	r3, [r7, #3]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005450:	b2da      	uxtb	r2, r3
 8005452:	4b2a      	ldr	r3, [pc, #168]	@ (80054fc <xPortStartScheduler+0xd4>)
 8005454:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005456:	4b2a      	ldr	r3, [pc, #168]	@ (8005500 <xPortStartScheduler+0xd8>)
 8005458:	2207      	movs	r2, #7
 800545a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800545c:	e009      	b.n	8005472 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800545e:	4b28      	ldr	r3, [pc, #160]	@ (8005500 <xPortStartScheduler+0xd8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3b01      	subs	r3, #1
 8005464:	4a26      	ldr	r2, [pc, #152]	@ (8005500 <xPortStartScheduler+0xd8>)
 8005466:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	b2db      	uxtb	r3, r3
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	b2db      	uxtb	r3, r3
 8005470:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005472:	78fb      	ldrb	r3, [r7, #3]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800547a:	2b80      	cmp	r3, #128	@ 0x80
 800547c:	d0ef      	beq.n	800545e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800547e:	4b20      	ldr	r3, [pc, #128]	@ (8005500 <xPortStartScheduler+0xd8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f1c3 0307 	rsb	r3, r3, #7
 8005486:	2b04      	cmp	r3, #4
 8005488:	d00b      	beq.n	80054a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	60bb      	str	r3, [r7, #8]
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	e7fd      	b.n	800549e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054a2:	4b17      	ldr	r3, [pc, #92]	@ (8005500 <xPortStartScheduler+0xd8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	021b      	lsls	r3, r3, #8
 80054a8:	4a15      	ldr	r2, [pc, #84]	@ (8005500 <xPortStartScheduler+0xd8>)
 80054aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054ac:	4b14      	ldr	r3, [pc, #80]	@ (8005500 <xPortStartScheduler+0xd8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80054b4:	4a12      	ldr	r2, [pc, #72]	@ (8005500 <xPortStartScheduler+0xd8>)
 80054b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054c0:	4b10      	ldr	r3, [pc, #64]	@ (8005504 <xPortStartScheduler+0xdc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a0f      	ldr	r2, [pc, #60]	@ (8005504 <xPortStartScheduler+0xdc>)
 80054c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80054ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80054cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005504 <xPortStartScheduler+0xdc>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005504 <xPortStartScheduler+0xdc>)
 80054d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80054d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80054d8:	f000 f8b8 	bl	800564c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80054dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005508 <xPortStartScheduler+0xe0>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80054e2:	f7ff ff91 	bl	8005408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80054e6:	f7ff f8a9 	bl	800463c <vTaskSwitchContext>
	prvTaskExitError();
 80054ea:	f7ff ff49 	bl	8005380 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	e000e400 	.word	0xe000e400
 80054fc:	20000f20 	.word	0x20000f20
 8005500:	20000f24 	.word	0x20000f24
 8005504:	e000ed20 	.word	0xe000ed20
 8005508:	20000010 	.word	0x20000010

0800550c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	607b      	str	r3, [r7, #4]
}
 8005524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005526:	4b0f      	ldr	r3, [pc, #60]	@ (8005564 <vPortEnterCritical+0x58>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3301      	adds	r3, #1
 800552c:	4a0d      	ldr	r2, [pc, #52]	@ (8005564 <vPortEnterCritical+0x58>)
 800552e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005530:	4b0c      	ldr	r3, [pc, #48]	@ (8005564 <vPortEnterCritical+0x58>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d110      	bne.n	800555a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005538:	4b0b      	ldr	r3, [pc, #44]	@ (8005568 <vPortEnterCritical+0x5c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00b      	beq.n	800555a <vPortEnterCritical+0x4e>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	603b      	str	r3, [r7, #0]
}
 8005554:	bf00      	nop
 8005556:	bf00      	nop
 8005558:	e7fd      	b.n	8005556 <vPortEnterCritical+0x4a>
	}
}
 800555a:	bf00      	nop
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	bc80      	pop	{r7}
 8005562:	4770      	bx	lr
 8005564:	20000010 	.word	0x20000010
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800556c:	b480      	push	{r7}
 800556e:	b083      	sub	sp, #12
 8005570:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005572:	4b12      	ldr	r3, [pc, #72]	@ (80055bc <vPortExitCritical+0x50>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10b      	bne.n	8005592 <vPortExitCritical+0x26>
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	607b      	str	r3, [r7, #4]
}
 800558c:	bf00      	nop
 800558e:	bf00      	nop
 8005590:	e7fd      	b.n	800558e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005592:	4b0a      	ldr	r3, [pc, #40]	@ (80055bc <vPortExitCritical+0x50>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	3b01      	subs	r3, #1
 8005598:	4a08      	ldr	r2, [pc, #32]	@ (80055bc <vPortExitCritical+0x50>)
 800559a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800559c:	4b07      	ldr	r3, [pc, #28]	@ (80055bc <vPortExitCritical+0x50>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <vPortExitCritical+0x44>
 80055a4:	2300      	movs	r3, #0
 80055a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f383 8811 	msr	BASEPRI, r3
}
 80055ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80055b0:	bf00      	nop
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bc80      	pop	{r7}
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000010 	.word	0x20000010

080055c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055c0:	f3ef 8009 	mrs	r0, PSP
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005600 <pxCurrentTCBConst>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055d0:	6010      	str	r0, [r2, #0]
 80055d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80055d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80055da:	f380 8811 	msr	BASEPRI, r0
 80055de:	f7ff f82d 	bl	800463c <vTaskSwitchContext>
 80055e2:	f04f 0000 	mov.w	r0, #0
 80055e6:	f380 8811 	msr	BASEPRI, r0
 80055ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	6808      	ldr	r0, [r1, #0]
 80055f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80055f6:	f380 8809 	msr	PSP, r0
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	4770      	bx	lr

08005600 <pxCurrentTCBConst>:
 8005600:	200008f4 	.word	0x200008f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005604:	bf00      	nop
 8005606:	bf00      	nop

08005608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	607b      	str	r3, [r7, #4]
}
 8005620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005622:	f7fe ff4b 	bl	80044bc <xTaskIncrementTick>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d003      	beq.n	8005634 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800562c:	4b06      	ldr	r3, [pc, #24]	@ (8005648 <SysTick_Handler+0x40>)
 800562e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	2300      	movs	r3, #0
 8005636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f383 8811 	msr	BASEPRI, r3
}
 800563e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800564c:	b480      	push	{r7}
 800564e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005650:	4b0a      	ldr	r3, [pc, #40]	@ (800567c <vPortSetupTimerInterrupt+0x30>)
 8005652:	2200      	movs	r2, #0
 8005654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005656:	4b0a      	ldr	r3, [pc, #40]	@ (8005680 <vPortSetupTimerInterrupt+0x34>)
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800565c:	4b09      	ldr	r3, [pc, #36]	@ (8005684 <vPortSetupTimerInterrupt+0x38>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a09      	ldr	r2, [pc, #36]	@ (8005688 <vPortSetupTimerInterrupt+0x3c>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	099b      	lsrs	r3, r3, #6
 8005668:	4a08      	ldr	r2, [pc, #32]	@ (800568c <vPortSetupTimerInterrupt+0x40>)
 800566a:	3b01      	subs	r3, #1
 800566c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800566e:	4b03      	ldr	r3, [pc, #12]	@ (800567c <vPortSetupTimerInterrupt+0x30>)
 8005670:	2207      	movs	r2, #7
 8005672:	601a      	str	r2, [r3, #0]
}
 8005674:	bf00      	nop
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	e000e010 	.word	0xe000e010
 8005680:	e000e018 	.word	0xe000e018
 8005684:	20000004 	.word	0x20000004
 8005688:	10624dd3 	.word	0x10624dd3
 800568c:	e000e014 	.word	0xe000e014

08005690 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005696:	f3ef 8305 	mrs	r3, IPSR
 800569a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2b0f      	cmp	r3, #15
 80056a0:	d915      	bls.n	80056ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056a2:	4a17      	ldr	r2, [pc, #92]	@ (8005700 <vPortValidateInterruptPriority+0x70>)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056ac:	4b15      	ldr	r3, [pc, #84]	@ (8005704 <vPortValidateInterruptPriority+0x74>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	7afa      	ldrb	r2, [r7, #11]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d20b      	bcs.n	80056ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	607b      	str	r3, [r7, #4]
}
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	e7fd      	b.n	80056ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <vPortValidateInterruptPriority+0x78>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80056d6:	4b0d      	ldr	r3, [pc, #52]	@ (800570c <vPortValidateInterruptPriority+0x7c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d90b      	bls.n	80056f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80056de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e2:	f383 8811 	msr	BASEPRI, r3
 80056e6:	f3bf 8f6f 	isb	sy
 80056ea:	f3bf 8f4f 	dsb	sy
 80056ee:	603b      	str	r3, [r7, #0]
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	e7fd      	b.n	80056f2 <vPortValidateInterruptPriority+0x62>
	}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr
 8005700:	e000e3f0 	.word	0xe000e3f0
 8005704:	20000f20 	.word	0x20000f20
 8005708:	e000ed0c 	.word	0xe000ed0c
 800570c:	20000f24 	.word	0x20000f24

08005710 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b08a      	sub	sp, #40	@ 0x28
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005718:	2300      	movs	r3, #0
 800571a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800571c:	f7fe fe14 	bl	8004348 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005720:	4b5a      	ldr	r3, [pc, #360]	@ (800588c <pvPortMalloc+0x17c>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005728:	f000 f916 	bl	8005958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800572c:	4b58      	ldr	r3, [pc, #352]	@ (8005890 <pvPortMalloc+0x180>)
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4013      	ands	r3, r2
 8005734:	2b00      	cmp	r3, #0
 8005736:	f040 8090 	bne.w	800585a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01e      	beq.n	800577e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005740:	2208      	movs	r2, #8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4413      	add	r3, r2
 8005746:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	2b00      	cmp	r3, #0
 8005750:	d015      	beq.n	800577e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f023 0307 	bic.w	r3, r3, #7
 8005758:	3308      	adds	r3, #8
 800575a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00b      	beq.n	800577e <pvPortMalloc+0x6e>
	__asm volatile
 8005766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	617b      	str	r3, [r7, #20]
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	e7fd      	b.n	800577a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d06a      	beq.n	800585a <pvPortMalloc+0x14a>
 8005784:	4b43      	ldr	r3, [pc, #268]	@ (8005894 <pvPortMalloc+0x184>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	429a      	cmp	r2, r3
 800578c:	d865      	bhi.n	800585a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800578e:	4b42      	ldr	r3, [pc, #264]	@ (8005898 <pvPortMalloc+0x188>)
 8005790:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005792:	4b41      	ldr	r3, [pc, #260]	@ (8005898 <pvPortMalloc+0x188>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005798:	e004      	b.n	80057a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d903      	bls.n	80057b6 <pvPortMalloc+0xa6>
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1f1      	bne.n	800579a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057b6:	4b35      	ldr	r3, [pc, #212]	@ (800588c <pvPortMalloc+0x17c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057bc:	429a      	cmp	r2, r3
 80057be:	d04c      	beq.n	800585a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057c0:	6a3b      	ldr	r3, [r7, #32]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2208      	movs	r2, #8
 80057c6:	4413      	add	r3, r2
 80057c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	1ad2      	subs	r2, r2, r3
 80057da:	2308      	movs	r3, #8
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	429a      	cmp	r2, r3
 80057e0:	d920      	bls.n	8005824 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80057e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4413      	add	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <pvPortMalloc+0xfc>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	613b      	str	r3, [r7, #16]
}
 8005806:	bf00      	nop
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800580c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	1ad2      	subs	r2, r2, r3
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800581e:	69b8      	ldr	r0, [r7, #24]
 8005820:	f000 f8fc 	bl	8005a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005824:	4b1b      	ldr	r3, [pc, #108]	@ (8005894 <pvPortMalloc+0x184>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	4a19      	ldr	r2, [pc, #100]	@ (8005894 <pvPortMalloc+0x184>)
 8005830:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005832:	4b18      	ldr	r3, [pc, #96]	@ (8005894 <pvPortMalloc+0x184>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	4b19      	ldr	r3, [pc, #100]	@ (800589c <pvPortMalloc+0x18c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d203      	bcs.n	8005846 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800583e:	4b15      	ldr	r3, [pc, #84]	@ (8005894 <pvPortMalloc+0x184>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a16      	ldr	r2, [pc, #88]	@ (800589c <pvPortMalloc+0x18c>)
 8005844:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	4b11      	ldr	r3, [pc, #68]	@ (8005890 <pvPortMalloc+0x180>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	431a      	orrs	r2, r3
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	2200      	movs	r2, #0
 8005858:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800585a:	f7fe fd83 	bl	8004364 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00b      	beq.n	8005880 <pvPortMalloc+0x170>
	__asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	60fb      	str	r3, [r7, #12]
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	e7fd      	b.n	800587c <pvPortMalloc+0x16c>
	return pvReturn;
 8005880:	69fb      	ldr	r3, [r7, #28]
}
 8005882:	4618      	mov	r0, r3
 8005884:	3728      	adds	r7, #40	@ 0x28
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20001d40 	.word	0x20001d40
 8005890:	20001d4c 	.word	0x20001d4c
 8005894:	20001d44 	.word	0x20001d44
 8005898:	20001d38 	.word	0x20001d38
 800589c:	20001d48 	.word	0x20001d48

080058a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d04a      	beq.n	8005948 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058b2:	2308      	movs	r3, #8
 80058b4:	425b      	negs	r3, r3
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4413      	add	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	4b22      	ldr	r3, [pc, #136]	@ (8005950 <vPortFree+0xb0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4013      	ands	r3, r2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <vPortFree+0x46>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	60fb      	str	r3, [r7, #12]
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	e7fd      	b.n	80058e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <vPortFree+0x66>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	60bb      	str	r3, [r7, #8]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	4b11      	ldr	r3, [pc, #68]	@ (8005950 <vPortFree+0xb0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4013      	ands	r3, r2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d019      	beq.n	8005948 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d115      	bne.n	8005948 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <vPortFree+0xb0>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	43db      	mvns	r3, r3
 8005926:	401a      	ands	r2, r3
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800592c:	f7fe fd0c 	bl	8004348 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	4b07      	ldr	r3, [pc, #28]	@ (8005954 <vPortFree+0xb4>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4413      	add	r3, r2
 800593a:	4a06      	ldr	r2, [pc, #24]	@ (8005954 <vPortFree+0xb4>)
 800593c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800593e:	6938      	ldr	r0, [r7, #16]
 8005940:	f000 f86c 	bl	8005a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005944:	f7fe fd0e 	bl	8004364 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005948:	bf00      	nop
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20001d4c 	.word	0x20001d4c
 8005954:	20001d44 	.word	0x20001d44

08005958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800595e:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8005962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005964:	4b27      	ldr	r3, [pc, #156]	@ (8005a04 <prvHeapInit+0xac>)
 8005966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00c      	beq.n	800598c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	3307      	adds	r3, #7
 8005976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	4a1f      	ldr	r2, [pc, #124]	@ (8005a04 <prvHeapInit+0xac>)
 8005988:	4413      	add	r3, r2
 800598a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005990:	4a1d      	ldr	r2, [pc, #116]	@ (8005a08 <prvHeapInit+0xb0>)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005996:	4b1c      	ldr	r3, [pc, #112]	@ (8005a08 <prvHeapInit+0xb0>)
 8005998:	2200      	movs	r2, #0
 800599a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	4413      	add	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059a4:	2208      	movs	r2, #8
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0307 	bic.w	r3, r3, #7
 80059b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4a15      	ldr	r2, [pc, #84]	@ (8005a0c <prvHeapInit+0xb4>)
 80059b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059ba:	4b14      	ldr	r3, [pc, #80]	@ (8005a0c <prvHeapInit+0xb4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059c2:	4b12      	ldr	r3, [pc, #72]	@ (8005a0c <prvHeapInit+0xb4>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	1ad2      	subs	r2, r2, r3
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059d8:	4b0c      	ldr	r3, [pc, #48]	@ (8005a0c <prvHeapInit+0xb4>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	4a0a      	ldr	r2, [pc, #40]	@ (8005a10 <prvHeapInit+0xb8>)
 80059e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4a09      	ldr	r2, [pc, #36]	@ (8005a14 <prvHeapInit+0xbc>)
 80059ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80059f0:	4b09      	ldr	r3, [pc, #36]	@ (8005a18 <prvHeapInit+0xc0>)
 80059f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80059f6:	601a      	str	r2, [r3, #0]
}
 80059f8:	bf00      	nop
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bc80      	pop	{r7}
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20000f28 	.word	0x20000f28
 8005a08:	20001d38 	.word	0x20001d38
 8005a0c:	20001d40 	.word	0x20001d40
 8005a10:	20001d48 	.word	0x20001d48
 8005a14:	20001d44 	.word	0x20001d44
 8005a18:	20001d4c 	.word	0x20001d4c

08005a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a24:	4b27      	ldr	r3, [pc, #156]	@ (8005ac4 <prvInsertBlockIntoFreeList+0xa8>)
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	e002      	b.n	8005a30 <prvInsertBlockIntoFreeList+0x14>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d8f7      	bhi.n	8005a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	4413      	add	r3, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d108      	bne.n	8005a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	441a      	add	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	441a      	add	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d118      	bne.n	8005aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b14      	ldr	r3, [pc, #80]	@ (8005ac8 <prvInsertBlockIntoFreeList+0xac>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d00d      	beq.n	8005a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	441a      	add	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	601a      	str	r2, [r3, #0]
 8005a98:	e008      	b.n	8005aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <prvInsertBlockIntoFreeList+0xac>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	e003      	b.n	8005aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d002      	beq.n	8005aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aba:	bf00      	nop
 8005abc:	3714      	adds	r7, #20
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bc80      	pop	{r7}
 8005ac2:	4770      	bx	lr
 8005ac4:	20001d38 	.word	0x20001d38
 8005ac8:	20001d40 	.word	0x20001d40

08005acc <siprintf>:
 8005acc:	b40e      	push	{r1, r2, r3}
 8005ace:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005ad2:	b500      	push	{lr}
 8005ad4:	b09c      	sub	sp, #112	@ 0x70
 8005ad6:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ad8:	9002      	str	r0, [sp, #8]
 8005ada:	9006      	str	r0, [sp, #24]
 8005adc:	9107      	str	r1, [sp, #28]
 8005ade:	9104      	str	r1, [sp, #16]
 8005ae0:	4808      	ldr	r0, [pc, #32]	@ (8005b04 <siprintf+0x38>)
 8005ae2:	4909      	ldr	r1, [pc, #36]	@ (8005b08 <siprintf+0x3c>)
 8005ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ae8:	9105      	str	r1, [sp, #20]
 8005aea:	6800      	ldr	r0, [r0, #0]
 8005aec:	a902      	add	r1, sp, #8
 8005aee:	9301      	str	r3, [sp, #4]
 8005af0:	f000 f9a0 	bl	8005e34 <_svfiprintf_r>
 8005af4:	2200      	movs	r2, #0
 8005af6:	9b02      	ldr	r3, [sp, #8]
 8005af8:	701a      	strb	r2, [r3, #0]
 8005afa:	b01c      	add	sp, #112	@ 0x70
 8005afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b00:	b003      	add	sp, #12
 8005b02:	4770      	bx	lr
 8005b04:	20000014 	.word	0x20000014
 8005b08:	ffff0208 	.word	0xffff0208

08005b0c <memset>:
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	4402      	add	r2, r0
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d100      	bne.n	8005b16 <memset+0xa>
 8005b14:	4770      	bx	lr
 8005b16:	f803 1b01 	strb.w	r1, [r3], #1
 8005b1a:	e7f9      	b.n	8005b10 <memset+0x4>

08005b1c <__errno>:
 8005b1c:	4b01      	ldr	r3, [pc, #4]	@ (8005b24 <__errno+0x8>)
 8005b1e:	6818      	ldr	r0, [r3, #0]
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	20000014 	.word	0x20000014

08005b28 <__libc_init_array>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	2600      	movs	r6, #0
 8005b2c:	4d0c      	ldr	r5, [pc, #48]	@ (8005b60 <__libc_init_array+0x38>)
 8005b2e:	4c0d      	ldr	r4, [pc, #52]	@ (8005b64 <__libc_init_array+0x3c>)
 8005b30:	1b64      	subs	r4, r4, r5
 8005b32:	10a4      	asrs	r4, r4, #2
 8005b34:	42a6      	cmp	r6, r4
 8005b36:	d109      	bne.n	8005b4c <__libc_init_array+0x24>
 8005b38:	f000 fc78 	bl	800642c <_init>
 8005b3c:	2600      	movs	r6, #0
 8005b3e:	4d0a      	ldr	r5, [pc, #40]	@ (8005b68 <__libc_init_array+0x40>)
 8005b40:	4c0a      	ldr	r4, [pc, #40]	@ (8005b6c <__libc_init_array+0x44>)
 8005b42:	1b64      	subs	r4, r4, r5
 8005b44:	10a4      	asrs	r4, r4, #2
 8005b46:	42a6      	cmp	r6, r4
 8005b48:	d105      	bne.n	8005b56 <__libc_init_array+0x2e>
 8005b4a:	bd70      	pop	{r4, r5, r6, pc}
 8005b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b50:	4798      	blx	r3
 8005b52:	3601      	adds	r6, #1
 8005b54:	e7ee      	b.n	8005b34 <__libc_init_array+0xc>
 8005b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5a:	4798      	blx	r3
 8005b5c:	3601      	adds	r6, #1
 8005b5e:	e7f2      	b.n	8005b46 <__libc_init_array+0x1e>
 8005b60:	08006650 	.word	0x08006650
 8005b64:	08006650 	.word	0x08006650
 8005b68:	08006650 	.word	0x08006650
 8005b6c:	08006654 	.word	0x08006654

08005b70 <__retarget_lock_acquire_recursive>:
 8005b70:	4770      	bx	lr

08005b72 <__retarget_lock_release_recursive>:
 8005b72:	4770      	bx	lr

08005b74 <memcpy>:
 8005b74:	440a      	add	r2, r1
 8005b76:	4291      	cmp	r1, r2
 8005b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b7c:	d100      	bne.n	8005b80 <memcpy+0xc>
 8005b7e:	4770      	bx	lr
 8005b80:	b510      	push	{r4, lr}
 8005b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b86:	4291      	cmp	r1, r2
 8005b88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b8c:	d1f9      	bne.n	8005b82 <memcpy+0xe>
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <_free_r>:
 8005b90:	b538      	push	{r3, r4, r5, lr}
 8005b92:	4605      	mov	r5, r0
 8005b94:	2900      	cmp	r1, #0
 8005b96:	d040      	beq.n	8005c1a <_free_r+0x8a>
 8005b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b9c:	1f0c      	subs	r4, r1, #4
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	bfb8      	it	lt
 8005ba2:	18e4      	addlt	r4, r4, r3
 8005ba4:	f000 f8de 	bl	8005d64 <__malloc_lock>
 8005ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c1c <_free_r+0x8c>)
 8005baa:	6813      	ldr	r3, [r2, #0]
 8005bac:	b933      	cbnz	r3, 8005bbc <_free_r+0x2c>
 8005bae:	6063      	str	r3, [r4, #4]
 8005bb0:	6014      	str	r4, [r2, #0]
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bb8:	f000 b8da 	b.w	8005d70 <__malloc_unlock>
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d908      	bls.n	8005bd2 <_free_r+0x42>
 8005bc0:	6820      	ldr	r0, [r4, #0]
 8005bc2:	1821      	adds	r1, r4, r0
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	bf01      	itttt	eq
 8005bc8:	6819      	ldreq	r1, [r3, #0]
 8005bca:	685b      	ldreq	r3, [r3, #4]
 8005bcc:	1809      	addeq	r1, r1, r0
 8005bce:	6021      	streq	r1, [r4, #0]
 8005bd0:	e7ed      	b.n	8005bae <_free_r+0x1e>
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	b10b      	cbz	r3, 8005bdc <_free_r+0x4c>
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	d9fa      	bls.n	8005bd2 <_free_r+0x42>
 8005bdc:	6811      	ldr	r1, [r2, #0]
 8005bde:	1850      	adds	r0, r2, r1
 8005be0:	42a0      	cmp	r0, r4
 8005be2:	d10b      	bne.n	8005bfc <_free_r+0x6c>
 8005be4:	6820      	ldr	r0, [r4, #0]
 8005be6:	4401      	add	r1, r0
 8005be8:	1850      	adds	r0, r2, r1
 8005bea:	4283      	cmp	r3, r0
 8005bec:	6011      	str	r1, [r2, #0]
 8005bee:	d1e0      	bne.n	8005bb2 <_free_r+0x22>
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	4408      	add	r0, r1
 8005bf6:	6010      	str	r0, [r2, #0]
 8005bf8:	6053      	str	r3, [r2, #4]
 8005bfa:	e7da      	b.n	8005bb2 <_free_r+0x22>
 8005bfc:	d902      	bls.n	8005c04 <_free_r+0x74>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	602b      	str	r3, [r5, #0]
 8005c02:	e7d6      	b.n	8005bb2 <_free_r+0x22>
 8005c04:	6820      	ldr	r0, [r4, #0]
 8005c06:	1821      	adds	r1, r4, r0
 8005c08:	428b      	cmp	r3, r1
 8005c0a:	bf01      	itttt	eq
 8005c0c:	6819      	ldreq	r1, [r3, #0]
 8005c0e:	685b      	ldreq	r3, [r3, #4]
 8005c10:	1809      	addeq	r1, r1, r0
 8005c12:	6021      	streq	r1, [r4, #0]
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	6054      	str	r4, [r2, #4]
 8005c18:	e7cb      	b.n	8005bb2 <_free_r+0x22>
 8005c1a:	bd38      	pop	{r3, r4, r5, pc}
 8005c1c:	20001e94 	.word	0x20001e94

08005c20 <sbrk_aligned>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	4e0f      	ldr	r6, [pc, #60]	@ (8005c60 <sbrk_aligned+0x40>)
 8005c24:	460c      	mov	r4, r1
 8005c26:	6831      	ldr	r1, [r6, #0]
 8005c28:	4605      	mov	r5, r0
 8005c2a:	b911      	cbnz	r1, 8005c32 <sbrk_aligned+0x12>
 8005c2c:	f000 fbaa 	bl	8006384 <_sbrk_r>
 8005c30:	6030      	str	r0, [r6, #0]
 8005c32:	4621      	mov	r1, r4
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 fba5 	bl	8006384 <_sbrk_r>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	d103      	bne.n	8005c46 <sbrk_aligned+0x26>
 8005c3e:	f04f 34ff 	mov.w	r4, #4294967295
 8005c42:	4620      	mov	r0, r4
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
 8005c46:	1cc4      	adds	r4, r0, #3
 8005c48:	f024 0403 	bic.w	r4, r4, #3
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d0f8      	beq.n	8005c42 <sbrk_aligned+0x22>
 8005c50:	1a21      	subs	r1, r4, r0
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 fb96 	bl	8006384 <_sbrk_r>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d1f2      	bne.n	8005c42 <sbrk_aligned+0x22>
 8005c5c:	e7ef      	b.n	8005c3e <sbrk_aligned+0x1e>
 8005c5e:	bf00      	nop
 8005c60:	20001e90 	.word	0x20001e90

08005c64 <_malloc_r>:
 8005c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c68:	1ccd      	adds	r5, r1, #3
 8005c6a:	f025 0503 	bic.w	r5, r5, #3
 8005c6e:	3508      	adds	r5, #8
 8005c70:	2d0c      	cmp	r5, #12
 8005c72:	bf38      	it	cc
 8005c74:	250c      	movcc	r5, #12
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	4606      	mov	r6, r0
 8005c7a:	db01      	blt.n	8005c80 <_malloc_r+0x1c>
 8005c7c:	42a9      	cmp	r1, r5
 8005c7e:	d904      	bls.n	8005c8a <_malloc_r+0x26>
 8005c80:	230c      	movs	r3, #12
 8005c82:	6033      	str	r3, [r6, #0]
 8005c84:	2000      	movs	r0, #0
 8005c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d60 <_malloc_r+0xfc>
 8005c8e:	f000 f869 	bl	8005d64 <__malloc_lock>
 8005c92:	f8d8 3000 	ldr.w	r3, [r8]
 8005c96:	461c      	mov	r4, r3
 8005c98:	bb44      	cbnz	r4, 8005cec <_malloc_r+0x88>
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7ff ffbf 	bl	8005c20 <sbrk_aligned>
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	d158      	bne.n	8005d5a <_malloc_r+0xf6>
 8005ca8:	f8d8 4000 	ldr.w	r4, [r8]
 8005cac:	4627      	mov	r7, r4
 8005cae:	2f00      	cmp	r7, #0
 8005cb0:	d143      	bne.n	8005d3a <_malloc_r+0xd6>
 8005cb2:	2c00      	cmp	r4, #0
 8005cb4:	d04b      	beq.n	8005d4e <_malloc_r+0xea>
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	4639      	mov	r1, r7
 8005cba:	4630      	mov	r0, r6
 8005cbc:	eb04 0903 	add.w	r9, r4, r3
 8005cc0:	f000 fb60 	bl	8006384 <_sbrk_r>
 8005cc4:	4581      	cmp	r9, r0
 8005cc6:	d142      	bne.n	8005d4e <_malloc_r+0xea>
 8005cc8:	6821      	ldr	r1, [r4, #0]
 8005cca:	4630      	mov	r0, r6
 8005ccc:	1a6d      	subs	r5, r5, r1
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f7ff ffa6 	bl	8005c20 <sbrk_aligned>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d03a      	beq.n	8005d4e <_malloc_r+0xea>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	442b      	add	r3, r5
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	bb62      	cbnz	r2, 8005d40 <_malloc_r+0xdc>
 8005ce6:	f8c8 7000 	str.w	r7, [r8]
 8005cea:	e00f      	b.n	8005d0c <_malloc_r+0xa8>
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	1b52      	subs	r2, r2, r5
 8005cf0:	d420      	bmi.n	8005d34 <_malloc_r+0xd0>
 8005cf2:	2a0b      	cmp	r2, #11
 8005cf4:	d917      	bls.n	8005d26 <_malloc_r+0xc2>
 8005cf6:	1961      	adds	r1, r4, r5
 8005cf8:	42a3      	cmp	r3, r4
 8005cfa:	6025      	str	r5, [r4, #0]
 8005cfc:	bf18      	it	ne
 8005cfe:	6059      	strne	r1, [r3, #4]
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	bf08      	it	eq
 8005d04:	f8c8 1000 	streq.w	r1, [r8]
 8005d08:	5162      	str	r2, [r4, r5]
 8005d0a:	604b      	str	r3, [r1, #4]
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f000 f82f 	bl	8005d70 <__malloc_unlock>
 8005d12:	f104 000b 	add.w	r0, r4, #11
 8005d16:	1d23      	adds	r3, r4, #4
 8005d18:	f020 0007 	bic.w	r0, r0, #7
 8005d1c:	1ac2      	subs	r2, r0, r3
 8005d1e:	bf1c      	itt	ne
 8005d20:	1a1b      	subne	r3, r3, r0
 8005d22:	50a3      	strne	r3, [r4, r2]
 8005d24:	e7af      	b.n	8005c86 <_malloc_r+0x22>
 8005d26:	6862      	ldr	r2, [r4, #4]
 8005d28:	42a3      	cmp	r3, r4
 8005d2a:	bf0c      	ite	eq
 8005d2c:	f8c8 2000 	streq.w	r2, [r8]
 8005d30:	605a      	strne	r2, [r3, #4]
 8005d32:	e7eb      	b.n	8005d0c <_malloc_r+0xa8>
 8005d34:	4623      	mov	r3, r4
 8005d36:	6864      	ldr	r4, [r4, #4]
 8005d38:	e7ae      	b.n	8005c98 <_malloc_r+0x34>
 8005d3a:	463c      	mov	r4, r7
 8005d3c:	687f      	ldr	r7, [r7, #4]
 8005d3e:	e7b6      	b.n	8005cae <_malloc_r+0x4a>
 8005d40:	461a      	mov	r2, r3
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	d1fb      	bne.n	8005d40 <_malloc_r+0xdc>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6053      	str	r3, [r2, #4]
 8005d4c:	e7de      	b.n	8005d0c <_malloc_r+0xa8>
 8005d4e:	230c      	movs	r3, #12
 8005d50:	4630      	mov	r0, r6
 8005d52:	6033      	str	r3, [r6, #0]
 8005d54:	f000 f80c 	bl	8005d70 <__malloc_unlock>
 8005d58:	e794      	b.n	8005c84 <_malloc_r+0x20>
 8005d5a:	6005      	str	r5, [r0, #0]
 8005d5c:	e7d6      	b.n	8005d0c <_malloc_r+0xa8>
 8005d5e:	bf00      	nop
 8005d60:	20001e94 	.word	0x20001e94

08005d64 <__malloc_lock>:
 8005d64:	4801      	ldr	r0, [pc, #4]	@ (8005d6c <__malloc_lock+0x8>)
 8005d66:	f7ff bf03 	b.w	8005b70 <__retarget_lock_acquire_recursive>
 8005d6a:	bf00      	nop
 8005d6c:	20001e8c 	.word	0x20001e8c

08005d70 <__malloc_unlock>:
 8005d70:	4801      	ldr	r0, [pc, #4]	@ (8005d78 <__malloc_unlock+0x8>)
 8005d72:	f7ff befe 	b.w	8005b72 <__retarget_lock_release_recursive>
 8005d76:	bf00      	nop
 8005d78:	20001e8c 	.word	0x20001e8c

08005d7c <__ssputs_r>:
 8005d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d80:	461f      	mov	r7, r3
 8005d82:	688e      	ldr	r6, [r1, #8]
 8005d84:	4682      	mov	sl, r0
 8005d86:	42be      	cmp	r6, r7
 8005d88:	460c      	mov	r4, r1
 8005d8a:	4690      	mov	r8, r2
 8005d8c:	680b      	ldr	r3, [r1, #0]
 8005d8e:	d82d      	bhi.n	8005dec <__ssputs_r+0x70>
 8005d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d98:	d026      	beq.n	8005de8 <__ssputs_r+0x6c>
 8005d9a:	6965      	ldr	r5, [r4, #20]
 8005d9c:	6909      	ldr	r1, [r1, #16]
 8005d9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005da2:	eba3 0901 	sub.w	r9, r3, r1
 8005da6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005daa:	1c7b      	adds	r3, r7, #1
 8005dac:	444b      	add	r3, r9
 8005dae:	106d      	asrs	r5, r5, #1
 8005db0:	429d      	cmp	r5, r3
 8005db2:	bf38      	it	cc
 8005db4:	461d      	movcc	r5, r3
 8005db6:	0553      	lsls	r3, r2, #21
 8005db8:	d527      	bpl.n	8005e0a <__ssputs_r+0x8e>
 8005dba:	4629      	mov	r1, r5
 8005dbc:	f7ff ff52 	bl	8005c64 <_malloc_r>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	b360      	cbz	r0, 8005e1e <__ssputs_r+0xa2>
 8005dc4:	464a      	mov	r2, r9
 8005dc6:	6921      	ldr	r1, [r4, #16]
 8005dc8:	f7ff fed4 	bl	8005b74 <memcpy>
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	6126      	str	r6, [r4, #16]
 8005dda:	444e      	add	r6, r9
 8005ddc:	6026      	str	r6, [r4, #0]
 8005dde:	463e      	mov	r6, r7
 8005de0:	6165      	str	r5, [r4, #20]
 8005de2:	eba5 0509 	sub.w	r5, r5, r9
 8005de6:	60a5      	str	r5, [r4, #8]
 8005de8:	42be      	cmp	r6, r7
 8005dea:	d900      	bls.n	8005dee <__ssputs_r+0x72>
 8005dec:	463e      	mov	r6, r7
 8005dee:	4632      	mov	r2, r6
 8005df0:	4641      	mov	r1, r8
 8005df2:	6820      	ldr	r0, [r4, #0]
 8005df4:	f000 faac 	bl	8006350 <memmove>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	1b9b      	subs	r3, r3, r6
 8005dfe:	60a3      	str	r3, [r4, #8]
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	4433      	add	r3, r6
 8005e04:	6023      	str	r3, [r4, #0]
 8005e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0a:	462a      	mov	r2, r5
 8005e0c:	f000 fad8 	bl	80063c0 <_realloc_r>
 8005e10:	4606      	mov	r6, r0
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d1e0      	bne.n	8005dd8 <__ssputs_r+0x5c>
 8005e16:	4650      	mov	r0, sl
 8005e18:	6921      	ldr	r1, [r4, #16]
 8005e1a:	f7ff feb9 	bl	8005b90 <_free_r>
 8005e1e:	230c      	movs	r3, #12
 8005e20:	f8ca 3000 	str.w	r3, [sl]
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e2e:	81a3      	strh	r3, [r4, #12]
 8005e30:	e7e9      	b.n	8005e06 <__ssputs_r+0x8a>
	...

08005e34 <_svfiprintf_r>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	4698      	mov	r8, r3
 8005e3a:	898b      	ldrh	r3, [r1, #12]
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	061b      	lsls	r3, r3, #24
 8005e40:	460d      	mov	r5, r1
 8005e42:	4614      	mov	r4, r2
 8005e44:	b09d      	sub	sp, #116	@ 0x74
 8005e46:	d510      	bpl.n	8005e6a <_svfiprintf_r+0x36>
 8005e48:	690b      	ldr	r3, [r1, #16]
 8005e4a:	b973      	cbnz	r3, 8005e6a <_svfiprintf_r+0x36>
 8005e4c:	2140      	movs	r1, #64	@ 0x40
 8005e4e:	f7ff ff09 	bl	8005c64 <_malloc_r>
 8005e52:	6028      	str	r0, [r5, #0]
 8005e54:	6128      	str	r0, [r5, #16]
 8005e56:	b930      	cbnz	r0, 8005e66 <_svfiprintf_r+0x32>
 8005e58:	230c      	movs	r3, #12
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e60:	b01d      	add	sp, #116	@ 0x74
 8005e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e66:	2340      	movs	r3, #64	@ 0x40
 8005e68:	616b      	str	r3, [r5, #20]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6e:	2320      	movs	r3, #32
 8005e70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e74:	2330      	movs	r3, #48	@ 0x30
 8005e76:	f04f 0901 	mov.w	r9, #1
 8005e7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e7e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006018 <_svfiprintf_r+0x1e4>
 8005e82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e86:	4623      	mov	r3, r4
 8005e88:	469a      	mov	sl, r3
 8005e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e8e:	b10a      	cbz	r2, 8005e94 <_svfiprintf_r+0x60>
 8005e90:	2a25      	cmp	r2, #37	@ 0x25
 8005e92:	d1f9      	bne.n	8005e88 <_svfiprintf_r+0x54>
 8005e94:	ebba 0b04 	subs.w	fp, sl, r4
 8005e98:	d00b      	beq.n	8005eb2 <_svfiprintf_r+0x7e>
 8005e9a:	465b      	mov	r3, fp
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	f7ff ff6b 	bl	8005d7c <__ssputs_r>
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	f000 80a7 	beq.w	8005ffa <_svfiprintf_r+0x1c6>
 8005eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eae:	445a      	add	r2, fp
 8005eb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 809f 	beq.w	8005ffa <_svfiprintf_r+0x1c6>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ec6:	f10a 0a01 	add.w	sl, sl, #1
 8005eca:	9304      	str	r3, [sp, #16]
 8005ecc:	9307      	str	r3, [sp, #28]
 8005ece:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ed2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ed4:	4654      	mov	r4, sl
 8005ed6:	2205      	movs	r2, #5
 8005ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005edc:	484e      	ldr	r0, [pc, #312]	@ (8006018 <_svfiprintf_r+0x1e4>)
 8005ede:	f000 fa61 	bl	80063a4 <memchr>
 8005ee2:	9a04      	ldr	r2, [sp, #16]
 8005ee4:	b9d8      	cbnz	r0, 8005f1e <_svfiprintf_r+0xea>
 8005ee6:	06d0      	lsls	r0, r2, #27
 8005ee8:	bf44      	itt	mi
 8005eea:	2320      	movmi	r3, #32
 8005eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ef0:	0711      	lsls	r1, r2, #28
 8005ef2:	bf44      	itt	mi
 8005ef4:	232b      	movmi	r3, #43	@ 0x2b
 8005ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005efa:	f89a 3000 	ldrb.w	r3, [sl]
 8005efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f00:	d015      	beq.n	8005f2e <_svfiprintf_r+0xfa>
 8005f02:	4654      	mov	r4, sl
 8005f04:	2000      	movs	r0, #0
 8005f06:	f04f 0c0a 	mov.w	ip, #10
 8005f0a:	9a07      	ldr	r2, [sp, #28]
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f12:	3b30      	subs	r3, #48	@ 0x30
 8005f14:	2b09      	cmp	r3, #9
 8005f16:	d94b      	bls.n	8005fb0 <_svfiprintf_r+0x17c>
 8005f18:	b1b0      	cbz	r0, 8005f48 <_svfiprintf_r+0x114>
 8005f1a:	9207      	str	r2, [sp, #28]
 8005f1c:	e014      	b.n	8005f48 <_svfiprintf_r+0x114>
 8005f1e:	eba0 0308 	sub.w	r3, r0, r8
 8005f22:	fa09 f303 	lsl.w	r3, r9, r3
 8005f26:	4313      	orrs	r3, r2
 8005f28:	46a2      	mov	sl, r4
 8005f2a:	9304      	str	r3, [sp, #16]
 8005f2c:	e7d2      	b.n	8005ed4 <_svfiprintf_r+0xa0>
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	1d19      	adds	r1, r3, #4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	9103      	str	r1, [sp, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bfbb      	ittet	lt
 8005f3a:	425b      	neglt	r3, r3
 8005f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f40:	9307      	strge	r3, [sp, #28]
 8005f42:	9307      	strlt	r3, [sp, #28]
 8005f44:	bfb8      	it	lt
 8005f46:	9204      	strlt	r2, [sp, #16]
 8005f48:	7823      	ldrb	r3, [r4, #0]
 8005f4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f4c:	d10a      	bne.n	8005f64 <_svfiprintf_r+0x130>
 8005f4e:	7863      	ldrb	r3, [r4, #1]
 8005f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f52:	d132      	bne.n	8005fba <_svfiprintf_r+0x186>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	3402      	adds	r4, #2
 8005f58:	1d1a      	adds	r2, r3, #4
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	9203      	str	r2, [sp, #12]
 8005f5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f62:	9305      	str	r3, [sp, #20]
 8005f64:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800601c <_svfiprintf_r+0x1e8>
 8005f68:	2203      	movs	r2, #3
 8005f6a:	4650      	mov	r0, sl
 8005f6c:	7821      	ldrb	r1, [r4, #0]
 8005f6e:	f000 fa19 	bl	80063a4 <memchr>
 8005f72:	b138      	cbz	r0, 8005f84 <_svfiprintf_r+0x150>
 8005f74:	2240      	movs	r2, #64	@ 0x40
 8005f76:	9b04      	ldr	r3, [sp, #16]
 8005f78:	eba0 000a 	sub.w	r0, r0, sl
 8005f7c:	4082      	lsls	r2, r0
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	3401      	adds	r4, #1
 8005f82:	9304      	str	r3, [sp, #16]
 8005f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f88:	2206      	movs	r2, #6
 8005f8a:	4825      	ldr	r0, [pc, #148]	@ (8006020 <_svfiprintf_r+0x1ec>)
 8005f8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f90:	f000 fa08 	bl	80063a4 <memchr>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d036      	beq.n	8006006 <_svfiprintf_r+0x1d2>
 8005f98:	4b22      	ldr	r3, [pc, #136]	@ (8006024 <_svfiprintf_r+0x1f0>)
 8005f9a:	bb1b      	cbnz	r3, 8005fe4 <_svfiprintf_r+0x1b0>
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	3307      	adds	r3, #7
 8005fa0:	f023 0307 	bic.w	r3, r3, #7
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	9303      	str	r3, [sp, #12]
 8005fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005faa:	4433      	add	r3, r6
 8005fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fae:	e76a      	b.n	8005e86 <_svfiprintf_r+0x52>
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	2001      	movs	r0, #1
 8005fb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fb8:	e7a8      	b.n	8005f0c <_svfiprintf_r+0xd8>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f04f 0c0a 	mov.w	ip, #10
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	3401      	adds	r4, #1
 8005fc4:	9305      	str	r3, [sp, #20]
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fcc:	3a30      	subs	r2, #48	@ 0x30
 8005fce:	2a09      	cmp	r2, #9
 8005fd0:	d903      	bls.n	8005fda <_svfiprintf_r+0x1a6>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0c6      	beq.n	8005f64 <_svfiprintf_r+0x130>
 8005fd6:	9105      	str	r1, [sp, #20]
 8005fd8:	e7c4      	b.n	8005f64 <_svfiprintf_r+0x130>
 8005fda:	4604      	mov	r4, r0
 8005fdc:	2301      	movs	r3, #1
 8005fde:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fe2:	e7f0      	b.n	8005fc6 <_svfiprintf_r+0x192>
 8005fe4:	ab03      	add	r3, sp, #12
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	462a      	mov	r2, r5
 8005fea:	4638      	mov	r0, r7
 8005fec:	4b0e      	ldr	r3, [pc, #56]	@ (8006028 <_svfiprintf_r+0x1f4>)
 8005fee:	a904      	add	r1, sp, #16
 8005ff0:	f3af 8000 	nop.w
 8005ff4:	1c42      	adds	r2, r0, #1
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	d1d6      	bne.n	8005fa8 <_svfiprintf_r+0x174>
 8005ffa:	89ab      	ldrh	r3, [r5, #12]
 8005ffc:	065b      	lsls	r3, r3, #25
 8005ffe:	f53f af2d 	bmi.w	8005e5c <_svfiprintf_r+0x28>
 8006002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006004:	e72c      	b.n	8005e60 <_svfiprintf_r+0x2c>
 8006006:	ab03      	add	r3, sp, #12
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	462a      	mov	r2, r5
 800600c:	4638      	mov	r0, r7
 800600e:	4b06      	ldr	r3, [pc, #24]	@ (8006028 <_svfiprintf_r+0x1f4>)
 8006010:	a904      	add	r1, sp, #16
 8006012:	f000 f87d 	bl	8006110 <_printf_i>
 8006016:	e7ed      	b.n	8005ff4 <_svfiprintf_r+0x1c0>
 8006018:	0800661a 	.word	0x0800661a
 800601c:	08006620 	.word	0x08006620
 8006020:	08006624 	.word	0x08006624
 8006024:	00000000 	.word	0x00000000
 8006028:	08005d7d 	.word	0x08005d7d

0800602c <_printf_common>:
 800602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	4616      	mov	r6, r2
 8006032:	4698      	mov	r8, r3
 8006034:	688a      	ldr	r2, [r1, #8]
 8006036:	690b      	ldr	r3, [r1, #16]
 8006038:	4607      	mov	r7, r0
 800603a:	4293      	cmp	r3, r2
 800603c:	bfb8      	it	lt
 800603e:	4613      	movlt	r3, r2
 8006040:	6033      	str	r3, [r6, #0]
 8006042:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006046:	460c      	mov	r4, r1
 8006048:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800604c:	b10a      	cbz	r2, 8006052 <_printf_common+0x26>
 800604e:	3301      	adds	r3, #1
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	0699      	lsls	r1, r3, #26
 8006056:	bf42      	ittt	mi
 8006058:	6833      	ldrmi	r3, [r6, #0]
 800605a:	3302      	addmi	r3, #2
 800605c:	6033      	strmi	r3, [r6, #0]
 800605e:	6825      	ldr	r5, [r4, #0]
 8006060:	f015 0506 	ands.w	r5, r5, #6
 8006064:	d106      	bne.n	8006074 <_printf_common+0x48>
 8006066:	f104 0a19 	add.w	sl, r4, #25
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	6832      	ldr	r2, [r6, #0]
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	42ab      	cmp	r3, r5
 8006072:	dc2b      	bgt.n	80060cc <_printf_common+0xa0>
 8006074:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	3b00      	subs	r3, #0
 800607c:	bf18      	it	ne
 800607e:	2301      	movne	r3, #1
 8006080:	0692      	lsls	r2, r2, #26
 8006082:	d430      	bmi.n	80060e6 <_printf_common+0xba>
 8006084:	4641      	mov	r1, r8
 8006086:	4638      	mov	r0, r7
 8006088:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800608c:	47c8      	blx	r9
 800608e:	3001      	adds	r0, #1
 8006090:	d023      	beq.n	80060da <_printf_common+0xae>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	6922      	ldr	r2, [r4, #16]
 8006096:	f003 0306 	and.w	r3, r3, #6
 800609a:	2b04      	cmp	r3, #4
 800609c:	bf14      	ite	ne
 800609e:	2500      	movne	r5, #0
 80060a0:	6833      	ldreq	r3, [r6, #0]
 80060a2:	f04f 0600 	mov.w	r6, #0
 80060a6:	bf08      	it	eq
 80060a8:	68e5      	ldreq	r5, [r4, #12]
 80060aa:	f104 041a 	add.w	r4, r4, #26
 80060ae:	bf08      	it	eq
 80060b0:	1aed      	subeq	r5, r5, r3
 80060b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80060b6:	bf08      	it	eq
 80060b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060bc:	4293      	cmp	r3, r2
 80060be:	bfc4      	itt	gt
 80060c0:	1a9b      	subgt	r3, r3, r2
 80060c2:	18ed      	addgt	r5, r5, r3
 80060c4:	42b5      	cmp	r5, r6
 80060c6:	d11a      	bne.n	80060fe <_printf_common+0xd2>
 80060c8:	2000      	movs	r0, #0
 80060ca:	e008      	b.n	80060de <_printf_common+0xb2>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4652      	mov	r2, sl
 80060d0:	4641      	mov	r1, r8
 80060d2:	4638      	mov	r0, r7
 80060d4:	47c8      	blx	r9
 80060d6:	3001      	adds	r0, #1
 80060d8:	d103      	bne.n	80060e2 <_printf_common+0xb6>
 80060da:	f04f 30ff 	mov.w	r0, #4294967295
 80060de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e2:	3501      	adds	r5, #1
 80060e4:	e7c1      	b.n	800606a <_printf_common+0x3e>
 80060e6:	2030      	movs	r0, #48	@ 0x30
 80060e8:	18e1      	adds	r1, r4, r3
 80060ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060f4:	4422      	add	r2, r4
 80060f6:	3302      	adds	r3, #2
 80060f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060fc:	e7c2      	b.n	8006084 <_printf_common+0x58>
 80060fe:	2301      	movs	r3, #1
 8006100:	4622      	mov	r2, r4
 8006102:	4641      	mov	r1, r8
 8006104:	4638      	mov	r0, r7
 8006106:	47c8      	blx	r9
 8006108:	3001      	adds	r0, #1
 800610a:	d0e6      	beq.n	80060da <_printf_common+0xae>
 800610c:	3601      	adds	r6, #1
 800610e:	e7d9      	b.n	80060c4 <_printf_common+0x98>

08006110 <_printf_i>:
 8006110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	7e0f      	ldrb	r7, [r1, #24]
 8006116:	4691      	mov	r9, r2
 8006118:	2f78      	cmp	r7, #120	@ 0x78
 800611a:	4680      	mov	r8, r0
 800611c:	460c      	mov	r4, r1
 800611e:	469a      	mov	sl, r3
 8006120:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006126:	d807      	bhi.n	8006138 <_printf_i+0x28>
 8006128:	2f62      	cmp	r7, #98	@ 0x62
 800612a:	d80a      	bhi.n	8006142 <_printf_i+0x32>
 800612c:	2f00      	cmp	r7, #0
 800612e:	f000 80d3 	beq.w	80062d8 <_printf_i+0x1c8>
 8006132:	2f58      	cmp	r7, #88	@ 0x58
 8006134:	f000 80ba 	beq.w	80062ac <_printf_i+0x19c>
 8006138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800613c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006140:	e03a      	b.n	80061b8 <_printf_i+0xa8>
 8006142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006146:	2b15      	cmp	r3, #21
 8006148:	d8f6      	bhi.n	8006138 <_printf_i+0x28>
 800614a:	a101      	add	r1, pc, #4	@ (adr r1, 8006150 <_printf_i+0x40>)
 800614c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006150:	080061a9 	.word	0x080061a9
 8006154:	080061bd 	.word	0x080061bd
 8006158:	08006139 	.word	0x08006139
 800615c:	08006139 	.word	0x08006139
 8006160:	08006139 	.word	0x08006139
 8006164:	08006139 	.word	0x08006139
 8006168:	080061bd 	.word	0x080061bd
 800616c:	08006139 	.word	0x08006139
 8006170:	08006139 	.word	0x08006139
 8006174:	08006139 	.word	0x08006139
 8006178:	08006139 	.word	0x08006139
 800617c:	080062bf 	.word	0x080062bf
 8006180:	080061e7 	.word	0x080061e7
 8006184:	08006279 	.word	0x08006279
 8006188:	08006139 	.word	0x08006139
 800618c:	08006139 	.word	0x08006139
 8006190:	080062e1 	.word	0x080062e1
 8006194:	08006139 	.word	0x08006139
 8006198:	080061e7 	.word	0x080061e7
 800619c:	08006139 	.word	0x08006139
 80061a0:	08006139 	.word	0x08006139
 80061a4:	08006281 	.word	0x08006281
 80061a8:	6833      	ldr	r3, [r6, #0]
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6032      	str	r2, [r6, #0]
 80061b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061b8:	2301      	movs	r3, #1
 80061ba:	e09e      	b.n	80062fa <_printf_i+0x1ea>
 80061bc:	6833      	ldr	r3, [r6, #0]
 80061be:	6820      	ldr	r0, [r4, #0]
 80061c0:	1d19      	adds	r1, r3, #4
 80061c2:	6031      	str	r1, [r6, #0]
 80061c4:	0606      	lsls	r6, r0, #24
 80061c6:	d501      	bpl.n	80061cc <_printf_i+0xbc>
 80061c8:	681d      	ldr	r5, [r3, #0]
 80061ca:	e003      	b.n	80061d4 <_printf_i+0xc4>
 80061cc:	0645      	lsls	r5, r0, #25
 80061ce:	d5fb      	bpl.n	80061c8 <_printf_i+0xb8>
 80061d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061d4:	2d00      	cmp	r5, #0
 80061d6:	da03      	bge.n	80061e0 <_printf_i+0xd0>
 80061d8:	232d      	movs	r3, #45	@ 0x2d
 80061da:	426d      	negs	r5, r5
 80061dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061e0:	230a      	movs	r3, #10
 80061e2:	4859      	ldr	r0, [pc, #356]	@ (8006348 <_printf_i+0x238>)
 80061e4:	e011      	b.n	800620a <_printf_i+0xfa>
 80061e6:	6821      	ldr	r1, [r4, #0]
 80061e8:	6833      	ldr	r3, [r6, #0]
 80061ea:	0608      	lsls	r0, r1, #24
 80061ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80061f0:	d402      	bmi.n	80061f8 <_printf_i+0xe8>
 80061f2:	0649      	lsls	r1, r1, #25
 80061f4:	bf48      	it	mi
 80061f6:	b2ad      	uxthmi	r5, r5
 80061f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80061fa:	6033      	str	r3, [r6, #0]
 80061fc:	bf14      	ite	ne
 80061fe:	230a      	movne	r3, #10
 8006200:	2308      	moveq	r3, #8
 8006202:	4851      	ldr	r0, [pc, #324]	@ (8006348 <_printf_i+0x238>)
 8006204:	2100      	movs	r1, #0
 8006206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800620a:	6866      	ldr	r6, [r4, #4]
 800620c:	2e00      	cmp	r6, #0
 800620e:	bfa8      	it	ge
 8006210:	6821      	ldrge	r1, [r4, #0]
 8006212:	60a6      	str	r6, [r4, #8]
 8006214:	bfa4      	itt	ge
 8006216:	f021 0104 	bicge.w	r1, r1, #4
 800621a:	6021      	strge	r1, [r4, #0]
 800621c:	b90d      	cbnz	r5, 8006222 <_printf_i+0x112>
 800621e:	2e00      	cmp	r6, #0
 8006220:	d04b      	beq.n	80062ba <_printf_i+0x1aa>
 8006222:	4616      	mov	r6, r2
 8006224:	fbb5 f1f3 	udiv	r1, r5, r3
 8006228:	fb03 5711 	mls	r7, r3, r1, r5
 800622c:	5dc7      	ldrb	r7, [r0, r7]
 800622e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006232:	462f      	mov	r7, r5
 8006234:	42bb      	cmp	r3, r7
 8006236:	460d      	mov	r5, r1
 8006238:	d9f4      	bls.n	8006224 <_printf_i+0x114>
 800623a:	2b08      	cmp	r3, #8
 800623c:	d10b      	bne.n	8006256 <_printf_i+0x146>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	07df      	lsls	r7, r3, #31
 8006242:	d508      	bpl.n	8006256 <_printf_i+0x146>
 8006244:	6923      	ldr	r3, [r4, #16]
 8006246:	6861      	ldr	r1, [r4, #4]
 8006248:	4299      	cmp	r1, r3
 800624a:	bfde      	ittt	le
 800624c:	2330      	movle	r3, #48	@ 0x30
 800624e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006252:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006256:	1b92      	subs	r2, r2, r6
 8006258:	6122      	str	r2, [r4, #16]
 800625a:	464b      	mov	r3, r9
 800625c:	4621      	mov	r1, r4
 800625e:	4640      	mov	r0, r8
 8006260:	f8cd a000 	str.w	sl, [sp]
 8006264:	aa03      	add	r2, sp, #12
 8006266:	f7ff fee1 	bl	800602c <_printf_common>
 800626a:	3001      	adds	r0, #1
 800626c:	d14a      	bne.n	8006304 <_printf_i+0x1f4>
 800626e:	f04f 30ff 	mov.w	r0, #4294967295
 8006272:	b004      	add	sp, #16
 8006274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	f043 0320 	orr.w	r3, r3, #32
 800627e:	6023      	str	r3, [r4, #0]
 8006280:	2778      	movs	r7, #120	@ 0x78
 8006282:	4832      	ldr	r0, [pc, #200]	@ (800634c <_printf_i+0x23c>)
 8006284:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	6831      	ldr	r1, [r6, #0]
 800628c:	061f      	lsls	r7, r3, #24
 800628e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006292:	d402      	bmi.n	800629a <_printf_i+0x18a>
 8006294:	065f      	lsls	r7, r3, #25
 8006296:	bf48      	it	mi
 8006298:	b2ad      	uxthmi	r5, r5
 800629a:	6031      	str	r1, [r6, #0]
 800629c:	07d9      	lsls	r1, r3, #31
 800629e:	bf44      	itt	mi
 80062a0:	f043 0320 	orrmi.w	r3, r3, #32
 80062a4:	6023      	strmi	r3, [r4, #0]
 80062a6:	b11d      	cbz	r5, 80062b0 <_printf_i+0x1a0>
 80062a8:	2310      	movs	r3, #16
 80062aa:	e7ab      	b.n	8006204 <_printf_i+0xf4>
 80062ac:	4826      	ldr	r0, [pc, #152]	@ (8006348 <_printf_i+0x238>)
 80062ae:	e7e9      	b.n	8006284 <_printf_i+0x174>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	f023 0320 	bic.w	r3, r3, #32
 80062b6:	6023      	str	r3, [r4, #0]
 80062b8:	e7f6      	b.n	80062a8 <_printf_i+0x198>
 80062ba:	4616      	mov	r6, r2
 80062bc:	e7bd      	b.n	800623a <_printf_i+0x12a>
 80062be:	6833      	ldr	r3, [r6, #0]
 80062c0:	6825      	ldr	r5, [r4, #0]
 80062c2:	1d18      	adds	r0, r3, #4
 80062c4:	6961      	ldr	r1, [r4, #20]
 80062c6:	6030      	str	r0, [r6, #0]
 80062c8:	062e      	lsls	r6, r5, #24
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	d501      	bpl.n	80062d2 <_printf_i+0x1c2>
 80062ce:	6019      	str	r1, [r3, #0]
 80062d0:	e002      	b.n	80062d8 <_printf_i+0x1c8>
 80062d2:	0668      	lsls	r0, r5, #25
 80062d4:	d5fb      	bpl.n	80062ce <_printf_i+0x1be>
 80062d6:	8019      	strh	r1, [r3, #0]
 80062d8:	2300      	movs	r3, #0
 80062da:	4616      	mov	r6, r2
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	e7bc      	b.n	800625a <_printf_i+0x14a>
 80062e0:	6833      	ldr	r3, [r6, #0]
 80062e2:	2100      	movs	r1, #0
 80062e4:	1d1a      	adds	r2, r3, #4
 80062e6:	6032      	str	r2, [r6, #0]
 80062e8:	681e      	ldr	r6, [r3, #0]
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	4630      	mov	r0, r6
 80062ee:	f000 f859 	bl	80063a4 <memchr>
 80062f2:	b108      	cbz	r0, 80062f8 <_printf_i+0x1e8>
 80062f4:	1b80      	subs	r0, r0, r6
 80062f6:	6060      	str	r0, [r4, #4]
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	2300      	movs	r3, #0
 80062fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006302:	e7aa      	b.n	800625a <_printf_i+0x14a>
 8006304:	4632      	mov	r2, r6
 8006306:	4649      	mov	r1, r9
 8006308:	4640      	mov	r0, r8
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	47d0      	blx	sl
 800630e:	3001      	adds	r0, #1
 8006310:	d0ad      	beq.n	800626e <_printf_i+0x15e>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	079b      	lsls	r3, r3, #30
 8006316:	d413      	bmi.n	8006340 <_printf_i+0x230>
 8006318:	68e0      	ldr	r0, [r4, #12]
 800631a:	9b03      	ldr	r3, [sp, #12]
 800631c:	4298      	cmp	r0, r3
 800631e:	bfb8      	it	lt
 8006320:	4618      	movlt	r0, r3
 8006322:	e7a6      	b.n	8006272 <_printf_i+0x162>
 8006324:	2301      	movs	r3, #1
 8006326:	4632      	mov	r2, r6
 8006328:	4649      	mov	r1, r9
 800632a:	4640      	mov	r0, r8
 800632c:	47d0      	blx	sl
 800632e:	3001      	adds	r0, #1
 8006330:	d09d      	beq.n	800626e <_printf_i+0x15e>
 8006332:	3501      	adds	r5, #1
 8006334:	68e3      	ldr	r3, [r4, #12]
 8006336:	9903      	ldr	r1, [sp, #12]
 8006338:	1a5b      	subs	r3, r3, r1
 800633a:	42ab      	cmp	r3, r5
 800633c:	dcf2      	bgt.n	8006324 <_printf_i+0x214>
 800633e:	e7eb      	b.n	8006318 <_printf_i+0x208>
 8006340:	2500      	movs	r5, #0
 8006342:	f104 0619 	add.w	r6, r4, #25
 8006346:	e7f5      	b.n	8006334 <_printf_i+0x224>
 8006348:	0800662b 	.word	0x0800662b
 800634c:	0800663c 	.word	0x0800663c

08006350 <memmove>:
 8006350:	4288      	cmp	r0, r1
 8006352:	b510      	push	{r4, lr}
 8006354:	eb01 0402 	add.w	r4, r1, r2
 8006358:	d902      	bls.n	8006360 <memmove+0x10>
 800635a:	4284      	cmp	r4, r0
 800635c:	4623      	mov	r3, r4
 800635e:	d807      	bhi.n	8006370 <memmove+0x20>
 8006360:	1e43      	subs	r3, r0, #1
 8006362:	42a1      	cmp	r1, r4
 8006364:	d008      	beq.n	8006378 <memmove+0x28>
 8006366:	f811 2b01 	ldrb.w	r2, [r1], #1
 800636a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800636e:	e7f8      	b.n	8006362 <memmove+0x12>
 8006370:	4601      	mov	r1, r0
 8006372:	4402      	add	r2, r0
 8006374:	428a      	cmp	r2, r1
 8006376:	d100      	bne.n	800637a <memmove+0x2a>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800637e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006382:	e7f7      	b.n	8006374 <memmove+0x24>

08006384 <_sbrk_r>:
 8006384:	b538      	push	{r3, r4, r5, lr}
 8006386:	2300      	movs	r3, #0
 8006388:	4d05      	ldr	r5, [pc, #20]	@ (80063a0 <_sbrk_r+0x1c>)
 800638a:	4604      	mov	r4, r0
 800638c:	4608      	mov	r0, r1
 800638e:	602b      	str	r3, [r5, #0]
 8006390:	f7fa fb6e 	bl	8000a70 <_sbrk>
 8006394:	1c43      	adds	r3, r0, #1
 8006396:	d102      	bne.n	800639e <_sbrk_r+0x1a>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	b103      	cbz	r3, 800639e <_sbrk_r+0x1a>
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	bd38      	pop	{r3, r4, r5, pc}
 80063a0:	20001e88 	.word	0x20001e88

080063a4 <memchr>:
 80063a4:	4603      	mov	r3, r0
 80063a6:	b510      	push	{r4, lr}
 80063a8:	b2c9      	uxtb	r1, r1
 80063aa:	4402      	add	r2, r0
 80063ac:	4293      	cmp	r3, r2
 80063ae:	4618      	mov	r0, r3
 80063b0:	d101      	bne.n	80063b6 <memchr+0x12>
 80063b2:	2000      	movs	r0, #0
 80063b4:	e003      	b.n	80063be <memchr+0x1a>
 80063b6:	7804      	ldrb	r4, [r0, #0]
 80063b8:	3301      	adds	r3, #1
 80063ba:	428c      	cmp	r4, r1
 80063bc:	d1f6      	bne.n	80063ac <memchr+0x8>
 80063be:	bd10      	pop	{r4, pc}

080063c0 <_realloc_r>:
 80063c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063c4:	4680      	mov	r8, r0
 80063c6:	4615      	mov	r5, r2
 80063c8:	460c      	mov	r4, r1
 80063ca:	b921      	cbnz	r1, 80063d6 <_realloc_r+0x16>
 80063cc:	4611      	mov	r1, r2
 80063ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063d2:	f7ff bc47 	b.w	8005c64 <_malloc_r>
 80063d6:	b92a      	cbnz	r2, 80063e4 <_realloc_r+0x24>
 80063d8:	f7ff fbda 	bl	8005b90 <_free_r>
 80063dc:	2400      	movs	r4, #0
 80063de:	4620      	mov	r0, r4
 80063e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063e4:	f000 f81a 	bl	800641c <_malloc_usable_size_r>
 80063e8:	4285      	cmp	r5, r0
 80063ea:	4606      	mov	r6, r0
 80063ec:	d802      	bhi.n	80063f4 <_realloc_r+0x34>
 80063ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063f2:	d8f4      	bhi.n	80063de <_realloc_r+0x1e>
 80063f4:	4629      	mov	r1, r5
 80063f6:	4640      	mov	r0, r8
 80063f8:	f7ff fc34 	bl	8005c64 <_malloc_r>
 80063fc:	4607      	mov	r7, r0
 80063fe:	2800      	cmp	r0, #0
 8006400:	d0ec      	beq.n	80063dc <_realloc_r+0x1c>
 8006402:	42b5      	cmp	r5, r6
 8006404:	462a      	mov	r2, r5
 8006406:	4621      	mov	r1, r4
 8006408:	bf28      	it	cs
 800640a:	4632      	movcs	r2, r6
 800640c:	f7ff fbb2 	bl	8005b74 <memcpy>
 8006410:	4621      	mov	r1, r4
 8006412:	4640      	mov	r0, r8
 8006414:	f7ff fbbc 	bl	8005b90 <_free_r>
 8006418:	463c      	mov	r4, r7
 800641a:	e7e0      	b.n	80063de <_realloc_r+0x1e>

0800641c <_malloc_usable_size_r>:
 800641c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006420:	1f18      	subs	r0, r3, #4
 8006422:	2b00      	cmp	r3, #0
 8006424:	bfbc      	itt	lt
 8006426:	580b      	ldrlt	r3, [r1, r0]
 8006428:	18c0      	addlt	r0, r0, r3
 800642a:	4770      	bx	lr

0800642c <_init>:
 800642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642e:	bf00      	nop
 8006430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006432:	bc08      	pop	{r3}
 8006434:	469e      	mov	lr, r3
 8006436:	4770      	bx	lr

08006438 <_fini>:
 8006438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643a:	bf00      	nop
 800643c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800643e:	bc08      	pop	{r3}
 8006440:	469e      	mov	lr, r3
 8006442:	4770      	bx	lr
